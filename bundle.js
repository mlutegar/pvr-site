/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,n,t={448:(e,n,t)=>{"use strict";var r=t(294),o=t(840);function i(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=new Set,a={};function l(e,n){d(e,n),d(e+"Capture",n)}function d(e,n){for(a[e]=n,e=0;e<n.length;e++)s.add(n[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),u=Object.prototype.hasOwnProperty,m=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},f={};function g(e,n,t,r,o,i,s){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=i,this.removeEmptyString=s}var h={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){h[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];h[n]=new g(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){h[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){h[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){h[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){h[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){h[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){h[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){h[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function C(e){return e[1].toUpperCase()}function b(e,n,t,r){var o=h.hasOwnProperty(n)?h[n]:null;(null!==o?0!==o.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,o,r)&&(t=null),r||null===o?function(e){return!!u.call(f,e)||!u.call(p,e)&&(m.test(e)?f[e]=!0:(p[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):o.mustUseProperty?e[o.propertyName]=null===t?3!==o.type&&"":t:(n=o.attributeName,r=o.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(v,C);h[n]=new g(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(v,C);h[n]=new g(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(v,C);h[n]=new g(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){h[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),h.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){h[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),P=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),A=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),D=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),I=Symbol.for("react.memo"),k=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var U=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function j(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var N,R=Object.assign;function F(e){if(void 0===N)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);N=n&&n[1]||""}return"\n"+N+e}var W=!1;function T(e,n){if(!e||W)return"";W=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var o=n.stack.split("\n"),i=r.stack.split("\n"),s=o.length-1,a=i.length-1;1<=s&&0<=a&&o[s]!==i[a];)a--;for(;1<=s&&0<=a;s--,a--)if(o[s]!==i[a]){if(1!==s||1!==a)do{if(s--,0>--a||o[s]!==i[a]){var l="\n"+o[s].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=s&&0<=a);break}}}finally{W=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?F(e):""}function B(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return T(e.type,!1);case 11:return T(e.type.render,!1);case 1:return T(e.type,!0);default:return""}}function z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case P:return"Portal";case A:return"Profiler";case E:return"StrictMode";case w:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case D:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case _:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case I:return null!==(n=e.displayName||null)?n:z(e.type)||"Memo";case k:n=e._payload,e=e._init;try{return z(e(n))}catch(e){}}return null}function V(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return z(n);case 8:return n===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function J(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function G(e){e._valueTracker||(e._valueTracker=function(e){var n=H(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,i=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function $(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function q(e,n){var t=n.checked;return R({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function X(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=J(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function Z(e,n){null!=(n=n.checked)&&b(e,"checked",n,!1)}function Y(e,n){Z(e,n);var t=J(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,J(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function K(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&Q(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+J(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(i(91));return R({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(i(92));if(ne(t)){if(1<t.length)throw Error(i(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:J(t)}}function ie(e,n){var t=J(n.value),r=J(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function se(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function ae(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?ae(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var de,ce,ue=(ce=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((de=de||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=de.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,n)}))}:ce);function me(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fe=["Webkit","ms","Moz","O"];function ge(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||pe.hasOwnProperty(e)&&pe[e]?(""+n).trim():n+"px"}function he(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=ge(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,o):e[t]=o}}Object.keys(pe).forEach((function(e){fe.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),pe[n]=pe[e]}))}));var ve=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ce(e,n){if(n){if(ve[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(i(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(i(62))}}function be(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,xe=null,Ee=null;function Ae(e){if(e=yo(e)){if("function"!=typeof Pe)throw Error(i(280));var n=e.stateNode;n&&(n=Po(n),Pe(e.stateNode,e.type,n))}}function Oe(e){xe?Ee?Ee.push(e):Ee=[e]:xe=e}function De(){if(xe){var e=xe,n=Ee;if(Ee=xe=null,Ae(e),n)for(e=0;e<n.length;e++)Ae(n[e])}}function _e(e,n){return e(n)}function we(){}var Le=!1;function Ie(e,n,t){if(Le)return e(n,t);Le=!0;try{return _e(e,n,t)}finally{Le=!1,(null!==xe||null!==Ee)&&(we(),De())}}function ke(e,n){var t=e.stateNode;if(null===t)return null;var r=Po(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(i(231,n,typeof t));return t}var Ue=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){Ue=!1}function je(e,n,t,r,o,i,s,a,l){var d=Array.prototype.slice.call(arguments,3);try{n.apply(t,d)}catch(e){this.onError(e)}}var Ne=!1,Re=null,Fe=!1,We=null,Te={onError:function(e){Ne=!0,Re=e}};function Be(e,n,t,r,o,i,s,a,l){Ne=!1,Re=null,je.apply(Te,arguments)}function ze(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Ve(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Je(e){if(ze(e)!==e)throw Error(i(188))}function He(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=ze(e)))throw Error(i(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var s=o.alternate;if(null===s){if(null!==(r=o.return)){t=r;continue}break}if(o.child===s.child){for(s=o.child;s;){if(s===t)return Je(o),e;if(s===r)return Je(o),n;s=s.sibling}throw Error(i(188))}if(t.return!==r.return)t=o,r=s;else{for(var a=!1,l=o.child;l;){if(l===t){a=!0,t=o,r=s;break}if(l===r){a=!0,r=o,t=s;break}l=l.sibling}if(!a){for(l=s.child;l;){if(l===t){a=!0,t=s,r=o;break}if(l===r){a=!0,r=s,t=o;break}l=l.sibling}if(!a)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?e:n}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=Ge(e);if(null!==n)return n;e=e.sibling}return null}var $e=o.unstable_scheduleCallback,Qe=o.unstable_cancelCallback,qe=o.unstable_shouldYield,Xe=o.unstable_requestPaint,Ze=o.unstable_now,Ye=o.unstable_getCurrentPriorityLevel,Ke=o.unstable_ImmediatePriority,en=o.unstable_UserBlockingPriority,nn=o.unstable_NormalPriority,tn=o.unstable_LowPriority,rn=o.unstable_IdlePriority,on=null,sn=null,an=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ln(e)/dn|0)|0},ln=Math.log,dn=Math.LN2,cn=64,un=4194304;function mn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,s=268435455&t;if(0!==s){var a=s&~o;0!==a?r=mn(a):0!=(i&=s)&&(r=mn(i))}else 0!=(s=t&~o)?r=mn(s):0!==i&&(r=mn(i));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&o)&&((o=r&-r)>=(i=n&-n)||16===o&&0!=(4194240&i)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)o=1<<(t=31-an(n)),r|=e[t],n&=~o;return r}function fn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function gn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function hn(){var e=cn;return 0==(4194240&(cn<<=1))&&(cn=64),e}function vn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function Cn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-an(n)]=t}function bn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-an(t),o=1<<r;o&n|e[r]&n&&(e[r]|=n),t&=~o}}var yn=0;function Sn(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Pn,xn,En,An,On,Dn=!1,_n=[],wn=null,Ln=null,In=null,kn=new Map,Un=new Map,Mn=[],jn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nn(e,n){switch(e){case"focusin":case"focusout":wn=null;break;case"dragenter":case"dragleave":Ln=null;break;case"mouseover":case"mouseout":In=null;break;case"pointerover":case"pointerout":kn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":Un.delete(n.pointerId)}}function Rn(e,n,t,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==n&&null!==(n=yo(n))&&xn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function Fn(e){var n=bo(e.target);if(null!==n){var t=ze(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Ve(t)))return e.blockedOn=n,void On(e.priority,(function(){En(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Wn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Xn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=yo(t))&&xn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);ye=r,t.target.dispatchEvent(r),ye=null,n.shift()}return!0}function Tn(e,n,t){Wn(e)&&t.delete(n)}function Bn(){Dn=!1,null!==wn&&Wn(wn)&&(wn=null),null!==Ln&&Wn(Ln)&&(Ln=null),null!==In&&Wn(In)&&(In=null),kn.forEach(Tn),Un.forEach(Tn)}function zn(e,n){e.blockedOn===n&&(e.blockedOn=null,Dn||(Dn=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Bn)))}function Vn(e){function n(n){return zn(n,e)}if(0<_n.length){zn(_n[0],e);for(var t=1;t<_n.length;t++){var r=_n[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wn&&zn(wn,e),null!==Ln&&zn(Ln,e),null!==In&&zn(In,e),kn.forEach(n),Un.forEach(n),t=0;t<Mn.length;t++)(r=Mn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<Mn.length&&null===(t=Mn[0]).blockedOn;)Fn(t),null===t.blockedOn&&Mn.shift()}var Jn=y.ReactCurrentBatchConfig,Hn=!0;function Gn(e,n,t,r){var o=yn,i=Jn.transition;Jn.transition=null;try{yn=1,Qn(e,n,t,r)}finally{yn=o,Jn.transition=i}}function $n(e,n,t,r){var o=yn,i=Jn.transition;Jn.transition=null;try{yn=4,Qn(e,n,t,r)}finally{yn=o,Jn.transition=i}}function Qn(e,n,t,r){if(Hn){var o=Xn(e,n,t,r);if(null===o)Jr(e,n,r,qn,t),Nn(e,r);else if(function(e,n,t,r,o){switch(n){case"focusin":return wn=Rn(wn,e,n,t,r,o),!0;case"dragenter":return Ln=Rn(Ln,e,n,t,r,o),!0;case"mouseover":return In=Rn(In,e,n,t,r,o),!0;case"pointerover":var i=o.pointerId;return kn.set(i,Rn(kn.get(i)||null,e,n,t,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Un.set(i,Rn(Un.get(i)||null,e,n,t,r,o)),!0}return!1}(o,e,n,t,r))r.stopPropagation();else if(Nn(e,r),4&n&&-1<jn.indexOf(e)){for(;null!==o;){var i=yo(o);if(null!==i&&Pn(i),null===(i=Xn(e,n,t,r))&&Jr(e,n,r,qn,t),i===o)break;o=i}null!==o&&r.stopPropagation()}else Jr(e,n,r,null,t)}}var qn=null;function Xn(e,n,t,r){if(qn=null,null!==(e=bo(e=Se(r))))if(null===(n=ze(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=Ve(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return qn=e,null}function Zn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Ke:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Yn=null,Kn=null,et=null;function nt(){if(et)return et;var e,n,t=Kn,r=t.length,o="value"in Yn?Yn.value:Yn.textContent,i=o.length;for(e=0;e<r&&t[e]===o[e];e++);var s=r-e;for(n=1;n<=s&&t[r-n]===o[i-n];n++);return et=o.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function ot(){return!1}function it(e){function n(n,t,r,o,i){for(var s in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(s)&&(n=e[s],this[s]=n?n(o):o[s]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rt:ot,this.isPropagationStopped=ot,this}return R(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var st,at,lt,dt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=it(dt),ut=R({},dt,{view:0,detail:0}),mt=it(ut),pt=R({},ut,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:At,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lt&&(lt&&"mousemove"===e.type?(st=e.screenX-lt.screenX,at=e.screenY-lt.screenY):at=st=0,lt=e),st)},movementY:function(e){return"movementY"in e?e.movementY:at}}),ft=it(pt),gt=it(R({},pt,{dataTransfer:0})),ht=it(R({},ut,{relatedTarget:0})),vt=it(R({},dt,{animationName:0,elapsedTime:0,pseudoElement:0})),Ct=R({},dt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bt=it(Ct),yt=it(R({},dt,{data:0})),St={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Pt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Et(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=xt[e])&&!!n[e]}function At(){return Et}var Ot=R({},ut,{key:function(e){if(e.key){var n=St[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Pt[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:At,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Dt=it(Ot),_t=it(R({},pt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),wt=it(R({},ut,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:At})),Lt=it(R({},dt,{propertyName:0,elapsedTime:0,pseudoElement:0})),It=R({},pt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),kt=it(It),Ut=[9,13,27,32],Mt=c&&"CompositionEvent"in window,jt=null;c&&"documentMode"in document&&(jt=document.documentMode);var Nt=c&&"TextEvent"in window&&!jt,Rt=c&&(!Mt||jt&&8<jt&&11>=jt),Ft=String.fromCharCode(32),Wt=!1;function Tt(e,n){switch(e){case"keyup":return-1!==Ut.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zt=!1,Vt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Jt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Vt[e.type]:"textarea"===n}function Ht(e,n,t,r){Oe(r),0<(n=Gr(n,"onChange")).length&&(t=new ct("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Gt=null,$t=null;function Qt(e){Fr(e,0)}function qt(e){if($(So(e)))return e}function Xt(e,n){if("change"===e)return n}var Zt=!1;if(c){var Yt;if(c){var Kt="oninput"in document;if(!Kt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Kt="function"==typeof er.oninput}Yt=Kt}else Yt=!1;Zt=Yt&&(!document.documentMode||9<document.documentMode)}function nr(){Gt&&(Gt.detachEvent("onpropertychange",tr),$t=Gt=null)}function tr(e){if("value"===e.propertyName&&qt($t)){var n=[];Ht(n,$t,e,Se(e)),Ie(Qt,n)}}function rr(e,n,t){"focusin"===e?(nr(),$t=t,(Gt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qt($t)}function ir(e,n){if("click"===e)return qt(n)}function sr(e,n){if("input"===e||"change"===e)return qt(n)}var ar="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function lr(e,n){if(ar(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!u.call(n,o)||!ar(e[o],n[o]))return!1}return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function ur(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?ur(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function mr(){for(var e=window,n=Q();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=Q((e=n.contentWindow).document)}return n}function pr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function fr(e){var n=mr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&ur(t.ownerDocument.documentElement,t)){if(null!==r&&pr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var o=t.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(t,i);var s=cr(t,r);o&&s&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&((n=n.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(n),e.extend(s.node,s.offset)):(n.setEnd(s.node,s.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,hr=null,vr=null,Cr=null,br=!1;function yr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;br||null==hr||hr!==Q(r)||(r="selectionStart"in(r=hr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Cr&&lr(Cr,r)||(Cr=r,0<(r=Gr(vr,"onSelect")).length&&(n=new ct("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=hr)))}function Sr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Pr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},xr={},Er={};function Ar(e){if(xr[e])return xr[e];if(!Pr[e])return e;var n,t=Pr[e];for(n in t)if(t.hasOwnProperty(n)&&n in Er)return xr[e]=t[n];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete Pr.animationend.animation,delete Pr.animationiteration.animation,delete Pr.animationstart.animation),"TransitionEvent"in window||delete Pr.transitionend.transition);var Or=Ar("animationend"),Dr=Ar("animationiteration"),_r=Ar("animationstart"),wr=Ar("transitionend"),Lr=new Map,Ir="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function kr(e,n){Lr.set(e,n),l(n,[e])}for(var Ur=0;Ur<Ir.length;Ur++){var Mr=Ir[Ur];kr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}kr(Or,"onAnimationEnd"),kr(Dr,"onAnimationIteration"),kr(_r,"onAnimationStart"),kr("dblclick","onDoubleClick"),kr("focusin","onFocus"),kr("focusout","onBlur"),kr(wr,"onTransitionEnd"),d("onMouseEnter",["mouseout","mouseover"]),d("onMouseLeave",["mouseout","mouseover"]),d("onPointerEnter",["pointerout","pointerover"]),d("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var jr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Nr=new Set("cancel close invalid load scroll toggle".split(" ").concat(jr));function Rr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,o,s,a,l,d){if(Be.apply(this,arguments),Ne){if(!Ne)throw Error(i(198));var c=Re;Ne=!1,Re=null,Fe||(Fe=!0,We=c)}}(r,n,void 0,e),e.currentTarget=null}function Fr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var i=void 0;if(n)for(var s=r.length-1;0<=s;s--){var a=r[s],l=a.instance,d=a.currentTarget;if(a=a.listener,l!==i&&o.isPropagationStopped())break e;Rr(o,a,d),i=l}else for(s=0;s<r.length;s++){if(l=(a=r[s]).instance,d=a.currentTarget,a=a.listener,l!==i&&o.isPropagationStopped())break e;Rr(o,a,d),i=l}}}if(Fe)throw e=We,Fe=!1,We=null,e}function Wr(e,n){var t=n[ho];void 0===t&&(t=n[ho]=new Set);var r=e+"__bubble";t.has(r)||(Vr(n,e,2,!1),t.add(r))}function Tr(e,n,t){var r=0;n&&(r|=4),Vr(t,e,r,n)}var Br="_reactListening"+Math.random().toString(36).slice(2);function zr(e){if(!e[Br]){e[Br]=!0,s.forEach((function(n){"selectionchange"!==n&&(Nr.has(n)||Tr(n,!1,e),Tr(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Br]||(n[Br]=!0,Tr("selectionchange",!1,n))}}function Vr(e,n,t,r){switch(Zn(n)){case 1:var o=Gn;break;case 4:o=$n;break;default:o=Qn}t=o.bind(null,n,t,e),o=void 0,!Ue||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Jr(e,n,t,r,o){var i=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var s=r.tag;if(3===s||4===s){var a=r.stateNode.containerInfo;if(a===o||8===a.nodeType&&a.parentNode===o)break;if(4===s)for(s=r.return;null!==s;){var l=s.tag;if((3===l||4===l)&&((l=s.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;s=s.return}for(;null!==a;){if(null===(s=bo(a)))return;if(5===(l=s.tag)||6===l){r=i=s;continue e}a=a.parentNode}}r=r.return}Ie((function(){var r=i,o=Se(t),s=[];e:{var a=Lr.get(e);if(void 0!==a){var l=ct,d=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":l=Dt;break;case"focusin":d="focus",l=ht;break;case"focusout":d="blur",l=ht;break;case"beforeblur":case"afterblur":l=ht;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=ft;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=wt;break;case Or:case Dr:case _r:l=vt;break;case wr:l=Lt;break;case"scroll":l=mt;break;case"wheel":l=kt;break;case"copy":case"cut":case"paste":l=bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=_t}var c=0!=(4&n),u=!c&&"scroll"===e,m=c?null!==a?a+"Capture":null:a;c=[];for(var p,f=r;null!==f;){var g=(p=f).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==m&&null!=(g=ke(f,m))&&c.push(Hr(f,g,p))),u)break;f=f.return}0<c.length&&(a=new l(a,d,null,t,o),s.push({event:a,listeners:c}))}}if(0==(7&n)){if(l="mouseout"===e||"pointerout"===e,(!(a="mouseover"===e||"pointerover"===e)||t===ye||!(d=t.relatedTarget||t.fromElement)||!bo(d)&&!d[go])&&(l||a)&&(a=o.window===o?o:(a=o.ownerDocument)?a.defaultView||a.parentWindow:window,l?(l=r,null!==(d=(d=t.relatedTarget||t.toElement)?bo(d):null)&&(d!==(u=ze(d))||5!==d.tag&&6!==d.tag)&&(d=null)):(l=null,d=r),l!==d)){if(c=ft,g="onMouseLeave",m="onMouseEnter",f="mouse","pointerout"!==e&&"pointerover"!==e||(c=_t,g="onPointerLeave",m="onPointerEnter",f="pointer"),u=null==l?a:So(l),p=null==d?a:So(d),(a=new c(g,f+"leave",l,t,o)).target=u,a.relatedTarget=p,g=null,bo(o)===r&&((c=new c(m,f+"enter",d,t,o)).target=p,c.relatedTarget=u,g=c),u=g,l&&d)e:{for(m=d,f=0,p=c=l;p;p=$r(p))f++;for(p=0,g=m;g;g=$r(g))p++;for(;0<f-p;)c=$r(c),f--;for(;0<p-f;)m=$r(m),p--;for(;f--;){if(c===m||null!==m&&c===m.alternate)break e;c=$r(c),m=$r(m)}c=null}else c=null;null!==l&&Qr(s,a,l,c,!1),null!==d&&null!==u&&Qr(s,u,d,c,!0)}if("select"===(l=(a=r?So(r):window).nodeName&&a.nodeName.toLowerCase())||"input"===l&&"file"===a.type)var h=Xt;else if(Jt(a))if(Zt)h=sr;else{h=or;var v=rr}else(l=a.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(h=ir);switch(h&&(h=h(e,r))?Ht(s,h,t,o):(v&&v(e,a,r),"focusout"===e&&(v=a._wrapperState)&&v.controlled&&"number"===a.type&&ee(a,"number",a.value)),v=r?So(r):window,e){case"focusin":(Jt(v)||"true"===v.contentEditable)&&(hr=v,vr=r,Cr=null);break;case"focusout":Cr=vr=hr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,yr(s,t,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":yr(s,t,o)}var C;if(Mt)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zt?Tt(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(Rt&&"ko"!==t.locale&&(zt||"onCompositionStart"!==b?"onCompositionEnd"===b&&zt&&(C=nt()):(Kn="value"in(Yn=o)?Yn.value:Yn.textContent,zt=!0)),0<(v=Gr(r,b)).length&&(b=new yt(b,e,null,t,o),s.push({event:b,listeners:v}),(C||null!==(C=Bt(t)))&&(b.data=C))),(C=Nt?function(e,n){switch(e){case"compositionend":return Bt(n);case"keypress":return 32!==n.which?null:(Wt=!0,Ft);case"textInput":return(e=n.data)===Ft&&Wt?null:e;default:return null}}(e,t):function(e,n){if(zt)return"compositionend"===e||!Mt&&Tt(e,n)?(e=nt(),et=Kn=Yn=null,zt=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Rt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Gr(r,"onBeforeInput")).length&&(o=new yt("onBeforeInput","beforeinput",null,t,o),s.push({event:o,listeners:r}),o.data=C)}Fr(s,n)}))}function Hr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Gr(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=ke(e,t))&&r.unshift(Hr(e,i,o)),null!=(i=ke(e,n))&&r.push(Hr(e,i,o))),e=e.return}return r}function $r(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,n,t,r,o){for(var i=n._reactName,s=[];null!==t&&t!==r;){var a=t,l=a.alternate,d=a.stateNode;if(null!==l&&l===r)break;5===a.tag&&null!==d&&(a=d,o?null!=(l=ke(t,i))&&s.unshift(Hr(t,l,a)):o||null!=(l=ke(t,i))&&s.push(Hr(t,l,a))),t=t.return}0!==s.length&&e.push({event:n,listeners:s})}var qr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Zr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Xr,"")}function Yr(e,n,t){if(n=Zr(n),Zr(e)!==n&&t)throw Error(i(425))}function Kr(){}var eo=null,no=null;function to(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,so="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(ao)}:ro;function ao(e){setTimeout((function(){throw e}))}function lo(e,n){var t=n,r=0;do{var o=t.nextSibling;if(e.removeChild(t),o&&8===o.nodeType)if("/$"===(t=o.data)){if(0===r)return e.removeChild(o),void Vn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=o}while(t);Vn(n)}function co(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function uo(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var mo=Math.random().toString(36).slice(2),po="__reactFiber$"+mo,fo="__reactProps$"+mo,go="__reactContainer$"+mo,ho="__reactEvents$"+mo,vo="__reactListeners$"+mo,Co="__reactHandles$"+mo;function bo(e){var n=e[po];if(n)return n;for(var t=e.parentNode;t;){if(n=t[go]||t[po]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=uo(e);null!==e;){if(t=e[po])return t;e=uo(e)}return n}t=(e=t).parentNode}return null}function yo(e){return!(e=e[po]||e[go])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Po(e){return e[fo]||null}var xo=[],Eo=-1;function Ao(e){return{current:e}}function Oo(e){0>Eo||(e.current=xo[Eo],xo[Eo]=null,Eo--)}function Do(e,n){Eo++,xo[Eo]=e.current,e.current=n}var _o={},wo=Ao(_o),Lo=Ao(!1),Io=_o;function ko(e,n){var t=e.type.contextTypes;if(!t)return _o;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in t)i[o]=n[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=i),i}function Uo(e){return null!=e.childContextTypes}function Mo(){Oo(Lo),Oo(wo)}function jo(e,n,t){if(wo.current!==_o)throw Error(i(168));Do(wo,n),Do(Lo,t)}function No(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var o in r=r.getChildContext())if(!(o in n))throw Error(i(108,V(e)||"Unknown",o));return R({},t,r)}function Ro(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_o,Io=wo.current,Do(wo,e),Do(Lo,Lo.current),!0}function Fo(e,n,t){var r=e.stateNode;if(!r)throw Error(i(169));t?(e=No(e,n,Io),r.__reactInternalMemoizedMergedChildContext=e,Oo(Lo),Oo(wo),Do(wo,e)):Oo(Lo),Do(Lo,t)}var Wo=null,To=!1,Bo=!1;function zo(e){null===Wo?Wo=[e]:Wo.push(e)}function Vo(){if(!Bo&&null!==Wo){Bo=!0;var e=0,n=yn;try{var t=Wo;for(yn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Wo=null,To=!1}catch(n){throw null!==Wo&&(Wo=Wo.slice(e+1)),$e(Ke,Vo),n}finally{yn=n,Bo=!1}}return null}var Jo=[],Ho=0,Go=null,$o=0,Qo=[],qo=0,Xo=null,Zo=1,Yo="";function Ko(e,n){Jo[Ho++]=$o,Jo[Ho++]=Go,Go=e,$o=n}function ei(e,n,t){Qo[qo++]=Zo,Qo[qo++]=Yo,Qo[qo++]=Xo,Xo=e;var r=Zo;e=Yo;var o=32-an(r)-1;r&=~(1<<o),t+=1;var i=32-an(n)+o;if(30<i){var s=o-o%5;i=(r&(1<<s)-1).toString(32),r>>=s,o-=s,Zo=1<<32-an(n)+o|t<<o|r,Yo=i+e}else Zo=1<<i|t<<o|r,Yo=e}function ni(e){null!==e.return&&(Ko(e,1),ei(e,1,0))}function ti(e){for(;e===Go;)Go=Jo[--Ho],Jo[Ho]=null,$o=Jo[--Ho],Jo[Ho]=null;for(;e===Xo;)Xo=Qo[--qo],Qo[qo]=null,Yo=Qo[--qo],Qo[qo]=null,Zo=Qo[--qo],Qo[qo]=null}var ri=null,oi=null,ii=!1,si=null;function ai(e,n){var t=kd(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function li(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,ri=e,oi=co(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,ri=e,oi=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Xo?{id:Zo,overflow:Yo}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=kd(18,null,null,0)).stateNode=n,t.return=e,e.child=t,ri=e,oi=null,!0);default:return!1}}function di(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ci(e){if(ii){var n=oi;if(n){var t=n;if(!li(e,n)){if(di(e))throw Error(i(418));n=co(t.nextSibling);var r=ri;n&&li(e,n)?ai(r,t):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(di(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function mi(e){if(e!==ri)return!1;if(!ii)return ui(e),ii=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!to(e.type,e.memoizedProps)),n&&(n=oi)){if(di(e))throw pi(),Error(i(418));for(;n;)ai(e,n),n=co(n.nextSibling)}if(ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){oi=co(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}oi=null}}else oi=ri?co(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=oi;e;)e=co(e.nextSibling)}function fi(){oi=ri=null,ii=!1}function gi(e){null===si?si=[e]:si.push(e)}var hi=y.ReactCurrentBatchConfig;function vi(e,n){if(e&&e.defaultProps){for(var t in n=R({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var Ci=Ao(null),bi=null,yi=null,Si=null;function Pi(){Si=yi=bi=null}function xi(e){var n=Ci.current;Oo(Ci),e._currentValue=n}function Ei(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Ai(e,n){bi=e,Si=yi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(ya=!0),e.firstContext=null)}function Oi(e){var n=e._currentValue;if(Si!==e)if(e={context:e,memoizedValue:n,next:null},null===yi){if(null===bi)throw Error(i(308));yi=e,bi.dependencies={lanes:0,firstContext:e}}else yi=yi.next=e;return n}var Di=null;function _i(e){null===Di?Di=[e]:Di.push(e)}function wi(e,n,t,r){var o=n.interleaved;return null===o?(t.next=t,_i(n)):(t.next=o.next,o.next=t),n.interleaved=t,Li(e,r)}function Li(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Ii=!1;function ki(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ui(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mi(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function ji(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&wl)){var o=r.pending;return null===o?n.next=n:(n.next=o.next,o.next=n),r.pending=n,Li(e,t)}return null===(o=r.interleaved)?(n.next=n,_i(r)):(n.next=o.next,o.next=n),r.interleaved=n,Li(e,t)}function Ni(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}function Ri(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,i=null;if(null!==(t=t.firstBaseUpdate)){do{var s={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===i?o=i=s:i=i.next=s,t=t.next}while(null!==t);null===i?o=i=n:i=i.next=n}else o=i=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Fi(e,n,t,r){var o=e.updateQueue;Ii=!1;var i=o.firstBaseUpdate,s=o.lastBaseUpdate,a=o.shared.pending;if(null!==a){o.shared.pending=null;var l=a,d=l.next;l.next=null,null===s?i=d:s.next=d,s=l;var c=e.alternate;null!==c&&(a=(c=c.updateQueue).lastBaseUpdate)!==s&&(null===a?c.firstBaseUpdate=d:a.next=d,c.lastBaseUpdate=l)}if(null!==i){var u=o.baseState;for(s=0,c=d=l=null,a=i;;){var m=a.lane,p=a.eventTime;if((r&m)===m){null!==c&&(c=c.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var f=e,g=a;switch(m=n,p=t,g.tag){case 1:if("function"==typeof(f=g.payload)){u=f.call(p,u,m);break e}u=f;break e;case 3:f.flags=-65537&f.flags|128;case 0:if(null==(m="function"==typeof(f=g.payload)?f.call(p,u,m):f))break e;u=R({},u,m);break e;case 2:Ii=!0}}null!==a.callback&&0!==a.lane&&(e.flags|=64,null===(m=o.effects)?o.effects=[a]:m.push(a))}else p={eventTime:p,lane:m,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===c?(d=c=p,l=u):c=c.next=p,s|=m;if(null===(a=a.next)){if(null===(a=o.shared.pending))break;a=(m=a).next,m.next=null,o.lastBaseUpdate=m,o.shared.pending=null}}if(null===c&&(l=u),o.baseState=l,o.firstBaseUpdate=d,o.lastBaseUpdate=c,null!==(n=o.shared.interleaved)){o=n;do{s|=o.lane,o=o.next}while(o!==n)}else null===i&&(o.shared.lanes=0);Rl|=s,e.lanes=s,e.memoizedState=u}}function Wi(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],o=r.callback;if(null!==o){if(r.callback=null,r=t,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Ti=(new r.Component).refs;function Bi(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:R({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var zi={isMounted:function(e){return!!(e=e._reactInternals)&&ze(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=nd(),o=td(e),i=Mi(r,o);i.payload=n,null!=t&&(i.callback=t),null!==(n=ji(e,i,o))&&(rd(n,e,o,r),Ni(n,e,o))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=nd(),o=td(e),i=Mi(r,o);i.tag=1,i.payload=n,null!=t&&(i.callback=t),null!==(n=ji(e,i,o))&&(rd(n,e,o,r),Ni(n,e,o))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=nd(),r=td(e),o=Mi(t,r);o.tag=2,null!=n&&(o.callback=n),null!==(n=ji(e,o,r))&&(rd(n,e,r,t),Ni(n,e,r))}};function Vi(e,n,t,r,o,i,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,s):!(n.prototype&&n.prototype.isPureReactComponent&&lr(t,r)&&lr(o,i))}function Ji(e,n,t){var r=!1,o=_o,i=n.contextType;return"object"==typeof i&&null!==i?i=Oi(i):(o=Uo(n)?Io:wo.current,i=(r=null!=(r=n.contextTypes))?ko(e,o):_o),n=new n(t,i),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=zi,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),n}function Hi(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&zi.enqueueReplaceState(n,n.state,null)}function Gi(e,n,t,r){var o=e.stateNode;o.props=t,o.state=e.memoizedState,o.refs=Ti,ki(e);var i=n.contextType;"object"==typeof i&&null!==i?o.context=Oi(i):(i=Uo(n)?Io:wo.current,o.context=ko(e,i)),o.state=e.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(Bi(e,n,i,t),o.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&zi.enqueueReplaceState(o,o.state,null),Fi(e,t,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function $i(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(i(309));var r=t.stateNode}if(!r)throw Error(i(147,e));var o=r,s=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===s?n.ref:(n=function(e){var n=o.refs;n===Ti&&(n=o.refs={}),null===e?delete n[s]:n[s]=e},n._stringRef=s,n)}if("string"!=typeof e)throw Error(i(284));if(!t._owner)throw Error(i(290,e))}return e}function Qi(e,n){throw e=Object.prototype.toString.call(n),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function qi(e){return(0,e._init)(e._payload)}function Xi(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function o(e,n){return(e=Md(e,n)).index=0,e.sibling=null,e}function s(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function a(n){return e&&null===n.alternate&&(n.flags|=2),n}function l(e,n,t,r){return null===n||6!==n.tag?((n=Fd(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function d(e,n,t,r){var i=t.type;return i===x?u(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===k&&qi(i)===n.type)?((r=o(n,t.props)).ref=$i(e,n,t),r.return=e,r):((r=jd(t.type,t.key,t.props,null,e.mode,r)).ref=$i(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Wd(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function u(e,n,t,r,i){return null===n||7!==n.tag?((n=Nd(t,e.mode,r,i)).return=e,n):((n=o(n,t)).return=e,n)}function m(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Fd(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return(t=jd(n.type,n.key,n.props,null,e.mode,t)).ref=$i(e,null,n),t.return=e,t;case P:return(n=Wd(n,e.mode,t)).return=e,n;case k:return m(e,(0,n._init)(n._payload),t)}if(ne(n)||j(n))return(n=Nd(n,e.mode,t,null)).return=e,n;Qi(e,n)}return null}function p(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==o?null:l(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return t.key===o?d(e,n,t,r):null;case P:return t.key===o?c(e,n,t,r):null;case k:return p(e,n,(o=t._init)(t._payload),r)}if(ne(t)||j(t))return null!==o?null:u(e,n,t,r,null);Qi(e,t)}return null}function f(e,n,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return d(n,e=e.get(null===r.key?t:r.key)||null,r,o);case P:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o);case k:return f(e,n,t,(0,r._init)(r._payload),o)}if(ne(r)||j(r))return u(n,e=e.get(t)||null,r,o,null);Qi(n,r)}return null}function g(o,i,a,l){for(var d=null,c=null,u=i,g=i=0,h=null;null!==u&&g<a.length;g++){u.index>g?(h=u,u=null):h=u.sibling;var v=p(o,u,a[g],l);if(null===v){null===u&&(u=h);break}e&&u&&null===v.alternate&&n(o,u),i=s(v,i,g),null===c?d=v:c.sibling=v,c=v,u=h}if(g===a.length)return t(o,u),ii&&Ko(o,g),d;if(null===u){for(;g<a.length;g++)null!==(u=m(o,a[g],l))&&(i=s(u,i,g),null===c?d=u:c.sibling=u,c=u);return ii&&Ko(o,g),d}for(u=r(o,u);g<a.length;g++)null!==(h=f(u,o,g,a[g],l))&&(e&&null!==h.alternate&&u.delete(null===h.key?g:h.key),i=s(h,i,g),null===c?d=h:c.sibling=h,c=h);return e&&u.forEach((function(e){return n(o,e)})),ii&&Ko(o,g),d}function h(o,a,l,d){var c=j(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var u=c=null,g=a,h=a=0,v=null,C=l.next();null!==g&&!C.done;h++,C=l.next()){g.index>h?(v=g,g=null):v=g.sibling;var b=p(o,g,C.value,d);if(null===b){null===g&&(g=v);break}e&&g&&null===b.alternate&&n(o,g),a=s(b,a,h),null===u?c=b:u.sibling=b,u=b,g=v}if(C.done)return t(o,g),ii&&Ko(o,h),c;if(null===g){for(;!C.done;h++,C=l.next())null!==(C=m(o,C.value,d))&&(a=s(C,a,h),null===u?c=C:u.sibling=C,u=C);return ii&&Ko(o,h),c}for(g=r(o,g);!C.done;h++,C=l.next())null!==(C=f(g,o,h,C.value,d))&&(e&&null!==C.alternate&&g.delete(null===C.key?h:C.key),a=s(C,a,h),null===u?c=C:u.sibling=C,u=C);return e&&g.forEach((function(e){return n(o,e)})),ii&&Ko(o,h),c}return function e(r,i,s,l){if("object"==typeof s&&null!==s&&s.type===x&&null===s.key&&(s=s.props.children),"object"==typeof s&&null!==s){switch(s.$$typeof){case S:e:{for(var d=s.key,c=i;null!==c;){if(c.key===d){if((d=s.type)===x){if(7===c.tag){t(r,c.sibling),(i=o(c,s.props.children)).return=r,r=i;break e}}else if(c.elementType===d||"object"==typeof d&&null!==d&&d.$$typeof===k&&qi(d)===c.type){t(r,c.sibling),(i=o(c,s.props)).ref=$i(r,c,s),i.return=r,r=i;break e}t(r,c);break}n(r,c),c=c.sibling}s.type===x?((i=Nd(s.props.children,r.mode,l,s.key)).return=r,r=i):((l=jd(s.type,s.key,s.props,null,r.mode,l)).ref=$i(r,i,s),l.return=r,r=l)}return a(r);case P:e:{for(c=s.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===s.containerInfo&&i.stateNode.implementation===s.implementation){t(r,i.sibling),(i=o(i,s.children||[])).return=r,r=i;break e}t(r,i);break}n(r,i),i=i.sibling}(i=Wd(s,r.mode,l)).return=r,r=i}return a(r);case k:return e(r,i,(c=s._init)(s._payload),l)}if(ne(s))return g(r,i,s,l);if(j(s))return h(r,i,s,l);Qi(r,s)}return"string"==typeof s&&""!==s||"number"==typeof s?(s=""+s,null!==i&&6===i.tag?(t(r,i.sibling),(i=o(i,s)).return=r,r=i):(t(r,i),(i=Fd(s,r.mode,l)).return=r,r=i),a(r)):t(r,i)}}var Zi=Xi(!0),Yi=Xi(!1),Ki={},es=Ao(Ki),ns=Ao(Ki),ts=Ao(Ki);function rs(e){if(e===Ki)throw Error(i(174));return e}function os(e,n){switch(Do(ts,n),Do(ns,e),Do(es,Ki),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:le(null,"");break;default:n=le(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Oo(es),Do(es,n)}function is(){Oo(es),Oo(ns),Oo(ts)}function ss(e){rs(ts.current);var n=rs(es.current),t=le(n,e.type);n!==t&&(Do(ns,e),Do(es,t))}function as(e){ns.current===e&&(Oo(es),Oo(ns))}var ls=Ao(0);function ds(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var cs=[];function us(){for(var e=0;e<cs.length;e++)cs[e]._workInProgressVersionPrimary=null;cs.length=0}var ms=y.ReactCurrentDispatcher,ps=y.ReactCurrentBatchConfig,fs=0,gs=null,hs=null,vs=null,Cs=!1,bs=!1,ys=0,Ss=0;function Ps(){throw Error(i(321))}function xs(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!ar(e[t],n[t]))return!1;return!0}function Es(e,n,t,r,o,s){if(fs=s,gs=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,ms.current=null===e||null===e.memoizedState?aa:la,e=t(r,o),bs){s=0;do{if(bs=!1,ys=0,25<=s)throw Error(i(301));s+=1,vs=hs=null,n.updateQueue=null,ms.current=da,e=t(r,o)}while(bs)}if(ms.current=sa,n=null!==hs&&null!==hs.next,fs=0,vs=hs=gs=null,Cs=!1,n)throw Error(i(300));return e}function As(){var e=0!==ys;return ys=0,e}function Os(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vs?gs.memoizedState=vs=e:vs=vs.next=e,vs}function Ds(){if(null===hs){var e=gs.alternate;e=null!==e?e.memoizedState:null}else e=hs.next;var n=null===vs?gs.memoizedState:vs.next;if(null!==n)vs=n,hs=e;else{if(null===e)throw Error(i(310));e={memoizedState:(hs=e).memoizedState,baseState:hs.baseState,baseQueue:hs.baseQueue,queue:hs.queue,next:null},null===vs?gs.memoizedState=vs=e:vs=vs.next=e}return vs}function _s(e,n){return"function"==typeof n?n(e):n}function ws(e){var n=Ds(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=hs,o=r.baseQueue,s=t.pending;if(null!==s){if(null!==o){var a=o.next;o.next=s.next,s.next=a}r.baseQueue=o=s,t.pending=null}if(null!==o){s=o.next,r=r.baseState;var l=a=null,d=null,c=s;do{var u=c.lane;if((fs&u)===u)null!==d&&(d=d.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var m={lane:u,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===d?(l=d=m,a=r):d=d.next=m,gs.lanes|=u,Rl|=u}c=c.next}while(null!==c&&c!==s);null===d?a=r:d.next=l,ar(r,n.memoizedState)||(ya=!0),n.memoizedState=r,n.baseState=a,n.baseQueue=d,t.lastRenderedState=r}if(null!==(e=t.interleaved)){o=e;do{s=o.lane,gs.lanes|=s,Rl|=s,o=o.next}while(o!==e)}else null===o&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Ls(e){var n=Ds(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,s=n.memoizedState;if(null!==o){t.pending=null;var a=o=o.next;do{s=e(s,a.action),a=a.next}while(a!==o);ar(s,n.memoizedState)||(ya=!0),n.memoizedState=s,null===n.baseQueue&&(n.baseState=s),t.lastRenderedState=s}return[s,r]}function Is(){}function ks(e,n){var t=gs,r=Ds(),o=n(),s=!ar(r.memoizedState,o);if(s&&(r.memoizedState=o,ya=!0),r=r.queue,Js(js.bind(null,t,r,e),[e]),r.getSnapshot!==n||s||null!==vs&&1&vs.memoizedState.tag){if(t.flags|=2048,Ws(9,Ms.bind(null,t,r,o,n),void 0,null),null===Ll)throw Error(i(349));0!=(30&fs)||Us(t,n,o)}return o}function Us(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=gs.updateQueue)?(n={lastEffect:null,stores:null},gs.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Ms(e,n,t,r){n.value=t,n.getSnapshot=r,Ns(n)&&Rs(e)}function js(e,n,t){return t((function(){Ns(n)&&Rs(e)}))}function Ns(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!ar(e,t)}catch(e){return!0}}function Rs(e){var n=Li(e,1);null!==n&&rd(n,e,1,-1)}function Fs(e){var n=Os();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_s,lastRenderedState:e},n.queue=e,e=e.dispatch=ta.bind(null,gs,e),[n.memoizedState,e]}function Ws(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=gs.updateQueue)?(n={lastEffect:null,stores:null},gs.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Ts(){return Ds().memoizedState}function Bs(e,n,t,r){var o=Os();gs.flags|=e,o.memoizedState=Ws(1|n,t,void 0,void 0===r?null:r)}function zs(e,n,t,r){var o=Ds();r=void 0===r?null:r;var i=void 0;if(null!==hs){var s=hs.memoizedState;if(i=s.destroy,null!==r&&xs(r,s.deps))return void(o.memoizedState=Ws(n,t,i,r))}gs.flags|=e,o.memoizedState=Ws(1|n,t,i,r)}function Vs(e,n){return Bs(8390656,8,e,n)}function Js(e,n){return zs(2048,8,e,n)}function Hs(e,n){return zs(4,2,e,n)}function Gs(e,n){return zs(4,4,e,n)}function $s(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Qs(e,n,t){return t=null!=t?t.concat([e]):null,zs(4,4,$s.bind(null,n,e),t)}function qs(){}function Xs(e,n){var t=Ds();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xs(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Zs(e,n){var t=Ds();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xs(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Ys(e,n,t){return 0==(21&fs)?(e.baseState&&(e.baseState=!1,ya=!0),e.memoizedState=t):(ar(t,n)||(t=hn(),gs.lanes|=t,Rl|=t,e.baseState=!0),n)}function Ks(e,n){var t=yn;yn=0!==t&&4>t?t:4,e(!0);var r=ps.transition;ps.transition={};try{e(!1),n()}finally{yn=t,ps.transition=r}}function ea(){return Ds().memoizedState}function na(e,n,t){var r=td(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},ra(e)?oa(n,t):null!==(t=wi(e,n,t,r))&&(rd(t,e,r,nd()),ia(t,n,r))}function ta(e,n,t){var r=td(e),o={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(ra(e))oa(n,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=n.lastRenderedReducer))try{var s=n.lastRenderedState,a=i(s,t);if(o.hasEagerState=!0,o.eagerState=a,ar(a,s)){var l=n.interleaved;return null===l?(o.next=o,_i(n)):(o.next=l.next,l.next=o),void(n.interleaved=o)}}catch(e){}null!==(t=wi(e,n,o,r))&&(rd(t,e,r,o=nd()),ia(t,n,r))}}function ra(e){var n=e.alternate;return e===gs||null!==n&&n===gs}function oa(e,n){bs=Cs=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function ia(e,n,t){if(0!=(4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}var sa={readContext:Oi,useCallback:Ps,useContext:Ps,useEffect:Ps,useImperativeHandle:Ps,useInsertionEffect:Ps,useLayoutEffect:Ps,useMemo:Ps,useReducer:Ps,useRef:Ps,useState:Ps,useDebugValue:Ps,useDeferredValue:Ps,useTransition:Ps,useMutableSource:Ps,useSyncExternalStore:Ps,useId:Ps,unstable_isNewReconciler:!1},aa={readContext:Oi,useCallback:function(e,n){return Os().memoizedState=[e,void 0===n?null:n],e},useContext:Oi,useEffect:Vs,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,Bs(4194308,4,$s.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Bs(4194308,4,e,n)},useInsertionEffect:function(e,n){return Bs(4,2,e,n)},useMemo:function(e,n){var t=Os();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=Os();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=na.bind(null,gs,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Os().memoizedState=e},useState:Fs,useDebugValue:qs,useDeferredValue:function(e){return Os().memoizedState=e},useTransition:function(){var e=Fs(!1),n=e[0];return e=Ks.bind(null,e[1]),Os().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=gs,o=Os();if(ii){if(void 0===t)throw Error(i(407));t=t()}else{if(t=n(),null===Ll)throw Error(i(349));0!=(30&fs)||Us(r,n,t)}o.memoizedState=t;var s={value:t,getSnapshot:n};return o.queue=s,Vs(js.bind(null,r,s,e),[e]),r.flags|=2048,Ws(9,Ms.bind(null,r,s,t,n),void 0,null),t},useId:function(){var e=Os(),n=Ll.identifierPrefix;if(ii){var t=Yo;n=":"+n+"R"+(t=(Zo&~(1<<32-an(Zo)-1)).toString(32)+t),0<(t=ys++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=Ss++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},la={readContext:Oi,useCallback:Xs,useContext:Oi,useEffect:Js,useImperativeHandle:Qs,useInsertionEffect:Hs,useLayoutEffect:Gs,useMemo:Zs,useReducer:ws,useRef:Ts,useState:function(){return ws(_s)},useDebugValue:qs,useDeferredValue:function(e){return Ys(Ds(),hs.memoizedState,e)},useTransition:function(){return[ws(_s)[0],Ds().memoizedState]},useMutableSource:Is,useSyncExternalStore:ks,useId:ea,unstable_isNewReconciler:!1},da={readContext:Oi,useCallback:Xs,useContext:Oi,useEffect:Js,useImperativeHandle:Qs,useInsertionEffect:Hs,useLayoutEffect:Gs,useMemo:Zs,useReducer:Ls,useRef:Ts,useState:function(){return Ls(_s)},useDebugValue:qs,useDeferredValue:function(e){var n=Ds();return null===hs?n.memoizedState=e:Ys(n,hs.memoizedState,e)},useTransition:function(){return[Ls(_s)[0],Ds().memoizedState]},useMutableSource:Is,useSyncExternalStore:ks,useId:ea,unstable_isNewReconciler:!1};function ca(e,n){try{var t="",r=n;do{t+=B(r),r=r.return}while(r);var o=t}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:o,digest:null}}function ua(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function ma(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var pa="function"==typeof WeakMap?WeakMap:Map;function fa(e,n,t){(t=Mi(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Hl||(Hl=!0,Gl=r),ma(0,n)},t}function ga(e,n,t){(t=Mi(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=n.value;t.payload=function(){return r(o)},t.callback=function(){ma(0,n)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(t.callback=function(){ma(0,n),"function"!=typeof r&&(null===$l?$l=new Set([this]):$l.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function ha(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new pa;var o=new Set;r.set(n,o)}else void 0===(o=r.get(n))&&(o=new Set,r.set(n,o));o.has(t)||(o.add(t),e=Od.bind(null,e,n,t),n.then(e,e))}function va(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function Ca(e,n,t,r,o){return 0==(1&e.mode)?(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Mi(-1,1)).tag=2,ji(t,n,1))),t.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var ba=y.ReactCurrentOwner,ya=!1;function Sa(e,n,t,r){n.child=null===e?Yi(n,null,t,r):Zi(n,e.child,t,r)}function Pa(e,n,t,r,o){t=t.render;var i=n.ref;return Ai(n,o),r=Es(e,n,t,r,i,o),t=As(),null===e||ya?(ii&&t&&ni(n),n.flags|=1,Sa(e,n,r,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,Ha(e,n,o))}function xa(e,n,t,r,o){if(null===e){var i=t.type;return"function"!=typeof i||Ud(i)||void 0!==i.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=jd(t.type,null,r,n,n.mode,o)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=i,Ea(e,n,i,r,o))}if(i=e.child,0==(e.lanes&o)){var s=i.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(s,r)&&e.ref===n.ref)return Ha(e,n,o)}return n.flags|=1,(e=Md(i,r)).ref=n.ref,e.return=n,n.child=e}function Ea(e,n,t,r,o){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===n.ref){if(ya=!1,n.pendingProps=r=i,0==(e.lanes&o))return n.lanes=e.lanes,Ha(e,n,o);0!=(131072&e.flags)&&(ya=!0)}}return Da(e,n,t,r,o)}function Aa(e,n,t){var r=n.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},Do(Ml,Ul),Ul|=t;else{if(0==(1073741824&t))return e=null!==i?i.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,Do(Ml,Ul),Ul|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:t,Do(Ml,Ul),Ul|=r}else null!==i?(r=i.baseLanes|t,n.memoizedState=null):r=t,Do(Ml,Ul),Ul|=r;return Sa(e,n,o,t),n.child}function Oa(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Da(e,n,t,r,o){var i=Uo(t)?Io:wo.current;return i=ko(n,i),Ai(n,o),t=Es(e,n,t,r,i,o),r=As(),null===e||ya?(ii&&r&&ni(n),n.flags|=1,Sa(e,n,t,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,Ha(e,n,o))}function _a(e,n,t,r,o){if(Uo(t)){var i=!0;Ro(n)}else i=!1;if(Ai(n,o),null===n.stateNode)Ja(e,n),Ji(n,t,r),Gi(n,t,r,o),r=!0;else if(null===e){var s=n.stateNode,a=n.memoizedProps;s.props=a;var l=s.context,d=t.contextType;d="object"==typeof d&&null!==d?Oi(d):ko(n,d=Uo(t)?Io:wo.current);var c=t.getDerivedStateFromProps,u="function"==typeof c||"function"==typeof s.getSnapshotBeforeUpdate;u||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==r||l!==d)&&Hi(n,s,r,d),Ii=!1;var m=n.memoizedState;s.state=m,Fi(n,r,s,o),l=n.memoizedState,a!==r||m!==l||Lo.current||Ii?("function"==typeof c&&(Bi(n,t,c,r),l=n.memoizedState),(a=Ii||Vi(n,t,a,r,m,l,d))?(u||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(n.flags|=4194308)):("function"==typeof s.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=l),s.props=r,s.state=l,s.context=d,r=a):("function"==typeof s.componentDidMount&&(n.flags|=4194308),r=!1)}else{s=n.stateNode,Ui(e,n),a=n.memoizedProps,d=n.type===n.elementType?a:vi(n.type,a),s.props=d,u=n.pendingProps,m=s.context,l="object"==typeof(l=t.contextType)&&null!==l?Oi(l):ko(n,l=Uo(t)?Io:wo.current);var p=t.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==u||m!==l)&&Hi(n,s,r,l),Ii=!1,m=n.memoizedState,s.state=m,Fi(n,r,s,o);var f=n.memoizedState;a!==u||m!==f||Lo.current||Ii?("function"==typeof p&&(Bi(n,t,p,r),f=n.memoizedState),(d=Ii||Vi(n,t,d,r,m,f,l)||!1)?(c||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(r,f,l),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof s.componentDidUpdate&&(n.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof s.componentDidUpdate||a===e.memoizedProps&&m===e.memoizedState||(n.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===e.memoizedProps&&m===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=f),s.props=r,s.state=f,s.context=l,r=d):("function"!=typeof s.componentDidUpdate||a===e.memoizedProps&&m===e.memoizedState||(n.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===e.memoizedProps&&m===e.memoizedState||(n.flags|=1024),r=!1)}return wa(e,n,t,r,i,o)}function wa(e,n,t,r,o,i){Oa(e,n);var s=0!=(128&n.flags);if(!r&&!s)return o&&Fo(n,t,!1),Ha(e,n,i);r=n.stateNode,ba.current=n;var a=s&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&s?(n.child=Zi(n,e.child,null,i),n.child=Zi(n,null,a,i)):Sa(e,n,a,i),n.memoizedState=r.state,o&&Fo(n,t,!0),n.child}function La(e){var n=e.stateNode;n.pendingContext?jo(0,n.pendingContext,n.pendingContext!==n.context):n.context&&jo(0,n.context,!1),os(e,n.containerInfo)}function Ia(e,n,t,r,o){return fi(),gi(o),n.flags|=256,Sa(e,n,t,r),n.child}var ka,Ua,Ma,ja,Na={dehydrated:null,treeContext:null,retryLane:0};function Ra(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fa(e,n,t){var r,o=n.pendingProps,s=ls.current,a=!1,l=0!=(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&s)),r?(a=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(s|=1),Do(ls,1&s),null===e)return ci(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&n.mode)?n.lanes=1:"$!"===e.data?n.lanes=8:n.lanes=1073741824,null):(l=o.children,e=o.fallback,a?(o=n.mode,a=n.child,l={mode:"hidden",children:l},0==(1&o)&&null!==a?(a.childLanes=0,a.pendingProps=l):a=Rd(l,o,0,null),e=Nd(e,o,t,null),a.return=n,e.return=n,a.sibling=e,n.child=a,n.child.memoizedState=Ra(t),n.memoizedState=Na,e):Wa(n,l));if(null!==(s=e.memoizedState)&&null!==(r=s.dehydrated))return function(e,n,t,r,o,s,a){if(t)return 256&n.flags?(n.flags&=-257,Ta(e,n,a,r=ua(Error(i(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(s=r.fallback,o=n.mode,r=Rd({mode:"visible",children:r.children},o,0,null),(s=Nd(s,o,a,null)).flags|=2,r.return=n,s.return=n,r.sibling=s,n.child=r,0!=(1&n.mode)&&Zi(n,e.child,null,a),n.child.memoizedState=Ra(a),n.memoizedState=Na,s);if(0==(1&n.mode))return Ta(e,n,a,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Ta(e,n,a,r=ua(s=Error(i(419)),r,void 0))}if(l=0!=(a&e.childLanes),ya||l){if(null!==(r=Ll)){switch(a&-a){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|a))?0:o)&&o!==s.retryLane&&(s.retryLane=o,Li(e,o),rd(r,e,o,-1))}return hd(),Ta(e,n,a,r=ua(Error(i(421))))}return"$?"===o.data?(n.flags|=128,n.child=e.child,n=_d.bind(null,e),o._reactRetry=n,null):(e=s.treeContext,oi=co(o.nextSibling),ri=n,ii=!0,si=null,null!==e&&(Qo[qo++]=Zo,Qo[qo++]=Yo,Qo[qo++]=Xo,Zo=e.id,Yo=e.overflow,Xo=n),(n=Wa(n,r.children)).flags|=4096,n)}(e,n,l,o,r,s,t);if(a){a=o.fallback,l=n.mode,r=(s=e.child).sibling;var d={mode:"hidden",children:o.children};return 0==(1&l)&&n.child!==s?((o=n.child).childLanes=0,o.pendingProps=d,n.deletions=null):(o=Md(s,d)).subtreeFlags=14680064&s.subtreeFlags,null!==r?a=Md(r,a):(a=Nd(a,l,t,null)).flags|=2,a.return=n,o.return=n,o.sibling=a,n.child=o,o=a,a=n.child,l=null===(l=e.child.memoizedState)?Ra(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},a.memoizedState=l,a.childLanes=e.childLanes&~t,n.memoizedState=Na,o}return e=(a=e.child).sibling,o=Md(a,{mode:"visible",children:o.children}),0==(1&n.mode)&&(o.lanes=t),o.return=n,o.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=o,n.memoizedState=null,o}function Wa(e,n){return(n=Rd({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Ta(e,n,t,r){return null!==r&&gi(r),Zi(n,e.child,null,t),(e=Wa(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Ba(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Ei(e.return,n,t)}function za(e,n,t,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(i.isBackwards=n,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=t,i.tailMode=o)}function Va(e,n,t){var r=n.pendingProps,o=r.revealOrder,i=r.tail;if(Sa(e,n,r.children,t),0!=(2&(r=ls.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ba(e,t,n);else if(19===e.tag)Ba(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Do(ls,r),0==(1&n.mode))n.memoizedState=null;else switch(o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===ds(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),za(n,!1,o,t,i);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ds(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}za(n,!0,t,null,i);break;case"together":za(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Ja(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Ha(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Rl|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(i(153));if(null!==n.child){for(t=Md(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Md(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Ga(e,n){if(!ii)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function $a(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Qa(e,n,t){var r=n.pendingProps;switch(ti(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return $a(n),null;case 1:case 17:return Uo(n.type)&&Mo(),$a(n),null;case 3:return r=n.stateNode,is(),Oo(Lo),Oo(wo),us(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(mi(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==si&&(ad(si),si=null))),Ua(e,n),$a(n),null;case 5:as(n);var o=rs(ts.current);if(t=n.type,null!==e&&null!=n.stateNode)Ma(e,n,t,r,o),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(i(166));return $a(n),null}if(e=rs(es.current),mi(n)){r=n.stateNode,t=n.type;var s=n.memoizedProps;switch(r[po]=n,r[fo]=s,e=0!=(1&n.mode),t){case"dialog":Wr("cancel",r),Wr("close",r);break;case"iframe":case"object":case"embed":Wr("load",r);break;case"video":case"audio":for(o=0;o<jr.length;o++)Wr(jr[o],r);break;case"source":Wr("error",r);break;case"img":case"image":case"link":Wr("error",r),Wr("load",r);break;case"details":Wr("toggle",r);break;case"input":X(r,s),Wr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Wr("invalid",r);break;case"textarea":oe(r,s),Wr("invalid",r)}for(var l in Ce(t,s),o=null,s)if(s.hasOwnProperty(l)){var d=s[l];"children"===l?"string"==typeof d?r.textContent!==d&&(!0!==s.suppressHydrationWarning&&Yr(r.textContent,d,e),o=["children",d]):"number"==typeof d&&r.textContent!==""+d&&(!0!==s.suppressHydrationWarning&&Yr(r.textContent,d,e),o=["children",""+d]):a.hasOwnProperty(l)&&null!=d&&"onScroll"===l&&Wr("scroll",r)}switch(t){case"input":G(r),K(r,s,!0);break;case"textarea":G(r),se(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Kr)}r=o,n.updateQueue=r,null!==r&&(n.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ae(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(t,{is:r.is}):(e=l.createElement(t),"select"===t&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,t),e[po]=n,e[fo]=r,ka(e,n,!1,!1),n.stateNode=e;e:{switch(l=be(t,r),t){case"dialog":Wr("cancel",e),Wr("close",e),o=r;break;case"iframe":case"object":case"embed":Wr("load",e),o=r;break;case"video":case"audio":for(o=0;o<jr.length;o++)Wr(jr[o],e);o=r;break;case"source":Wr("error",e),o=r;break;case"img":case"image":case"link":Wr("error",e),Wr("load",e),o=r;break;case"details":Wr("toggle",e),o=r;break;case"input":X(e,r),o=q(e,r),Wr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=R({},r,{value:void 0}),Wr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Wr("invalid",e)}for(s in Ce(t,o),d=o)if(d.hasOwnProperty(s)){var c=d[s];"style"===s?he(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&ue(e,c):"children"===s?"string"==typeof c?("textarea"!==t||""!==c)&&me(e,c):"number"==typeof c&&me(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(a.hasOwnProperty(s)?null!=c&&"onScroll"===s&&Wr("scroll",e):null!=c&&b(e,s,c,l))}switch(t){case"input":G(e),K(e,r,!1);break;case"textarea":G(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+J(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?te(e,!!r.multiple,s,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Kr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return $a(n),null;case 6:if(e&&null!=n.stateNode)ja(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(i(166));if(t=rs(ts.current),rs(es.current),mi(n)){if(r=n.stateNode,t=n.memoizedProps,r[po]=n,(s=r.nodeValue!==t)&&null!==(e=ri))switch(e.tag){case 3:Yr(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Yr(r.nodeValue,t,0!=(1&e.mode))}s&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[po]=n,n.stateNode=r}return $a(n),null;case 13:if(Oo(ls),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&n.mode)&&0==(128&n.flags))pi(),fi(),n.flags|=98560,s=!1;else if(s=mi(n),null!==r&&null!==r.dehydrated){if(null===e){if(!s)throw Error(i(318));if(!(s=null!==(s=n.memoizedState)?s.dehydrated:null))throw Error(i(317));s[po]=n}else fi(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;$a(n),s=!1}else null!==si&&(ad(si),si=null),s=!0;if(!s)return 65536&n.flags?n:null}return 0!=(128&n.flags)?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&ls.current)?0===jl&&(jl=3):hd())),null!==n.updateQueue&&(n.flags|=4),$a(n),null);case 4:return is(),Ua(e,n),null===e&&zr(n.stateNode.containerInfo),$a(n),null;case 10:return xi(n.type._context),$a(n),null;case 19:if(Oo(ls),null===(s=n.memoizedState))return $a(n),null;if(r=0!=(128&n.flags),null===(l=s.rendering))if(r)Ga(s,!1);else{if(0!==jl||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(l=ds(e))){for(n.flags|=128,Ga(s,!1),null!==(r=l.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(s=t).flags&=14680066,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return Do(ls,1&ls.current|2),n.child}e=e.sibling}null!==s.tail&&Ze()>Vl&&(n.flags|=128,r=!0,Ga(s,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=ds(l))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Ga(s,!0),null===s.tail&&"hidden"===s.tailMode&&!l.alternate&&!ii)return $a(n),null}else 2*Ze()-s.renderingStartTime>Vl&&1073741824!==t&&(n.flags|=128,r=!0,Ga(s,!1),n.lanes=4194304);s.isBackwards?(l.sibling=n.child,n.child=l):(null!==(t=s.last)?t.sibling=l:n.child=l,s.last=l)}return null!==s.tail?(n=s.tail,s.rendering=n,s.tail=n.sibling,s.renderingStartTime=Ze(),n.sibling=null,t=ls.current,Do(ls,r?1&t|2:1&t),n):($a(n),null);case 22:case 23:return md(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(1073741824&Ul)&&($a(n),6&n.subtreeFlags&&(n.flags|=8192)):$a(n),null;case 24:case 25:return null}throw Error(i(156,n.tag))}function qa(e,n){switch(ti(n),n.tag){case 1:return Uo(n.type)&&Mo(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return is(),Oo(Lo),Oo(wo),us(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return as(n),null;case 13:if(Oo(ls),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(i(340));fi()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Oo(ls),null;case 4:return is(),null;case 10:return xi(n.type._context),null;case 22:case 23:return md(),null;default:return null}}ka=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Ua=function(){},Ma=function(e,n,t,r){var o=e.memoizedProps;if(o!==r){e=n.stateNode,rs(es.current);var i,s=null;switch(t){case"input":o=q(e,o),r=q(e,r),s=[];break;case"select":o=R({},o,{value:void 0}),r=R({},r,{value:void 0}),s=[];break;case"textarea":o=re(e,o),r=re(e,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Kr)}for(c in Ce(t,r),t=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(i in l)l.hasOwnProperty(i)&&(t||(t={}),t[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(a.hasOwnProperty(c)?s||(s=[]):(s=s||[]).push(c,null));for(c in r){var d=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&d!==l&&(null!=d||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||d&&d.hasOwnProperty(i)||(t||(t={}),t[i]="");for(i in d)d.hasOwnProperty(i)&&l[i]!==d[i]&&(t||(t={}),t[i]=d[i])}else t||(s||(s=[]),s.push(c,t)),t=d;else"dangerouslySetInnerHTML"===c?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(s=s||[]).push(c,d)):"children"===c?"string"!=typeof d&&"number"!=typeof d||(s=s||[]).push(c,""+d):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(a.hasOwnProperty(c)?(null!=d&&"onScroll"===c&&Wr("scroll",e),s||l===d||(s=[])):(s=s||[]).push(c,d))}t&&(s=s||[]).push("style",t);var c=s;(n.updateQueue=c)&&(n.flags|=4)}},ja=function(e,n,t,r){t!==r&&(n.flags|=4)};var Xa=!1,Za=!1,Ya="function"==typeof WeakSet?WeakSet:Set,Ka=null;function el(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ad(e,n,t)}else t.current=null}function nl(e,n,t){try{t()}catch(t){Ad(e,n,t)}}var tl=!1;function rl(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&nl(n,t,i)}o=o.next}while(o!==r)}}function ol(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function il(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function sl(e){var n=e.alternate;null!==n&&(e.alternate=null,sl(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[po],delete n[fo],delete n[ho],delete n[vo],delete n[Co]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function dl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Kr));else if(4!==r&&null!==(e=e.child))for(dl(e,n,t),e=e.sibling;null!==e;)dl(e,n,t),e=e.sibling}function cl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,n,t),e=e.sibling;null!==e;)cl(e,n,t),e=e.sibling}var ul=null,ml=!1;function pl(e,n,t){for(t=t.child;null!==t;)fl(e,n,t),t=t.sibling}function fl(e,n,t){if(sn&&"function"==typeof sn.onCommitFiberUnmount)try{sn.onCommitFiberUnmount(on,t)}catch(e){}switch(t.tag){case 5:Za||el(t,n);case 6:var r=ul,o=ml;ul=null,pl(e,n,t),ml=o,null!==(ul=r)&&(ml?(e=ul,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(ml?(e=ul,t=t.stateNode,8===e.nodeType?lo(e.parentNode,t):1===e.nodeType&&lo(e,t),Vn(e)):lo(ul,t.stateNode));break;case 4:r=ul,o=ml,ul=t.stateNode.containerInfo,ml=!0,pl(e,n,t),ul=r,ml=o;break;case 0:case 11:case 14:case 15:if(!Za&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,s=i.destroy;i=i.tag,void 0!==s&&(0!=(2&i)||0!=(4&i))&&nl(t,n,s),o=o.next}while(o!==r)}pl(e,n,t);break;case 1:if(!Za&&(el(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Ad(t,n,e)}pl(e,n,t);break;case 21:pl(e,n,t);break;case 22:1&t.mode?(Za=(r=Za)||null!==t.memoizedState,pl(e,n,t),Za=r):pl(e,n,t);break;default:pl(e,n,t)}}function gl(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Ya),n.forEach((function(n){var r=wd.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function hl(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r];try{var s=e,a=n,l=a;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,ml=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,ml=!0;break e}l=l.return}if(null===ul)throw Error(i(160));fl(s,a,o),ul=null,ml=!1;var d=o.alternate;null!==d&&(d.return=null),o.return=null}catch(e){Ad(o,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)vl(n,e),n=n.sibling}function vl(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hl(n,e),Cl(e),4&r){try{rl(3,e,e.return),ol(3,e)}catch(n){Ad(e,e.return,n)}try{rl(5,e,e.return)}catch(n){Ad(e,e.return,n)}}break;case 1:hl(n,e),Cl(e),512&r&&null!==t&&el(t,t.return);break;case 5:if(hl(n,e),Cl(e),512&r&&null!==t&&el(t,t.return),32&e.flags){var o=e.stateNode;try{me(o,"")}catch(n){Ad(e,e.return,n)}}if(4&r&&null!=(o=e.stateNode)){var s=e.memoizedProps,a=null!==t?t.memoizedProps:s,l=e.type,d=e.updateQueue;if(e.updateQueue=null,null!==d)try{"input"===l&&"radio"===s.type&&null!=s.name&&Z(o,s),be(l,a);var c=be(l,s);for(a=0;a<d.length;a+=2){var u=d[a],m=d[a+1];"style"===u?he(o,m):"dangerouslySetInnerHTML"===u?ue(o,m):"children"===u?me(o,m):b(o,u,m,c)}switch(l){case"input":Y(o,s);break;case"textarea":ie(o,s);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!s.multiple;var f=s.value;null!=f?te(o,!!s.multiple,f,!1):p!==!!s.multiple&&(null!=s.defaultValue?te(o,!!s.multiple,s.defaultValue,!0):te(o,!!s.multiple,s.multiple?[]:"",!1))}o[fo]=s}catch(n){Ad(e,e.return,n)}}break;case 6:if(hl(n,e),Cl(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,s=e.memoizedProps;try{o.nodeValue=s}catch(n){Ad(e,e.return,n)}}break;case 3:if(hl(n,e),Cl(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Vn(n.containerInfo)}catch(n){Ad(e,e.return,n)}break;case 4:default:hl(n,e),Cl(e);break;case 13:hl(n,e),Cl(e),8192&(o=e.child).flags&&(s=null!==o.memoizedState,o.stateNode.isHidden=s,!s||null!==o.alternate&&null!==o.alternate.memoizedState||(zl=Ze())),4&r&&gl(e);break;case 22:if(u=null!==t&&null!==t.memoizedState,1&e.mode?(Za=(c=Za)||u,hl(n,e),Za=c):hl(n,e),Cl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!u&&0!=(1&e.mode))for(Ka=e,u=e.child;null!==u;){for(m=Ka=u;null!==Ka;){switch(f=(p=Ka).child,p.tag){case 0:case 11:case 14:case 15:rl(4,p,p.return);break;case 1:el(p,p.return);var g=p.stateNode;if("function"==typeof g.componentWillUnmount){r=p,t=p.return;try{n=r,g.props=n.memoizedProps,g.state=n.memoizedState,g.componentWillUnmount()}catch(e){Ad(r,t,e)}}break;case 5:el(p,p.return);break;case 22:if(null!==p.memoizedState){Pl(m);continue}}null!==f?(f.return=p,Ka=f):Pl(m)}u=u.sibling}e:for(u=null,m=e;;){if(5===m.tag){if(null===u){u=m;try{o=m.stateNode,c?"function"==typeof(s=o.style).setProperty?s.setProperty("display","none","important"):s.display="none":(l=m.stateNode,a=null!=(d=m.memoizedProps.style)&&d.hasOwnProperty("display")?d.display:null,l.style.display=ge("display",a))}catch(n){Ad(e,e.return,n)}}}else if(6===m.tag){if(null===u)try{m.stateNode.nodeValue=c?"":m.memoizedProps}catch(n){Ad(e,e.return,n)}}else if((22!==m.tag&&23!==m.tag||null===m.memoizedState||m===e)&&null!==m.child){m.child.return=m,m=m.child;continue}if(m===e)break e;for(;null===m.sibling;){if(null===m.return||m.return===e)break e;u===m&&(u=null),m=m.return}u===m&&(u=null),m.sibling.return=m.return,m=m.sibling}}break;case 19:hl(n,e),Cl(e),4&r&&gl(e);case 21:}}function Cl(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(al(t)){var r=t;break e}t=t.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(me(o,""),r.flags&=-33),cl(e,ll(e),o);break;case 3:case 4:var s=r.stateNode.containerInfo;dl(e,ll(e),s);break;default:throw Error(i(161))}}catch(n){Ad(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function bl(e,n,t){Ka=e,yl(e,n,t)}function yl(e,n,t){for(var r=0!=(1&e.mode);null!==Ka;){var o=Ka,i=o.child;if(22===o.tag&&r){var s=null!==o.memoizedState||Xa;if(!s){var a=o.alternate,l=null!==a&&null!==a.memoizedState||Za;a=Xa;var d=Za;if(Xa=s,(Za=l)&&!d)for(Ka=o;null!==Ka;)l=(s=Ka).child,22===s.tag&&null!==s.memoizedState?xl(o):null!==l?(l.return=s,Ka=l):xl(o);for(;null!==i;)Ka=i,yl(i,n,t),i=i.sibling;Ka=o,Xa=a,Za=d}Sl(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Ka=i):Sl(e)}}function Sl(e){for(;null!==Ka;){var n=Ka;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:Za||ol(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Za)if(null===t)r.componentDidMount();else{var o=n.elementType===n.type?t.memoizedProps:vi(n.type,t.memoizedProps);r.componentDidUpdate(o,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var s=n.updateQueue;null!==s&&Wi(n,s,r);break;case 3:var a=n.updateQueue;if(null!==a){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Wi(n,a,t)}break;case 5:var l=n.stateNode;if(null===t&&4&n.flags){t=l;var d=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":d.autoFocus&&t.focus();break;case"img":d.src&&(t.src=d.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var c=n.alternate;if(null!==c){var u=c.memoizedState;if(null!==u){var m=u.dehydrated;null!==m&&Vn(m)}}}break;default:throw Error(i(163))}Za||512&n.flags&&il(n)}catch(e){Ad(n,n.return,e)}}if(n===e){Ka=null;break}if(null!==(t=n.sibling)){t.return=n.return,Ka=t;break}Ka=n.return}}function Pl(e){for(;null!==Ka;){var n=Ka;if(n===e){Ka=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Ka=t;break}Ka=n.return}}function xl(e){for(;null!==Ka;){var n=Ka;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{ol(4,n)}catch(e){Ad(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var o=n.return;try{r.componentDidMount()}catch(e){Ad(n,o,e)}}var i=n.return;try{il(n)}catch(e){Ad(n,i,e)}break;case 5:var s=n.return;try{il(n)}catch(e){Ad(n,s,e)}}}catch(e){Ad(n,n.return,e)}if(n===e){Ka=null;break}var a=n.sibling;if(null!==a){a.return=n.return,Ka=a;break}Ka=n.return}}var El,Al=Math.ceil,Ol=y.ReactCurrentDispatcher,Dl=y.ReactCurrentOwner,_l=y.ReactCurrentBatchConfig,wl=0,Ll=null,Il=null,kl=0,Ul=0,Ml=Ao(0),jl=0,Nl=null,Rl=0,Fl=0,Wl=0,Tl=null,Bl=null,zl=0,Vl=1/0,Jl=null,Hl=!1,Gl=null,$l=null,Ql=!1,ql=null,Xl=0,Zl=0,Yl=null,Kl=-1,ed=0;function nd(){return 0!=(6&wl)?Ze():-1!==Kl?Kl:Kl=Ze()}function td(e){return 0==(1&e.mode)?1:0!=(2&wl)&&0!==kl?kl&-kl:null!==hi.transition?(0===ed&&(ed=hn()),ed):0!==(e=yn)?e:e=void 0===(e=window.event)?16:Zn(e.type)}function rd(e,n,t,r){if(50<Zl)throw Zl=0,Yl=null,Error(i(185));Cn(e,t,r),0!=(2&wl)&&e===Ll||(e===Ll&&(0==(2&wl)&&(Fl|=t),4===jl&&ld(e,kl)),od(e,r),1===t&&0===wl&&0==(1&n.mode)&&(Vl=Ze()+500,To&&Vo()))}function od(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var s=31-an(i),a=1<<s,l=o[s];-1===l?0!=(a&t)&&0==(a&r)||(o[s]=fn(a,n)):l<=n&&(e.expiredLanes|=a),i&=~a}}(e,n);var r=pn(e,e===Ll?kl:0);if(0===r)null!==t&&Qe(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Qe(t),1===n)0===e.tag?function(e){To=!0,zo(e)}(dd.bind(null,e)):zo(dd.bind(null,e)),so((function(){0==(6&wl)&&Vo()})),t=null;else{switch(Sn(r)){case 1:t=Ke;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Ld(t,id.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function id(e,n){if(Kl=-1,ed=0,0!=(6&wl))throw Error(i(327));var t=e.callbackNode;if(xd()&&e.callbackNode!==t)return null;var r=pn(e,e===Ll?kl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=vd(e,r);else{n=r;var o=wl;wl|=2;var s=gd();for(Ll===e&&kl===n||(Jl=null,Vl=Ze()+500,pd(e,n));;)try{bd();break}catch(n){fd(e,n)}Pi(),Ol.current=s,wl=o,null!==Il?n=0:(Ll=null,kl=0,n=jl)}if(0!==n){if(2===n&&0!==(o=gn(e))&&(r=o,n=sd(e,o)),1===n)throw t=Nl,pd(e,0),ld(e,r),od(e,Ze()),t;if(6===n)ld(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],i=o.getSnapshot;o=o.value;try{if(!ar(i(),o))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(o)&&(2===(n=vd(e,r))&&0!==(s=gn(e))&&(r=s,n=sd(e,s)),1===n))throw t=Nl,pd(e,0),ld(e,r),od(e,Ze()),t;switch(e.finishedWork=o,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:case 5:Pd(e,Bl,Jl);break;case 3:if(ld(e,r),(130023424&r)===r&&10<(n=zl+500-Ze())){if(0!==pn(e,0))break;if(((o=e.suspendedLanes)&r)!==r){nd(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Pd.bind(null,e,Bl,Jl),n);break}Pd(e,Bl,Jl);break;case 4:if(ld(e,r),(4194240&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var a=31-an(r);s=1<<a,(a=n[a])>o&&(o=a),r&=~s}if(r=o,10<(r=(120>(r=Ze()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Al(r/1960))-r)){e.timeoutHandle=ro(Pd.bind(null,e,Bl,Jl),r);break}Pd(e,Bl,Jl);break;default:throw Error(i(329))}}}return od(e,Ze()),e.callbackNode===t?id.bind(null,e):null}function sd(e,n){var t=Tl;return e.current.memoizedState.isDehydrated&&(pd(e,n).flags|=256),2!==(e=vd(e,n))&&(n=Bl,Bl=t,null!==n&&ad(n)),e}function ad(e){null===Bl?Bl=e:Bl.push.apply(Bl,e)}function ld(e,n){for(n&=~Wl,n&=~Fl,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-an(n),r=1<<t;e[t]=-1,n&=~r}}function dd(e){if(0!=(6&wl))throw Error(i(327));xd();var n=pn(e,0);if(0==(1&n))return od(e,Ze()),null;var t=vd(e,n);if(0!==e.tag&&2===t){var r=gn(e);0!==r&&(n=r,t=sd(e,r))}if(1===t)throw t=Nl,pd(e,0),ld(e,n),od(e,Ze()),t;if(6===t)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,Pd(e,Bl,Jl),od(e,Ze()),null}function cd(e,n){var t=wl;wl|=1;try{return e(n)}finally{0===(wl=t)&&(Vl=Ze()+500,To&&Vo())}}function ud(e){null!==ql&&0===ql.tag&&0==(6&wl)&&xd();var n=wl;wl|=1;var t=_l.transition,r=yn;try{if(_l.transition=null,yn=1,e)return e()}finally{yn=r,_l.transition=t,0==(6&(wl=n))&&Vo()}}function md(){Ul=Ml.current,Oo(Ml)}function pd(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,oo(t)),null!==Il)for(t=Il.return;null!==t;){var r=t;switch(ti(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Mo();break;case 3:is(),Oo(Lo),Oo(wo),us();break;case 5:as(r);break;case 4:is();break;case 13:case 19:Oo(ls);break;case 10:xi(r.type._context);break;case 22:case 23:md()}t=t.return}if(Ll=e,Il=e=Md(e.current,null),kl=Ul=n,jl=0,Nl=null,Wl=Fl=Rl=0,Bl=Tl=null,null!==Di){for(n=0;n<Di.length;n++)if(null!==(r=(t=Di[n]).interleaved)){t.interleaved=null;var o=r.next,i=t.pending;if(null!==i){var s=i.next;i.next=o,r.next=s}t.pending=r}Di=null}return e}function fd(e,n){for(;;){var t=Il;try{if(Pi(),ms.current=sa,Cs){for(var r=gs.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Cs=!1}if(fs=0,vs=hs=gs=null,bs=!1,ys=0,Dl.current=null,null===t||null===t.return){jl=1,Nl=n,Il=null;break}e:{var s=e,a=t.return,l=t,d=n;if(n=kl,l.flags|=32768,null!==d&&"object"==typeof d&&"function"==typeof d.then){var c=d,u=l,m=u.tag;if(0==(1&u.mode)&&(0===m||11===m||15===m)){var p=u.alternate;p?(u.updateQueue=p.updateQueue,u.memoizedState=p.memoizedState,u.lanes=p.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=va(a);if(null!==f){f.flags&=-257,Ca(f,a,l,0,n),1&f.mode&&ha(s,c,n),d=c;var g=(n=f).updateQueue;if(null===g){var h=new Set;h.add(d),n.updateQueue=h}else g.add(d);break e}if(0==(1&n)){ha(s,c,n),hd();break e}d=Error(i(426))}else if(ii&&1&l.mode){var v=va(a);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),Ca(v,a,l,0,n),gi(ca(d,l));break e}}s=d=ca(d,l),4!==jl&&(jl=2),null===Tl?Tl=[s]:Tl.push(s),s=a;do{switch(s.tag){case 3:s.flags|=65536,n&=-n,s.lanes|=n,Ri(s,fa(0,d,n));break e;case 1:l=d;var C=s.type,b=s.stateNode;if(0==(128&s.flags)&&("function"==typeof C.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===$l||!$l.has(b)))){s.flags|=65536,n&=-n,s.lanes|=n,Ri(s,ga(s,l,n));break e}}s=s.return}while(null!==s)}Sd(t)}catch(e){n=e,Il===t&&null!==t&&(Il=t=t.return);continue}break}}function gd(){var e=Ol.current;return Ol.current=sa,null===e?sa:e}function hd(){0!==jl&&3!==jl&&2!==jl||(jl=4),null===Ll||0==(268435455&Rl)&&0==(268435455&Fl)||ld(Ll,kl)}function vd(e,n){var t=wl;wl|=2;var r=gd();for(Ll===e&&kl===n||(Jl=null,pd(e,n));;)try{Cd();break}catch(n){fd(e,n)}if(Pi(),wl=t,Ol.current=r,null!==Il)throw Error(i(261));return Ll=null,kl=0,jl}function Cd(){for(;null!==Il;)yd(Il)}function bd(){for(;null!==Il&&!qe();)yd(Il)}function yd(e){var n=El(e.alternate,e,Ul);e.memoizedProps=e.pendingProps,null===n?Sd(e):Il=n,Dl.current=null}function Sd(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=Qa(t,n,Ul)))return void(Il=t)}else{if(null!==(t=qa(t,n)))return t.flags&=32767,void(Il=t);if(null===e)return jl=6,void(Il=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(n=n.sibling))return void(Il=n);Il=n=e}while(null!==n);0===jl&&(jl=5)}function Pd(e,n,t){var r=yn,o=_l.transition;try{_l.transition=null,yn=1,function(e,n,t,r){do{xd()}while(null!==ql);if(0!=(6&wl))throw Error(i(327));t=e.finishedWork;var o=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var s=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var o=31-an(t),i=1<<o;n[o]=0,r[o]=-1,e[o]=-1,t&=~i}}(e,s),e===Ll&&(Il=Ll=null,kl=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||Ql||(Ql=!0,Ld(nn,(function(){return xd(),null}))),s=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||s){s=_l.transition,_l.transition=null;var a=yn;yn=1;var l=wl;wl|=4,Dl.current=null,function(e,n){if(eo=Hn,pr(e=mr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,s=r.focusNode;r=r.focusOffset;try{t.nodeType,s.nodeType}catch(e){t=null;break e}var a=0,l=-1,d=-1,c=0,u=0,m=e,p=null;n:for(;;){for(var f;m!==t||0!==o&&3!==m.nodeType||(l=a+o),m!==s||0!==r&&3!==m.nodeType||(d=a+r),3===m.nodeType&&(a+=m.nodeValue.length),null!==(f=m.firstChild);)p=m,m=f;for(;;){if(m===e)break n;if(p===t&&++c===o&&(l=a),p===s&&++u===r&&(d=a),null!==(f=m.nextSibling))break;p=(m=p).parentNode}m=f}t=-1===l||-1===d?null:{start:l,end:d}}else t=null}t=t||{start:0,end:0}}else t=null;for(no={focusedElem:e,selectionRange:t},Hn=!1,Ka=n;null!==Ka;)if(e=(n=Ka).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,Ka=e;else for(;null!==Ka;){n=Ka;try{var g=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var h=g.memoizedProps,v=g.memoizedState,C=n.stateNode,b=C.getSnapshotBeforeUpdate(n.elementType===n.type?h:vi(n.type,h),v);C.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var y=n.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(i(163))}}catch(e){Ad(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Ka=e;break}Ka=n.return}g=tl,tl=!1}(e,t),vl(t,e),fr(no),Hn=!!eo,no=eo=null,e.current=t,bl(t,e,o),Xe(),wl=l,yn=a,_l.transition=s}else e.current=t;if(Ql&&(Ql=!1,ql=e,Xl=o),0===(s=e.pendingLanes)&&($l=null),function(e){if(sn&&"function"==typeof sn.onCommitFiberRoot)try{sn.onCommitFiberRoot(on,e,void 0,128==(128&e.current.flags))}catch(e){}}(t.stateNode),od(e,Ze()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((o=n[t]).value,{componentStack:o.stack,digest:o.digest});if(Hl)throw Hl=!1,e=Gl,Gl=null,e;0!=(1&Xl)&&0!==e.tag&&xd(),0!=(1&(s=e.pendingLanes))?e===Yl?Zl++:(Zl=0,Yl=e):Zl=0,Vo()}(e,n,t,r)}finally{_l.transition=o,yn=r}return null}function xd(){if(null!==ql){var e=Sn(Xl),n=_l.transition,t=yn;try{if(_l.transition=null,yn=16>e?16:e,null===ql)var r=!1;else{if(e=ql,ql=null,Xl=0,0!=(6&wl))throw Error(i(331));var o=wl;for(wl|=4,Ka=e.current;null!==Ka;){var s=Ka,a=s.child;if(0!=(16&Ka.flags)){var l=s.deletions;if(null!==l){for(var d=0;d<l.length;d++){var c=l[d];for(Ka=c;null!==Ka;){var u=Ka;switch(u.tag){case 0:case 11:case 15:rl(8,u,s)}var m=u.child;if(null!==m)m.return=u,Ka=m;else for(;null!==Ka;){var p=(u=Ka).sibling,f=u.return;if(sl(u),u===c){Ka=null;break}if(null!==p){p.return=f,Ka=p;break}Ka=f}}}var g=s.alternate;if(null!==g){var h=g.child;if(null!==h){g.child=null;do{var v=h.sibling;h.sibling=null,h=v}while(null!==h)}}Ka=s}}if(0!=(2064&s.subtreeFlags)&&null!==a)a.return=s,Ka=a;else e:for(;null!==Ka;){if(0!=(2048&(s=Ka).flags))switch(s.tag){case 0:case 11:case 15:rl(9,s,s.return)}var C=s.sibling;if(null!==C){C.return=s.return,Ka=C;break e}Ka=s.return}}var b=e.current;for(Ka=b;null!==Ka;){var y=(a=Ka).child;if(0!=(2064&a.subtreeFlags)&&null!==y)y.return=a,Ka=y;else e:for(a=b;null!==Ka;){if(0!=(2048&(l=Ka).flags))try{switch(l.tag){case 0:case 11:case 15:ol(9,l)}}catch(e){Ad(l,l.return,e)}if(l===a){Ka=null;break e}var S=l.sibling;if(null!==S){S.return=l.return,Ka=S;break e}Ka=l.return}}if(wl=o,Vo(),sn&&"function"==typeof sn.onPostCommitFiberRoot)try{sn.onPostCommitFiberRoot(on,e)}catch(e){}r=!0}return r}finally{yn=t,_l.transition=n}}return!1}function Ed(e,n,t){e=ji(e,n=fa(0,n=ca(t,n),1),1),n=nd(),null!==e&&(Cn(e,1,n),od(e,n))}function Ad(e,n,t){if(3===e.tag)Ed(e,e,t);else for(;null!==n;){if(3===n.tag){Ed(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$l||!$l.has(r))){n=ji(n,e=ga(n,e=ca(t,e),1),1),e=nd(),null!==n&&(Cn(n,1,e),od(n,e));break}}n=n.return}}function Od(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=nd(),e.pingedLanes|=e.suspendedLanes&t,Ll===e&&(kl&t)===t&&(4===jl||3===jl&&(130023424&kl)===kl&&500>Ze()-zl?pd(e,0):Wl|=t),od(e,n)}function Dd(e,n){0===n&&(0==(1&e.mode)?n=1:(n=un,0==(130023424&(un<<=1))&&(un=4194304)));var t=nd();null!==(e=Li(e,n))&&(Cn(e,n,t),od(e,t))}function _d(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Dd(e,t)}function wd(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(n),Dd(e,t)}function Ld(e,n){return $e(e,n)}function Id(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function kd(e,n,t,r){return new Id(e,n,t,r)}function Ud(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Md(e,n){var t=e.alternate;return null===t?((t=kd(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function jd(e,n,t,r,o,s){var a=2;if(r=e,"function"==typeof e)Ud(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case x:return Nd(t.children,o,s,n);case E:a=8,o|=8;break;case A:return(e=kd(12,t,n,2|o)).elementType=A,e.lanes=s,e;case w:return(e=kd(13,t,n,o)).elementType=w,e.lanes=s,e;case L:return(e=kd(19,t,n,o)).elementType=L,e.lanes=s,e;case U:return Rd(t,o,s,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:a=10;break e;case D:a=9;break e;case _:a=11;break e;case I:a=14;break e;case k:a=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(n=kd(a,t,n,o)).elementType=e,n.type=r,n.lanes=s,n}function Nd(e,n,t,r){return(e=kd(7,e,r,n)).lanes=t,e}function Rd(e,n,t,r){return(e=kd(22,e,r,n)).elementType=U,e.lanes=t,e.stateNode={isHidden:!1},e}function Fd(e,n,t){return(e=kd(6,e,null,n)).lanes=t,e}function Wd(e,n,t){return(n=kd(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Td(e,n,t,r,o){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vn(0),this.expirationTimes=vn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vn(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Bd(e,n,t,r,o,i,s,a,l){return e=new Td(e,n,t,a,l),1===n?(n=1,!0===i&&(n|=8)):n=0,i=kd(3,null,null,n),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},ki(i),e}function zd(e){if(!e)return _o;e:{if(ze(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Uo(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(i(171))}if(1===e.tag){var t=e.type;if(Uo(t))return No(e,t,n)}return n}function Vd(e,n,t,r,o,i,s,a,l){return(e=Bd(t,r,!0,e,0,i,0,a,l)).context=zd(null),t=e.current,(i=Mi(r=nd(),o=td(t))).callback=null!=n?n:null,ji(t,i,o),e.current.lanes=o,Cn(e,o,r),od(e,r),e}function Jd(e,n,t,r){var o=n.current,i=nd(),s=td(o);return t=zd(t),null===n.context?n.context=t:n.pendingContext=t,(n=Mi(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=ji(o,n,s))&&(rd(e,o,s,i),Ni(e,o,s)),s}function Hd(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gd(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function $d(e,n){Gd(e,n),(e=e.alternate)&&Gd(e,n)}El=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Lo.current)ya=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return ya=!1,function(e,n,t){switch(n.tag){case 3:La(n),fi();break;case 5:ss(n);break;case 1:Uo(n.type)&&Ro(n);break;case 4:os(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,o=n.memoizedProps.value;Do(Ci,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(Do(ls,1&ls.current),n.flags|=128,null):0!=(t&n.child.childLanes)?Fa(e,n,t):(Do(ls,1&ls.current),null!==(e=Ha(e,n,t))?e.sibling:null);Do(ls,1&ls.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return Va(e,n,t);n.flags|=128}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Do(ls,ls.current),r)break;return null;case 22:case 23:return n.lanes=0,Aa(e,n,t)}return Ha(e,n,t)}(e,n,t);ya=0!=(131072&e.flags)}else ya=!1,ii&&0!=(1048576&n.flags)&&ei(n,$o,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Ja(e,n),e=n.pendingProps;var o=ko(n,wo.current);Ai(n,t),o=Es(null,n,r,e,o,t);var s=As();return n.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Uo(r)?(s=!0,Ro(n)):s=!1,n.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ki(n),o.updater=zi,n.stateNode=o,o._reactInternals=n,Gi(n,r,e,t),n=wa(null,n,r,!0,s,t)):(n.tag=0,ii&&s&&ni(n),Sa(null,n,o,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Ja(e,n),e=n.pendingProps,r=(o=r._init)(r._payload),n.type=r,o=n.tag=function(e){if("function"==typeof e)return Ud(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===I)return 14}return 2}(r),e=vi(r,e),o){case 0:n=Da(null,n,r,e,t);break e;case 1:n=_a(null,n,r,e,t);break e;case 11:n=Pa(null,n,r,e,t);break e;case 14:n=xa(null,n,r,vi(r.type,e),t);break e}throw Error(i(306,r,""))}return n;case 0:return r=n.type,o=n.pendingProps,Da(e,n,r,o=n.elementType===r?o:vi(r,o),t);case 1:return r=n.type,o=n.pendingProps,_a(e,n,r,o=n.elementType===r?o:vi(r,o),t);case 3:e:{if(La(n),null===e)throw Error(i(387));r=n.pendingProps,o=(s=n.memoizedState).element,Ui(e,n),Fi(n,r,null,t);var a=n.memoizedState;if(r=a.element,s.isDehydrated){if(s={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},n.updateQueue.baseState=s,n.memoizedState=s,256&n.flags){n=Ia(e,n,r,t,o=ca(Error(i(423)),n));break e}if(r!==o){n=Ia(e,n,r,t,o=ca(Error(i(424)),n));break e}for(oi=co(n.stateNode.containerInfo.firstChild),ri=n,ii=!0,si=null,t=Yi(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(fi(),r===o){n=Ha(e,n,t);break e}Sa(e,n,r,t)}n=n.child}return n;case 5:return ss(n),null===e&&ci(n),r=n.type,o=n.pendingProps,s=null!==e?e.memoizedProps:null,a=o.children,to(r,o)?a=null:null!==s&&to(r,s)&&(n.flags|=32),Oa(e,n),Sa(e,n,a,t),n.child;case 6:return null===e&&ci(n),null;case 13:return Fa(e,n,t);case 4:return os(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Zi(n,null,r,t):Sa(e,n,r,t),n.child;case 11:return r=n.type,o=n.pendingProps,Pa(e,n,r,o=n.elementType===r?o:vi(r,o),t);case 7:return Sa(e,n,n.pendingProps,t),n.child;case 8:case 12:return Sa(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,o=n.pendingProps,s=n.memoizedProps,a=o.value,Do(Ci,r._currentValue),r._currentValue=a,null!==s)if(ar(s.value,a)){if(s.children===o.children&&!Lo.current){n=Ha(e,n,t);break e}}else for(null!==(s=n.child)&&(s.return=n);null!==s;){var l=s.dependencies;if(null!==l){a=s.child;for(var d=l.firstContext;null!==d;){if(d.context===r){if(1===s.tag){(d=Mi(-1,t&-t)).tag=2;var c=s.updateQueue;if(null!==c){var u=(c=c.shared).pending;null===u?d.next=d:(d.next=u.next,u.next=d),c.pending=d}}s.lanes|=t,null!==(d=s.alternate)&&(d.lanes|=t),Ei(s.return,t,n),l.lanes|=t;break}d=d.next}}else if(10===s.tag)a=s.type===n.type?null:s.child;else if(18===s.tag){if(null===(a=s.return))throw Error(i(341));a.lanes|=t,null!==(l=a.alternate)&&(l.lanes|=t),Ei(a,t,n),a=s.sibling}else a=s.child;if(null!==a)a.return=s;else for(a=s;null!==a;){if(a===n){a=null;break}if(null!==(s=a.sibling)){s.return=a.return,a=s;break}a=a.return}s=a}Sa(e,n,o.children,t),n=n.child}return n;case 9:return o=n.type,r=n.pendingProps.children,Ai(n,t),r=r(o=Oi(o)),n.flags|=1,Sa(e,n,r,t),n.child;case 14:return o=vi(r=n.type,n.pendingProps),xa(e,n,r,o=vi(r.type,o),t);case 15:return Ea(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,o=n.pendingProps,o=n.elementType===r?o:vi(r,o),Ja(e,n),n.tag=1,Uo(r)?(e=!0,Ro(n)):e=!1,Ai(n,t),Ji(n,r,o),Gi(n,r,o,t),wa(null,n,r,!0,e,t);case 19:return Va(e,n,t);case 22:return Aa(e,n,t)}throw Error(i(156,n.tag))};var Qd="function"==typeof reportError?reportError:function(e){console.error(e)};function qd(e){this._internalRoot=e}function Xd(e){this._internalRoot=e}function Zd(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Yd(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Kd(){}function ec(e,n,t,r,o){var i=t._reactRootContainer;if(i){var s=i;if("function"==typeof o){var a=o;o=function(){var e=Hd(s);a.call(e)}}Jd(n,s,e,o)}else s=function(e,n,t,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Hd(s);i.call(e)}}var s=Vd(n,r,e,0,null,!1,0,"",Kd);return e._reactRootContainer=s,e[go]=s.current,zr(8===e.nodeType?e.parentNode:e),ud(),s}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var a=r;r=function(){var e=Hd(l);a.call(e)}}var l=Bd(e,0,!1,null,0,!1,0,"",Kd);return e._reactRootContainer=l,e[go]=l.current,zr(8===e.nodeType?e.parentNode:e),ud((function(){Jd(n,l,t,r)})),l}(t,n,e,o,r);return Hd(s)}Xd.prototype.render=qd.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(i(409));Jd(e,n,null,null)},Xd.prototype.unmount=qd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;ud((function(){Jd(null,e,null,null)})),n[go]=null}},Xd.prototype.unstable_scheduleHydration=function(e){if(e){var n=An();e={blockedOn:null,target:e,priority:n};for(var t=0;t<Mn.length&&0!==n&&n<Mn[t].priority;t++);Mn.splice(t,0,e),0===t&&Fn(e)}},Pn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=mn(n.pendingLanes);0!==t&&(bn(n,1|t),od(n,Ze()),0==(6&wl)&&(Vl=Ze()+500,Vo()))}break;case 13:ud((function(){var n=Li(e,1);if(null!==n){var t=nd();rd(n,e,1,t)}})),$d(e,1)}},xn=function(e){if(13===e.tag){var n=Li(e,134217728);null!==n&&rd(n,e,134217728,nd()),$d(e,134217728)}},En=function(e){if(13===e.tag){var n=td(e),t=Li(e,n);null!==t&&rd(t,e,n,nd()),$d(e,n)}},An=function(){return yn},On=function(e,n){var t=yn;try{return yn=e,n()}finally{yn=t}},Pe=function(e,n,t){switch(n){case"input":if(Y(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=Po(r);if(!o)throw Error(i(90));$(r),Y(r,o)}}}break;case"textarea":ie(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},_e=cd,we=ud;var nc={usingClientEntryPoint:!1,Events:[yo,So,Po,Oe,De,cd]},tc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{on=oc.inject(rc),sn=oc}catch(ce){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zd(n))throw Error(i(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:P,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Zd(e))throw Error(i(299));var t=!1,r="",o=Qd;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),n=Bd(e,1,!1,null,0,t,0,r,o),e[go]=n.current,zr(8===e.nodeType?e.parentNode:e),new qd(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=He(n))?null:e.stateNode},n.flushSync=function(e){return ud(e)},n.hydrate=function(e,n,t){if(!Yd(n))throw Error(i(200));return ec(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Zd(e))throw Error(i(405));var r=null!=t&&t.hydratedSources||null,o=!1,s="",a=Qd;if(null!=t&&(!0===t.unstable_strictMode&&(o=!0),void 0!==t.identifierPrefix&&(s=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),n=Vd(n,null,e,1,null!=t?t:null,o,0,s,a),e[go]=n.current,zr(e),r)for(e=0;e<r.length;e++)o=(o=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o);return new Xd(n)},n.render=function(e,n,t){if(!Yd(n))throw Error(i(200));return ec(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Yd(e))throw Error(i(40));return!!e._reactRootContainer&&(ud((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[go]=null}))})),!0)},n.unstable_batchedUpdates=cd,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Yd(t))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},745:(e,n,t)=>{"use strict";var r=t(935);n.s=r.createRoot,r.hydrateRoot},935:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(448)},251:(e,n,t)=>{"use strict";var r=t(294),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function d(e,n,t){var r,i={},d=null,c=null;for(r in void 0!==t&&(d=""+t),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(c=n.ref),n)s.call(n,r)&&!l.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:o,type:e,key:d,ref:c,props:i,_owner:a.current}}n.Fragment=i,n.jsx=d,n.jsxs=d},408:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),l=Symbol.for("react.context"),d=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),u=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),p=Symbol.iterator,f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,h={};function v(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||f}function C(){}function b(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||f}v.prototype.isReactComponent={},v.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=v.prototype;var y=b.prototype=new C;y.constructor=b,g(y,v.prototype),y.isPureReactComponent=!0;var S=Array.isArray,P=Object.prototype.hasOwnProperty,x={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function A(e,n,r){var o,i={},s=null,a=null;if(null!=n)for(o in void 0!==n.ref&&(a=n.ref),void 0!==n.key&&(s=""+n.key),n)P.call(n,o)&&!E.hasOwnProperty(o)&&(i[o]=n[o]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var d=Array(l),c=0;c<l;c++)d[c]=arguments[c+2];i.children=d}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:t,type:e,key:s,ref:a,props:i,_owner:x.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var D=/\/+/g;function _(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function w(e,n,o,i,s){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var l=!1;if(null===e)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return s=s(l=e),e=""===i?"."+_(l,0):i,S(s)?(o="",null!=e&&(o=e.replace(D,"$&/")+"/"),w(s,n,o,"",(function(e){return e}))):null!=s&&(O(s)&&(s=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(s,o+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(D,"$&/")+"/")+e)),n.push(s)),1;if(l=0,i=""===i?".":i+":",S(e))for(var d=0;d<e.length;d++){var c=i+_(a=e[d],d);l+=w(a,n,o,c,s)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),d=0;!(a=e.next()).done;)l+=w(a=a.value,n,o,c=i+_(a,d++),s);else if("object"===a)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function L(e,n,t){if(null==e)return e;var r=[],o=0;return w(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function I(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var k={current:null},U={transition:null},M={ReactCurrentDispatcher:k,ReactCurrentBatchConfig:U,ReactCurrentOwner:x};n.Children={map:L,forEach:function(e,n,t){L(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return L(e,(function(){n++})),n},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=v,n.Fragment=o,n.Profiler=s,n.PureComponent=b,n.StrictMode=i,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=g({},e.props),i=e.key,s=e.ref,a=e._owner;if(null!=n){if(void 0!==n.ref&&(s=n.ref,a=x.current),void 0!==n.key&&(i=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in n)P.call(n,d)&&!E.hasOwnProperty(d)&&(o[d]=void 0===n[d]&&void 0!==l?l[d]:n[d])}var d=arguments.length-2;if(1===d)o.children=r;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:t,type:e.type,key:i,ref:s,props:o,_owner:a}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},n.createElement=A,n.createFactory=function(e){var n=A.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:d,render:e}},n.isValidElement=O,n.lazy=function(e){return{$$typeof:m,_payload:{_status:-1,_result:e},_init:I}},n.memo=function(e,n){return{$$typeof:u,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=U.transition;U.transition={};try{e()}finally{U.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return k.current.useCallback(e,n)},n.useContext=function(e){return k.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return k.current.useDeferredValue(e)},n.useEffect=function(e,n){return k.current.useEffect(e,n)},n.useId=function(){return k.current.useId()},n.useImperativeHandle=function(e,n,t){return k.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return k.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return k.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return k.current.useMemo(e,n)},n.useReducer=function(e,n,t){return k.current.useReducer(e,n,t)},n.useRef=function(e){return k.current.useRef(e)},n.useState=function(e){return k.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return k.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return k.current.useTransition()},n.version="18.2.0"},294:(e,n,t)=>{"use strict";e.exports=t(408)},893:(e,n,t)=>{"use strict";e.exports=t(251)},53:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,o=e[r];if(!(0<i(o,n)))break e;e[r]=n,e[t]=o,t=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length,s=o>>>1;r<s;){var a=2*(r+1)-1,l=e[a],d=a+1,c=e[d];if(0>i(l,t))d<o&&0>i(c,l)?(e[r]=c,e[d]=t,r=d):(e[r]=l,e[a]=t,r=a);else{if(!(d<o&&0>i(c,t)))break e;e[r]=c,e[d]=t,r=d}}}return n}function i(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;n.unstable_now=function(){return s.now()}}else{var a=Date,l=a.now();n.unstable_now=function(){return a.now()-l}}var d=[],c=[],u=1,m=null,p=3,f=!1,g=!1,h=!1,v="function"==typeof setTimeout?setTimeout:null,C="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var n=r(c);null!==n;){if(null===n.callback)o(c);else{if(!(n.startTime<=e))break;o(c),n.sortIndex=n.expirationTime,t(d,n)}n=r(c)}}function S(e){if(h=!1,y(e),!g)if(null!==r(d))g=!0,U(P);else{var n=r(c);null!==n&&M(S,n.startTime-e)}}function P(e,t){g=!1,h&&(h=!1,C(O),O=-1),f=!0;var i=p;try{for(y(t),m=r(d);null!==m&&(!(m.expirationTime>t)||e&&!w());){var s=m.callback;if("function"==typeof s){m.callback=null,p=m.priorityLevel;var a=s(m.expirationTime<=t);t=n.unstable_now(),"function"==typeof a?m.callback=a:m===r(d)&&o(d),y(t)}else o(d);m=r(d)}if(null!==m)var l=!0;else{var u=r(c);null!==u&&M(S,u.startTime-t),l=!1}return l}finally{m=null,p=i,f=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,E=!1,A=null,O=-1,D=5,_=-1;function w(){return!(n.unstable_now()-_<D)}function L(){if(null!==A){var e=n.unstable_now();_=e;var t=!0;try{t=A(!0,e)}finally{t?x():(E=!1,A=null)}}else E=!1}if("function"==typeof b)x=function(){b(L)};else if("undefined"!=typeof MessageChannel){var I=new MessageChannel,k=I.port2;I.port1.onmessage=L,x=function(){k.postMessage(null)}}else x=function(){v(L,0)};function U(e){A=e,E||(E=!0,x())}function M(e,t){O=v((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){g||f||(g=!0,U(P))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_getFirstCallbackNode=function(){return r(d)},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,o,i){var s=n.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?s+i:s,e){case 1:var a=-1;break;case 2:a=250;break;case 5:a=1073741823;break;case 4:a=1e4;break;default:a=5e3}return e={id:u++,callback:o,priorityLevel:e,startTime:i,expirationTime:a=i+a,sortIndex:-1},i>s?(e.sortIndex=i,t(c,e),null===r(d)&&e===r(c)&&(h?(C(O),O=-1):h=!0,M(S,i-s))):(e.sortIndex=a,t(d,e),g||f||(g=!0,U(P))),e},n.unstable_shouldYield=w,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},840:(e,n,t)=>{"use strict";e.exports=t(53)},774:e=>{e.exports=function(e,n,t,r){var o=t?t.call(r,e,n):void 0;if(void 0!==o)return!!o;if(e===n)return!0;if("object"!=typeof e||!e||"object"!=typeof n||!n)return!1;var i=Object.keys(e),s=Object.keys(n);if(i.length!==s.length)return!1;for(var a=Object.prototype.hasOwnProperty.bind(n),l=0;l<i.length;l++){var d=i[l];if(!a(d))return!1;var c=e[d],u=n[d];if(!1===(o=t?t.call(r,c,u,d):void 0)||void 0===o&&c!==u)return!1}return!0}}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,o),i.exports}o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var i=Object.create(null);o.r(i);var s={};e=e||[null,n({}),n([]),n(n)];for(var a=2&r&&t;"object"==typeof a&&!~e.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>t[e]));return s.default=()=>t,o.d(i,s),i},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0,(()=>{"use strict";var e,n=o(294),t=o.t(n,2),r=o(745),i=o(935),s=o.t(i,2);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const l="popstate";function d(e,n){if(!1===e||null==e)throw new Error(n)}function c(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function u(e,n){return{usr:e.state,key:e.key,idx:n}}function m(e,n,t,r){return void 0===t&&(t=null),a({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof n?f(n):n,{state:t,key:n&&n.key||r||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:n="/",search:t="",hash:r=""}=e;return t&&"?"!==t&&(n+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(n+="#"===r.charAt(0)?r:"#"+r),n}function f(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substr(t),e=e.substr(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substr(r),e=e.substr(0,r)),e&&(n.pathname=e)}return n}var g;function h(e,n,t){void 0===t&&(t="/");let r=L(("string"==typeof n?f(n):n).pathname||"/",t);if(null==r)return null;let o=v(e);!function(e){e.sort(((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){return e.length===n.length&&e.slice(0,-1).every(((e,t)=>e===n[t]))?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),n.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=D(o[e],w(r));return i}function v(e,n,t,r){void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r="");let o=(e,o,i)=>{let s={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};s.relativePath.startsWith("/")&&(d(s.relativePath.startsWith(r),'Absolute route path "'+s.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),s.relativePath=s.relativePath.slice(r.length));let a=M([r,s.relativePath]),l=t.concat(s);e.children&&e.children.length>0&&(d(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+a+'".'),v(e.children,n,l,a)),(null!=e.path||e.index)&&n.push({path:a,score:O(a,e.index),routesMeta:l})};return e.forEach(((e,n)=>{var t;if(""!==e.path&&null!=(t=e.path)&&t.includes("?"))for(let t of C(e.path))o(e,n,t);else o(e,n)})),n}function C(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,o=t.endsWith("?"),i=t.replace(/\?$/,"");if(0===r.length)return o?[i,""]:[i];let s=C(r.join("/")),a=[];return a.push(...s.map((e=>""===e?i:[i,e].join("/")))),o&&a.push(...s),a.map((n=>e.startsWith("/")&&""===n?"/":n))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(g||(g={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const b=/^:\w+$/,y=3,S=2,P=1,x=10,E=-2,A=e=>"*"===e;function O(e,n){let t=e.split("/"),r=t.length;return t.some(A)&&(r+=E),n&&(r+=S),t.filter((e=>!A(e))).reduce(((e,n)=>e+(b.test(n)?y:""===n?P:x)),r)}function D(e,n){let{routesMeta:t}=e,r={},o="/",i=[];for(let e=0;e<t.length;++e){let s=t[e],a=e===t.length-1,l="/"===o?n:n.slice(o.length)||"/",d=_({path:s.relativePath,caseSensitive:s.caseSensitive,end:a},l);if(!d)return null;Object.assign(r,d.params);let c=s.route;i.push({params:r,pathname:M([o,d.pathname]),pathnameBase:j(M([o,d.pathnameBase])),route:c}),"/"!==d.pathnameBase&&(o=M([o,d.pathnameBase]))}return i}function _(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0),c("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,n,t)=>(r.push({paramName:n,isOptional:null!=t}),t?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=n.match(t);if(!o)return null;let i=o[0],s=i.replace(/(.)\/+$/,"$1"),a=o.slice(1);return{params:r.reduce(((e,n,t)=>{let{paramName:r,isOptional:o}=n;if("*"===r){let e=a[t]||"";s=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}const l=a[t];return e[r]=o&&!l?void 0:function(e,n){try{return decodeURIComponent(e)}catch(t){return c(!1,'The value for the URL param "'+n+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}(l||"",r),e}),{}),pathname:i,pathnameBase:s,pattern:e}}function w(e){try{return decodeURI(e)}catch(n){return c(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}function L(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}function I(e,n,t,r){return"Cannot include a '"+e+"' character in a manually specified `to."+n+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+t+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function k(e){return function(e){return e.filter(((e,n)=>0===n||e.route.path&&e.route.path.length>0))}(e).map(((n,t)=>t===e.length-1?n.pathname:n.pathnameBase))}function U(e,n,t,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=f(e):(o=a({},e),d(!o.pathname||!o.pathname.includes("?"),I("?","pathname","search",o)),d(!o.pathname||!o.pathname.includes("#"),I("#","pathname","hash",o)),d(!o.search||!o.search.includes("#"),I("#","search","hash",o)));let i,s=""===e||""===o.pathname,l=s?"/":o.pathname;if(null==l)i=t;else if(r){let e=n[n.length-1].replace(/^\//,"").split("/");if(l.startsWith("..")){let n=l.split("/");for(;".."===n[0];)n.shift(),e.pop();o.pathname=n.join("/")}i="/"+e.join("/")}else{let e=n.length-1;if(l.startsWith("..")){let n=l.split("/");for(;".."===n[0];)n.shift(),e-=1;o.pathname=n.join("/")}i=e>=0?n[e]:"/"}let c=function(e,n){void 0===n&&(n="/");let{pathname:t,search:r="",hash:o=""}="string"==typeof e?f(e):e,i=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)})),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:i,search:N(r),hash:R(o)}}(o,i),u=l&&"/"!==l&&l.endsWith("/"),m=(s||"."===l)&&t.endsWith("/");return c.pathname.endsWith("/")||!u&&!m||(c.pathname+="/"),c}const M=e=>e.join("/").replace(/\/\/+/g,"/"),j=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),N=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",R=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const F=["post","put","patch","delete"],W=(new Set(F),["get",...F]);function T(){return T=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},T.apply(this,arguments)}new Set(W),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const B=n.createContext(null),z=n.createContext(null),V=n.createContext(null),J=n.createContext(null),H=n.createContext({outlet:null,matches:[],isDataRoute:!1}),G=n.createContext(null);function $(){return null!=n.useContext(J)}function Q(){return $()||d(!1),n.useContext(J).location}function q(e){n.useContext(V).static||n.useLayoutEffect(e)}function X(){let{isDataRoute:e}=n.useContext(H);return e?function(){let{router:e}=function(e){let t=n.useContext(B);return t||d(!1),t}(re.UseNavigateStable),t=ie(oe.UseNavigateStable),r=n.useRef(!1);return q((()=>{r.current=!0})),n.useCallback((function(n,o){void 0===o&&(o={}),r.current&&("number"==typeof n?e.navigate(n):e.navigate(n,T({fromRouteId:t},o)))}),[e,t])}():function(){$()||d(!1);let e=n.useContext(B),{basename:t,navigator:r}=n.useContext(V),{matches:o}=n.useContext(H),{pathname:i}=Q(),s=JSON.stringify(k(o)),a=n.useRef(!1);return q((()=>{a.current=!0})),n.useCallback((function(n,o){if(void 0===o&&(o={}),!a.current)return;if("number"==typeof n)return void r.go(n);let l=U(n,JSON.parse(s),i,"path"===o.relative);null==e&&"/"!==t&&(l.pathname="/"===l.pathname?t:M([t,l.pathname])),(o.replace?r.replace:r.push)(l,o.state,o)}),[t,r,s,i,e])}()}function Z(e,t){let{relative:r}=void 0===t?{}:t,{matches:o}=n.useContext(H),{pathname:i}=Q(),s=JSON.stringify(k(o));return n.useMemo((()=>U(e,JSON.parse(s),i,"path"===r)),[e,s,i,r])}function Y(t,r,o){$()||d(!1);let{navigator:i}=n.useContext(V),{matches:s}=n.useContext(H),a=s[s.length-1],l=a?a.params:{},c=(a&&a.pathname,a?a.pathnameBase:"/");a&&a.route;let u,m=Q();if(r){var p;let e="string"==typeof r?f(r):r;"/"===c||(null==(p=e.pathname)?void 0:p.startsWith(c))||d(!1),u=e}else u=m;let g=u.pathname||"/",v=h(t,{pathname:"/"===c?g:g.slice(c.length)||"/"}),C=function(e,t,r){var o;if(void 0===t&&(t=[]),void 0===r&&(r=null),null==e){var i;if(null==(i=r)||!i.errors)return null;e=r.matches}let s=e,a=null==(o=r)?void 0:o.errors;if(null!=a){let e=s.findIndex((e=>e.route.id&&(null==a?void 0:a[e.route.id])));e>=0||d(!1),s=s.slice(0,Math.min(s.length,e+1))}return s.reduceRight(((e,o,i)=>{let l=o.route.id?null==a?void 0:a[o.route.id]:null,d=null;r&&(d=o.route.errorElement||ee);let c=t.concat(s.slice(0,i+1)),u=()=>{let t;return t=l?d:o.route.Component?n.createElement(o.route.Component,null):o.route.element?o.route.element:e,n.createElement(te,{match:o,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:t})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===i)?n.createElement(ne,{location:r.location,revalidation:r.revalidation,component:d,error:l,children:u(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):u()}),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:M([c,i.encodeLocation?i.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:M([c,i.encodeLocation?i.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),s,o);return r&&C?n.createElement(J.Provider,{value:{location:T({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:e.Pop}},C):C}function K(){let e=function(){var e;let t=n.useContext(G),r=function(e){let t=n.useContext(z);return t||d(!1),t}(oe.UseRouteError),o=ie(oe.UseRouteError);return t||(null==(e=r.errors)?void 0:e[o])}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return n.createElement(n.Fragment,null,n.createElement("h2",null,"Unexpected Application Error!"),n.createElement("h3",{style:{fontStyle:"italic"}},t),r?n.createElement("pre",{style:o},r):null,null)}const ee=n.createElement(K,null);class ne extends n.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||"idle"!==n.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return this.state.error?n.createElement(H.Provider,{value:this.props.routeContext},n.createElement(G.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function te(e){let{routeContext:t,match:r,children:o}=e,i=n.useContext(B);return i&&i.static&&i.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=r.route.id),n.createElement(H.Provider,{value:t},o)}var re=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(re||{}),oe=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(oe||{});function ie(e){let t=function(e){let t=n.useContext(H);return t||d(!1),t}(),r=t.matches[t.matches.length-1];return r.route.id||d(!1),r.route.id}function se(e){d(!1)}function ae(t){let{basename:r="/",children:o=null,location:i,navigationType:s=e.Pop,navigator:a,static:l=!1}=t;$()&&d(!1);let c=r.replace(/^\/*/,"/"),u=n.useMemo((()=>({basename:c,navigator:a,static:l})),[c,a,l]);"string"==typeof i&&(i=f(i));let{pathname:m="/",search:p="",hash:g="",state:h=null,key:v="default"}=i,C=n.useMemo((()=>{let e=L(m,c);return null==e?null:{location:{pathname:e,search:p,hash:g,state:h,key:v},navigationType:s}}),[c,m,p,g,h,v,s]);return null==C?null:n.createElement(V.Provider,{value:u},n.createElement(J.Provider,{children:o,value:C}))}function le(e){let{children:n,location:t}=e;return Y(de(n),t)}function de(e,t){void 0===t&&(t=[]);let r=[];return n.Children.forEach(e,((e,o)=>{if(!n.isValidElement(e))return;let i=[...t,o];if(e.type===n.Fragment)return void r.push.apply(r,de(e.props.children,i));e.type!==se&&d(!1),e.props.index&&e.props.children&&d(!1);let s={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(s.children=de(e.props.children,i)),r.push(s)})),r}function ce(){return ce=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},ce.apply(this,arguments)}t.startTransition,new Promise((()=>{})),n.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const ue=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"];new Map;const me=t.startTransition;function pe(t){let{basename:r,children:o,future:i,window:s}=t,g=n.useRef();var h;null==g.current&&(g.current=(void 0===(h={window:s,v5Compat:!0})&&(h={}),function(n,t,r,o){void 0===o&&(o={});let{window:i=document.defaultView,v5Compat:s=!1}=o,c=i.history,f=e.Pop,g=null,h=v();function v(){return(c.state||{idx:null}).idx}function C(){f=e.Pop;let n=v(),t=null==n?null:n-h;h=n,g&&g({action:f,location:y.location,delta:t})}function b(e){let n="null"!==i.location.origin?i.location.origin:i.location.href,t="string"==typeof e?e:p(e);return d(n,"No window.location.(origin|href) available to create URL for href: "+t),new URL(t,n)}null==h&&(h=0,c.replaceState(a({},c.state,{idx:h}),""));let y={get action(){return f},get location(){return n(i,c)},listen(e){if(g)throw new Error("A history only accepts one active listener");return i.addEventListener(l,C),g=e,()=>{i.removeEventListener(l,C),g=null}},createHref:e=>t(i,e),createURL:b,encodeLocation(e){let n=b(e);return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(n,t){f=e.Push;let o=m(y.location,n,t);r&&r(o,n),h=v()+1;let a=u(o,h),l=y.createHref(o);try{c.pushState(a,"",l)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;i.location.assign(l)}s&&g&&g({action:f,location:y.location,delta:1})},replace:function(n,t){f=e.Replace;let o=m(y.location,n,t);r&&r(o,n),h=v();let i=u(o,h),a=y.createHref(o);c.replaceState(i,"",a),s&&g&&g({action:f,location:y.location,delta:0})},go:e=>c.go(e)};return y}((function(e,n){let{pathname:t="/",search:r="",hash:o=""}=f(e.location.hash.substr(1));return t.startsWith("/")||t.startsWith(".")||(t="/"+t),m("",{pathname:t,search:r,hash:o},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}),(function(e,n){let t=e.document.querySelector("base"),r="";if(t&&t.getAttribute("href")){let n=e.location.href,t=n.indexOf("#");r=-1===t?n:n.slice(0,t)}return r+"#"+("string"==typeof n?n:p(n))}),(function(e,n){c("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(n)+")")}),h)));let v=g.current,[C,b]=n.useState({action:v.action,location:v.location}),{v7_startTransition:y}=i||{},S=n.useCallback((e=>{y&&me?me((()=>b(e))):b(e)}),[b,y]);return n.useLayoutEffect((()=>v.listen(S)),[v,S]),n.createElement(ae,{basename:r,children:o,location:C.location,navigationType:C.action,navigator:v})}s.flushSync;const fe="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ge=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,he=n.forwardRef((function(e,t){let r,{onClick:o,relative:i,reloadDocument:s,replace:a,state:l,target:c,to:u,preventScrollReset:m,unstable_viewTransition:f}=e,g=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,ue),{basename:h}=n.useContext(V),v=!1;if("string"==typeof u&&ge.test(u)&&(r=u,fe))try{let e=new URL(window.location.href),n=u.startsWith("//")?new URL(e.protocol+u):new URL(u),t=L(n.pathname,h);n.origin===e.origin&&null!=t?u=t+n.search+n.hash:v=!0}catch(e){}let C=function(e,t){let{relative:r}=void 0===t?{}:t;$()||d(!1);let{basename:o,navigator:i}=n.useContext(V),{hash:s,pathname:a,search:l}=Z(e,{relative:r}),c=a;return"/"!==o&&(c="/"===a?o:M([o,a])),i.createHref({pathname:c,search:l,hash:s})}(u,{relative:i}),b=function(e,t){let{target:r,replace:o,state:i,preventScrollReset:s,relative:a,unstable_viewTransition:l}=void 0===t?{}:t,d=X(),c=Q(),u=Z(e,{relative:a});return n.useCallback((n=>{if(function(e,n){return!(0!==e.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(n,r)){n.preventDefault();let t=void 0!==o?o:p(c)===p(u);d(e,{replace:t,state:i,preventScrollReset:s,relative:a,unstable_viewTransition:l})}}),[c,d,u,o,i,r,e,s,a,l])}(u,{replace:a,state:l,target:c,preventScrollReset:m,relative:i,unstable_viewTransition:f});return n.createElement("a",ce({},g,{href:r||C,onClick:v||s?o:function(e){o&&o(e),e.defaultPrevented||b(e)},ref:t,target:c}))}));var ve,Ce;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(ve||(ve={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Ce||(Ce={}));var be=function(){return be=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},be.apply(this,arguments)};function ye(e,n,t){if(t||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var Se=o(774),Pe=o.n(Se),xe="-ms-",Ee="-moz-",Ae="-webkit-",Oe="comm",De="rule",_e="decl",we="@import",Le="@keyframes",Ie="@layer",ke=Math.abs,Ue=String.fromCharCode,Me=Object.assign;function je(e){return e.trim()}function Ne(e,n){return(e=n.exec(e))?e[0]:e}function Re(e,n,t){return e.replace(n,t)}function Fe(e,n){return e.indexOf(n)}function We(e,n){return 0|e.charCodeAt(n)}function Te(e,n,t){return e.slice(n,t)}function Be(e){return e.length}function ze(e){return e.length}function Ve(e,n){return n.push(e),e}function Je(e,n){return e.filter((function(e){return!Ne(e,n)}))}var He=1,Ge=1,$e=0,Qe=0,qe=0,Xe="";function Ze(e,n,t,r,o,i,s,a){return{value:e,root:n,parent:t,type:r,props:o,children:i,line:He,column:Ge,length:s,return:"",siblings:a}}function Ye(e,n){return Me(Ze("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},n)}function Ke(e){for(;e.root;)e=Ye(e.root,{children:[e]});Ve(e,e.siblings)}function en(){return qe=Qe>0?We(Xe,--Qe):0,Ge--,10===qe&&(Ge=1,He--),qe}function nn(){return qe=Qe<$e?We(Xe,Qe++):0,Ge++,10===qe&&(Ge=1,He++),qe}function tn(){return We(Xe,Qe)}function rn(){return Qe}function on(e,n){return Te(Xe,e,n)}function sn(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function an(e){return je(on(Qe-1,cn(91===e?e+2:40===e?e+1:e)))}function ln(e){for(;(qe=tn())&&qe<33;)nn();return sn(e)>2||sn(qe)>3?"":" "}function dn(e,n){for(;--n&&nn()&&!(qe<48||qe>102||qe>57&&qe<65||qe>70&&qe<97););return on(e,rn()+(n<6&&32==tn()&&32==nn()))}function cn(e){for(;nn();)switch(qe){case e:return Qe;case 34:case 39:34!==e&&39!==e&&cn(qe);break;case 40:41===e&&cn(e);break;case 92:nn()}return Qe}function un(e,n){for(;nn()&&e+qe!==57&&(e+qe!==84||47!==tn()););return"/*"+on(n,Qe-1)+"*"+Ue(47===e?e:nn())}function mn(e){for(;!sn(tn());)nn();return on(e,Qe)}function pn(e,n){for(var t="",r=0;r<e.length;r++)t+=n(e[r],r,e,n)||"";return t}function fn(e,n,t,r){switch(e.type){case Ie:if(e.children.length)break;case we:case _e:return e.return=e.return||e.value;case Oe:return"";case Le:return e.return=e.value+"{"+pn(e.children,r)+"}";case De:if(!Be(e.value=e.props.join(",")))return""}return Be(t=pn(e.children,r))?e.return=e.value+"{"+t+"}":""}function gn(e,n,t){switch(function(e,n){return 45^We(e,0)?(((n<<2^We(e,0))<<2^We(e,1))<<2^We(e,2))<<2^We(e,3):0}(e,n)){case 5103:return Ae+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Ae+e+e;case 4789:return Ee+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Ae+e+Ee+e+xe+e+e;case 5936:switch(We(e,n+11)){case 114:return Ae+e+xe+Re(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Ae+e+xe+Re(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Ae+e+xe+Re(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return Ae+e+xe+e+e;case 6165:return Ae+e+xe+"flex-"+e+e;case 5187:return Ae+e+Re(e,/(\w+).+(:[^]+)/,Ae+"box-$1$2"+xe+"flex-$1$2")+e;case 5443:return Ae+e+xe+"flex-item-"+Re(e,/flex-|-self/g,"")+(Ne(e,/flex-|baseline/)?"":xe+"grid-row-"+Re(e,/flex-|-self/g,""))+e;case 4675:return Ae+e+xe+"flex-line-pack"+Re(e,/align-content|flex-|-self/g,"")+e;case 5548:return Ae+e+xe+Re(e,"shrink","negative")+e;case 5292:return Ae+e+xe+Re(e,"basis","preferred-size")+e;case 6060:return Ae+"box-"+Re(e,"-grow","")+Ae+e+xe+Re(e,"grow","positive")+e;case 4554:return Ae+Re(e,/([^-])(transform)/g,"$1"+Ae+"$2")+e;case 6187:return Re(Re(Re(e,/(zoom-|grab)/,Ae+"$1"),/(image-set)/,Ae+"$1"),e,"")+e;case 5495:case 3959:return Re(e,/(image-set\([^]*)/,Ae+"$1$`$1");case 4968:return Re(Re(e,/(.+:)(flex-)?(.*)/,Ae+"box-pack:$3"+xe+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Ae+e+e;case 4200:if(!Ne(e,/flex-|baseline/))return xe+"grid-column-align"+Te(e,n)+e;break;case 2592:case 3360:return xe+Re(e,"template-","")+e;case 4384:case 3616:return t&&t.some((function(e,t){return n=t,Ne(e.props,/grid-\w+-end/)}))?~Fe(e+(t=t[n].value),"span")?e:xe+Re(e,"-start","")+e+xe+"grid-row-span:"+(~Fe(t,"span")?Ne(t,/\d+/):+Ne(t,/\d+/)-+Ne(e,/\d+/))+";":xe+Re(e,"-start","")+e;case 4896:case 4128:return t&&t.some((function(e){return Ne(e.props,/grid-\w+-start/)}))?e:xe+Re(Re(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return Re(e,/(.+)-inline(.+)/,Ae+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(Be(e)-1-n>6)switch(We(e,n+1)){case 109:if(45!==We(e,n+4))break;case 102:return Re(e,/(.+:)(.+)-([^]+)/,"$1"+Ae+"$2-$3$1"+Ee+(108==We(e,n+3)?"$3":"$2-$3"))+e;case 115:return~Fe(e,"stretch")?gn(Re(e,"stretch","fill-available"),n,t)+e:e}break;case 5152:case 5920:return Re(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(n,t,r,o,i,s,a){return xe+t+":"+r+a+(o?xe+t+"-span:"+(i?s:+s-+r)+a:"")+e}));case 4949:if(121===We(e,n+6))return Re(e,":",":"+Ae)+e;break;case 6444:switch(We(e,45===We(e,14)?18:11)){case 120:return Re(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+Ae+(45===We(e,14)?"inline-":"")+"box$3$1"+Ae+"$2$3$1"+xe+"$2box$3")+e;case 100:return Re(e,":",":"+xe)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return Re(e,"scroll-","scroll-snap-")+e}return e}function hn(e,n,t,r){if(e.length>-1&&!e.return)switch(e.type){case _e:return void(e.return=gn(e.value,e.length,t));case Le:return pn([Ye(e,{value:Re(e.value,"@","@"+Ae)})],r);case De:if(e.length)return function(e,n){return e.map(n).join("")}(t=e.props,(function(n){switch(Ne(n,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":Ke(Ye(e,{props:[Re(n,/:(read-\w+)/,":"+Ee+"$1")]})),Ke(Ye(e,{props:[n]})),Me(e,{props:Je(t,r)});break;case"::placeholder":Ke(Ye(e,{props:[Re(n,/:(plac\w+)/,":"+Ae+"input-$1")]})),Ke(Ye(e,{props:[Re(n,/:(plac\w+)/,":"+Ee+"$1")]})),Ke(Ye(e,{props:[Re(n,/:(plac\w+)/,xe+"input-$1")]})),Ke(Ye(e,{props:[n]})),Me(e,{props:Je(t,r)})}return""}))}}function vn(e){return function(e){return Xe="",e}(Cn("",null,null,null,[""],e=function(e){return He=Ge=1,$e=Be(Xe=e),Qe=0,[]}(e),0,[0],e))}function Cn(e,n,t,r,o,i,s,a,l){for(var d=0,c=0,u=s,m=0,p=0,f=0,g=1,h=1,v=1,C=0,b="",y=o,S=i,P=r,x=b;h;)switch(f=C,C=nn()){case 40:if(108!=f&&58==We(x,u-1)){-1!=Fe(x+=Re(an(C),"&","&\f"),"&\f")&&(v=-1);break}case 34:case 39:case 91:x+=an(C);break;case 9:case 10:case 13:case 32:x+=ln(f);break;case 92:x+=dn(rn()-1,7);continue;case 47:switch(tn()){case 42:case 47:Ve(yn(un(nn(),rn()),n,t,l),l);break;default:x+="/"}break;case 123*g:a[d++]=Be(x)*v;case 125*g:case 59:case 0:switch(C){case 0:case 125:h=0;case 59+c:-1==v&&(x=Re(x,/\f/g,"")),p>0&&Be(x)-u&&Ve(p>32?Sn(x+";",r,t,u-1,l):Sn(Re(x," ","")+";",r,t,u-2,l),l);break;case 59:x+=";";default:if(Ve(P=bn(x,n,t,d,c,o,a,b,y=[],S=[],u,i),i),123===C)if(0===c)Cn(x,n,P,P,y,i,u,a,S);else switch(99===m&&110===We(x,3)?100:m){case 100:case 108:case 109:case 115:Cn(e,P,P,r&&Ve(bn(e,P,P,0,0,o,a,b,o,y=[],u,S),S),o,S,u,a,r?y:S);break;default:Cn(x,P,P,P,[""],S,0,a,S)}}d=c=p=0,g=v=1,b=x="",u=s;break;case 58:u=1+Be(x),p=f;default:if(g<1)if(123==C)--g;else if(125==C&&0==g++&&125==en())continue;switch(x+=Ue(C),C*g){case 38:v=c>0?1:(x+="\f",-1);break;case 44:a[d++]=(Be(x)-1)*v,v=1;break;case 64:45===tn()&&(x+=an(nn())),m=tn(),c=u=Be(b=x+=mn(rn())),C++;break;case 45:45===f&&2==Be(x)&&(g=0)}}return i}function bn(e,n,t,r,o,i,s,a,l,d,c,u){for(var m=o-1,p=0===o?i:[""],f=ze(p),g=0,h=0,v=0;g<r;++g)for(var C=0,b=Te(e,m+1,m=ke(h=s[g])),y=e;C<f;++C)(y=je(h>0?p[C]+" "+b:Re(b,/&\f/g,p[C])))&&(l[v++]=y);return Ze(e,n,t,0===o?De:a,l,d,c,u)}function yn(e,n,t,r){return Ze(e,n,t,Oe,Ue(qe),Te(e,2,-2),0,r)}function Sn(e,n,t,r,o){return Ze(e,n,t,_e,Te(e,0,r),Te(e,r+1,-1),r,o)}var Pn={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},xn="undefined"!=typeof process&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}&&({ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_ATTR||{ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_ATTR)||"data-styled",En="undefined"!=typeof window&&"HTMLElement"in window,An=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY&&""!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY?"false"!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY&&{ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY&&""!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY&&"false"!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY&&{ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_21620:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\package.json",npm_package_name:"pvr-react",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\trabalho\\freelancer\\pvr\\code\\sitereact\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"1f2e71ca-8a79-400c-a334-2a16f718ef3a",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY),On=(new Set,Object.freeze([])),Dn=Object.freeze({});var _n=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),wn=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Ln=/(^-|-$)/g;function In(e){return e.replace(wn,"-").replace(Ln,"")}var kn=/(a)(d)/gi,Un=function(e){return String.fromCharCode(e+(e>25?39:97))};function Mn(e){var n,t="";for(n=Math.abs(e);n>52;n=n/52|0)t=Un(n%52)+t;return(Un(n%52)+t).replace(kn,"$1-$2")}var jn,Nn=function(e,n){for(var t=n.length;t;)e=33*e^n.charCodeAt(--t);return e},Rn=function(e){return Nn(5381,e)};function Fn(e){return"string"==typeof e&&!0}var Wn="function"==typeof Symbol&&Symbol.for,Tn=Wn?Symbol.for("react.memo"):60115,Bn=Wn?Symbol.for("react.forward_ref"):60112,zn={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Vn={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Jn={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Hn=((jn={})[Bn]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},jn[Tn]=Jn,jn);function Gn(e){return("type"in(n=e)&&n.type.$$typeof)===Tn?Jn:"$$typeof"in e?Hn[e.$$typeof]:zn;var n}var $n=Object.defineProperty,Qn=Object.getOwnPropertyNames,qn=Object.getOwnPropertySymbols,Xn=Object.getOwnPropertyDescriptor,Zn=Object.getPrototypeOf,Yn=Object.prototype;function Kn(e,n,t){if("string"!=typeof n){if(Yn){var r=Zn(n);r&&r!==Yn&&Kn(e,r,t)}var o=Qn(n);qn&&(o=o.concat(qn(n)));for(var i=Gn(e),s=Gn(n),a=0;a<o.length;++a){var l=o[a];if(!(l in Vn||t&&t[l]||s&&l in s||i&&l in i)){var d=Xn(n,l);try{$n(e,l,d)}catch(e){}}}}return e}function et(e){return"function"==typeof e}function nt(e){return"object"==typeof e&&"styledComponentId"in e}function tt(e,n){return e&&n?"".concat(e," ").concat(n):e||n||""}function rt(e,n){if(0===e.length)return"";for(var t=e[0],r=1;r<e.length;r++)t+=n?n+e[r]:e[r];return t}function ot(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function it(e,n,t){if(void 0===t&&(t=!1),!t&&!ot(e)&&!Array.isArray(e))return n;if(Array.isArray(n))for(var r=0;r<n.length;r++)e[r]=it(e[r],n[r]);else if(ot(n))for(var r in n)e[r]=it(e[r],n[r]);return e}function st(e,n){Object.defineProperty(e,"toString",{value:n})}function at(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(n.length>0?" Args: ".concat(n.join(", ")):""))}var lt=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var n=0,t=0;t<e;t++)n+=this.groupSizes[t];return n},e.prototype.insertRules=function(e,n){if(e>=this.groupSizes.length){for(var t=this.groupSizes,r=t.length,o=r;e>=o;)if((o<<=1)<0)throw at(16,"".concat(e));this.groupSizes=new Uint32Array(o),this.groupSizes.set(t),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var s=this.indexOfGroup(e+1),a=(i=0,n.length);i<a;i++)this.tag.insertRule(s,n[i])&&(this.groupSizes[e]++,s++)},e.prototype.clearGroup=function(e){if(e<this.length){var n=this.groupSizes[e],t=this.indexOfGroup(e),r=t+n;this.groupSizes[e]=0;for(var o=t;o<r;o++)this.tag.deleteRule(t)}},e.prototype.getGroup=function(e){var n="";if(e>=this.length||0===this.groupSizes[e])return n;for(var t=this.groupSizes[e],r=this.indexOfGroup(e),o=r+t,i=r;i<o;i++)n+="".concat(this.tag.getRule(i)).concat("/*!sc*/\n");return n},e}(),dt=new Map,ct=new Map,ut=1,mt=function(e){if(dt.has(e))return dt.get(e);for(;ct.has(ut);)ut++;var n=ut++;return dt.set(e,n),ct.set(n,e),n},pt=function(e,n){ut=n+1,dt.set(e,n),ct.set(n,e)},ft="style[".concat(xn,"][").concat("data-styled-version",'="').concat("6.1.1",'"]'),gt=new RegExp("^".concat(xn,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),ht=function(e,n,t){for(var r,o=t.split(","),i=0,s=o.length;i<s;i++)(r=o[i])&&e.registerName(n,r)},vt=function(e,n){for(var t,r=(null!==(t=n.textContent)&&void 0!==t?t:"").split("/*!sc*/\n"),o=[],i=0,s=r.length;i<s;i++){var a=r[i].trim();if(a){var l=a.match(gt);if(l){var d=0|parseInt(l[1],10),c=l[2];0!==d&&(pt(c,d),ht(e,c,l[3]),e.getTag().insertRules(d,o)),o.length=0}else o.push(a)}}};function Ct(){return o.nc}var bt=function(e){var n=document.head,t=e||n,r=document.createElement("style"),o=function(e){var n=Array.from(e.querySelectorAll("style[".concat(xn,"]")));return n[n.length-1]}(t),i=void 0!==o?o.nextSibling:null;r.setAttribute(xn,"active"),r.setAttribute("data-styled-version","6.1.1");var s=Ct();return s&&r.setAttribute("nonce",s),t.insertBefore(r,i),r},yt=function(){function e(e){this.element=bt(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets,t=0,r=n.length;t<r;t++){var o=n[t];if(o.ownerNode===e)return o}throw at(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,n){try{return this.sheet.insertRule(n,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var n=this.sheet.cssRules[e];return n&&n.cssText?n.cssText:""},e}(),St=function(){function e(e){this.element=bt(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,n){if(e<=this.length&&e>=0){var t=document.createTextNode(n);return this.element.insertBefore(t,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),Pt=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,n){return e<=this.length&&(this.rules.splice(e,0,n),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),xt=En,Et={isServer:!En,useCSSOMInjection:!An},At=function(){function e(e,n,t){void 0===e&&(e=Dn),void 0===n&&(n={});var r=this;this.options=be(be({},Et),e),this.gs=n,this.names=new Map(t),this.server=!!e.isServer,!this.server&&En&&xt&&(xt=!1,function(e){for(var n=document.querySelectorAll(ft),t=0,r=n.length;t<r;t++){var o=n[t];o&&"active"!==o.getAttribute(xn)&&(vt(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this)),st(this,(function(){return function(e){for(var n=e.getTag(),t=n.length,r="",o=function(t){var o=function(e){return ct.get(e)}(t);if(void 0===o)return"continue";var i=e.names.get(o),s=n.getGroup(t);if(void 0===i||0===s.length)return"continue";var a="".concat(xn,".g").concat(t,'[id="').concat(o,'"]'),l="";void 0!==i&&i.forEach((function(e){e.length>0&&(l+="".concat(e,","))})),r+="".concat(s).concat(a,'{content:"').concat(l,'"}').concat("/*!sc*/\n")},i=0;i<t;i++)o(i);return r}(r)}))}return e.registerId=function(e){return mt(e)},e.prototype.reconstructWithOptions=function(n,t){return void 0===t&&(t=!0),new e(be(be({},this.options),n),this.gs,t&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var n=e.useCSSOMInjection,t=e.target;return e.isServer?new Pt(t):n?new yt(t):new St(t)}(this.options),new lt(e)));var e},e.prototype.hasNameForId=function(e,n){return this.names.has(e)&&this.names.get(e).has(n)},e.prototype.registerName=function(e,n){if(mt(e),this.names.has(e))this.names.get(e).add(n);else{var t=new Set;t.add(n),this.names.set(e,t)}},e.prototype.insertRules=function(e,n,t){this.registerName(e,n),this.getTag().insertRules(mt(e),t)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(mt(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),Ot=/&/g,Dt=/^\s*\/\/.*$/gm;function _t(e,n){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(n," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(n," ")),e.props=e.props.map((function(e){return"".concat(n," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=_t(e.children,n)),e}))}function wt(e){var n,t,r,o=void 0===e?Dn:e,i=o.options,s=void 0===i?Dn:i,a=o.plugins,l=void 0===a?On:a,d=function(e,r,o){return o===t||o.startsWith(t)&&o.endsWith(t)&&o.replaceAll(t,"").length>0?".".concat(n):e},c=l.slice();c.push((function(e){e.type===De&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(Ot,t).replace(r,d))})),s.prefix&&c.push(hn),c.push(fn);var u=function(e,o,i,a){void 0===o&&(o=""),void 0===i&&(i=""),void 0===a&&(a="&"),n=a,t=o,r=new RegExp("\\".concat(t,"\\b"),"g");var l=e.replace(Dt,""),d=vn(i||o?"".concat(i," ").concat(o," { ").concat(l," }"):l);s.namespace&&(d=_t(d,s.namespace));var u,m,p,f=[];return pn(d,(u=c.concat((p=function(e){return f.push(e)},function(e){e.root||(e=e.return)&&p(e)})),m=ze(u),function(e,n,t,r){for(var o="",i=0;i<m;i++)o+=u[i](e,n,t,r)||"";return o})),f};return u.hash=l.length?l.reduce((function(e,n){return n.name||at(15),Nn(e,n.name)}),5381).toString():"",u}var Lt=new At,It=wt(),kt=n.createContext({shouldForwardProp:void 0,styleSheet:Lt,stylis:It}),Ut=(kt.Consumer,n.createContext(void 0));function Mt(){return(0,n.useContext)(kt)}function jt(e){var t=(0,n.useState)(e.stylisPlugins),r=t[0],o=t[1],i=Mt().styleSheet,s=(0,n.useMemo)((function(){var n=i;return e.sheet?n=e.sheet:e.target&&(n=n.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[e.disableCSSOMInjection,e.sheet,e.target,i]),a=(0,n.useMemo)((function(){return wt({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:r})}),[e.enableVendorPrefixes,e.namespace,r]);(0,n.useEffect)((function(){Pe()(r,e.stylisPlugins)||o(e.stylisPlugins)}),[e.stylisPlugins]);var l=(0,n.useMemo)((function(){return{shouldForwardProp:e.shouldForwardProp,styleSheet:s,stylis:a}}),[e.shouldForwardProp,s,a]);return n.createElement(kt.Provider,{value:l},n.createElement(Ut.Provider,{value:a},e.children))}var Nt=function(){function e(e,n){var t=this;this.inject=function(e,n){void 0===n&&(n=It);var r=t.name+n.hash;e.hasNameForId(t.id,r)||e.insertRules(t.id,r,n(t.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=n,st(this,(function(){throw at(12,String(t.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=It),this.name+e.hash},e}(),Rt=function(e){return e>="A"&&e<="Z"};function Ft(e){for(var n="",t=0;t<e.length;t++){var r=e[t];if(1===t&&"-"===r&&"-"===e[0])return e;Rt(r)?n+="-"+r.toLowerCase():n+=r}return n.startsWith("ms-")?"-"+n:n}var Wt=function(e){return null==e||!1===e||""===e},Tt=function(e){var n,t,r=[];for(var o in e){var i=e[o];e.hasOwnProperty(o)&&!Wt(i)&&(Array.isArray(i)&&i.isCss||et(i)?r.push("".concat(Ft(o),":"),i,";"):ot(i)?r.push.apply(r,ye(ye(["".concat(o," {")],Tt(i),!1),["}"],!1)):r.push("".concat(Ft(o),": ").concat((n=o,null==(t=i)||"boolean"==typeof t||""===t?"":"number"!=typeof t||0===t||n in Pn||n.startsWith("--")?String(t).trim():"".concat(t,"px")),";")))}return r};function Bt(e,n,t,r){return Wt(e)?[]:nt(e)?[".".concat(e.styledComponentId)]:et(e)?!et(o=e)||o.prototype&&o.prototype.isReactComponent||!n?[e]:Bt(e(n),n,t,r):e instanceof Nt?t?(e.inject(t,r),[e.getName(r)]):[e]:ot(e)?Tt(e):Array.isArray(e)?Array.prototype.concat.apply(On,e.map((function(e){return Bt(e,n,t,r)}))):[e.toString()];var o}function zt(e){for(var n=0;n<e.length;n+=1){var t=e[n];if(et(t)&&!nt(t))return!1}return!0}var Vt=Rn("6.1.1"),Jt=function(){function e(e,n,t){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===t||t.isStatic)&&zt(e),this.componentId=n,this.baseHash=Nn(Vt,n),this.baseStyle=t,At.registerId(n)}return e.prototype.generateAndInjectStyles=function(e,n,t){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,n,t):"";if(this.isStatic&&!t.hash)if(this.staticRulesId&&n.hasNameForId(this.componentId,this.staticRulesId))r=tt(r,this.staticRulesId);else{var o=rt(Bt(this.rules,e,n,t)),i=Mn(Nn(this.baseHash,o)>>>0);if(!n.hasNameForId(this.componentId,i)){var s=t(o,".".concat(i),void 0,this.componentId);n.insertRules(this.componentId,i,s)}r=tt(r,i),this.staticRulesId=i}else{for(var a=Nn(this.baseHash,t.hash),l="",d=0;d<this.rules.length;d++){var c=this.rules[d];if("string"==typeof c)l+=c;else if(c){var u=rt(Bt(c,e,n,t));a=Nn(a,u+d),l+=u}}if(l){var m=Mn(a>>>0);n.hasNameForId(this.componentId,m)||n.insertRules(this.componentId,m,t(l,".".concat(m),void 0,this.componentId)),r=tt(r,m)}}return r},e}(),Ht=n.createContext(void 0);Ht.Consumer;var Gt={};function $t(e,t,r){var o=nt(e),i=e,s=!Fn(e),a=t.attrs,l=void 0===a?On:a,d=t.componentId,c=void 0===d?function(e,n){var t="string"!=typeof e?"sc":In(e);Gt[t]=(Gt[t]||0)+1;var r="".concat(t,"-").concat(function(e){return Mn(Rn(e)>>>0)}("6.1.1"+t+Gt[t]));return n?"".concat(n,"-").concat(r):r}(t.displayName,t.parentComponentId):d,u=t.displayName,m=void 0===u?function(e){return Fn(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e):u,p=t.displayName&&t.componentId?"".concat(In(t.displayName),"-").concat(t.componentId):t.componentId||c,f=o&&i.attrs?i.attrs.concat(l).filter(Boolean):l,g=t.shouldForwardProp;if(o&&i.shouldForwardProp){var h=i.shouldForwardProp;if(t.shouldForwardProp){var v=t.shouldForwardProp;g=function(e,n){return h(e,n)&&v(e,n)}}else g=h}var C=new Jt(r,p,o?i.componentStyle:void 0);function b(e,t){return function(e,t,r){var o=e.attrs,i=e.componentStyle,s=e.defaultProps,a=e.foldedComponentIds,l=e.styledComponentId,d=e.target,c=n.useContext(Ht),u=Mt(),m=e.shouldForwardProp||u.shouldForwardProp,p=function(e,n,t){for(var r,o=be(be({},n),{className:void 0,theme:t}),i=0;i<e.length;i+=1){var s=et(r=e[i])?r(o):r;for(var a in s)o[a]="className"===a?tt(o[a],s[a]):"style"===a?be(be({},o[a]),s[a]):s[a]}return n.className&&(o.className=tt(o.className,n.className)),o}(o,t,function(e,n,t){return void 0===t&&(t=Dn),e.theme!==t.theme&&e.theme||n||t.theme}(t,c,s)||Dn),f=p.as||d,g={};for(var h in p)void 0===p[h]||"$"===h[0]||"as"===h||"theme"===h||("forwardedAs"===h?g.as=p.forwardedAs:m&&!m(h,f)||(g[h]=p[h]));var v=function(e,n){var t=Mt();return e.generateAndInjectStyles(n,t.styleSheet,t.stylis)}(i,p),C=tt(a,l);return v&&(C+=" "+v),p.className&&(C+=" "+p.className),g[Fn(f)&&!_n.has(f)?"class":"className"]=C,g.ref=r,(0,n.createElement)(f,g)}(y,e,t)}b.displayName=m;var y=n.forwardRef(b);return y.attrs=f,y.componentStyle=C,y.displayName=m,y.shouldForwardProp=g,y.foldedComponentIds=o?tt(i.foldedComponentIds,i.styledComponentId):"",y.styledComponentId=p,y.target=o?i.target:e,Object.defineProperty(y,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];for(var r=0,o=n;r<o.length;r++)it(e,o[r],!0);return e}({},i.defaultProps,e):e}}),st(y,(function(){return".".concat(y.styledComponentId)})),s&&Kn(y,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),y}function Qt(e,n){for(var t=[e[0]],r=0,o=n.length;r<o;r+=1)t.push(n[r],e[r+1]);return t}new Set;var qt=function(e){return Object.assign(e,{isCss:!0})};function Xt(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];if(et(e)||ot(e))return qt(Bt(Qt(On,ye([e],n,!0))));var r=e;return 0===n.length&&1===r.length&&"string"==typeof r[0]?Bt(r):qt(Bt(Qt(r,n)))}function Zt(e,n,t){if(void 0===t&&(t=Dn),!n)throw at(1,n);var r=function(r){for(var o=[],i=1;i<arguments.length;i++)o[i-1]=arguments[i];return e(n,t,Xt.apply(void 0,ye([r],o,!1)))};return r.attrs=function(r){return Zt(e,n,be(be({},t),{attrs:Array.prototype.concat(t.attrs,r).filter(Boolean)}))},r.withConfig=function(r){return Zt(e,n,be(be({},t),r))},r}var Yt,Kt=function(e){return Zt($t,e)},er=Kt;_n.forEach((function(e){er[e]=Kt(e)})),function(){function e(e,n){this.rules=e,this.componentId=n,this.isStatic=zt(e),At.registerId(this.componentId+1)}e.prototype.createStyles=function(e,n,t,r){var o=r(rt(Bt(this.rules,n,t,r)),""),i=this.componentId+e;t.insertRules(i,i,o)},e.prototype.removeStyles=function(e,n){n.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,n,t,r){e>2&&At.registerId(this.componentId+e),this.removeStyles(e,t),this.createStyles(e,n,t,r)}}(),function(){function e(){var e=this;this._emitSheetCSS=function(){var n=e.instance.toString(),t=Ct(),r=rt([t&&'nonce="'.concat(t,'"'),"".concat(xn,'="true"'),"".concat("data-styled-version",'="').concat("6.1.1",'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(n,"</style>")},this.getStyleTags=function(){if(e.sealed)throw at(2);return e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)throw at(2);var r=((t={})[xn]="",t["data-styled-version"]="6.1.1",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=Ct();return o&&(r.nonce=o),[n.createElement("style",be({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new At({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw at(2);return n.createElement(jt,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw at(3)}}(),"__sc-".concat(xn,"__");var nr,tr,rr=er.header(Yt||(nr=["\n    .nav {\n        font-family: Montserrat, serif;\n        font-size: 20px;\n        font-weight: 400;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 10px;\n        margin: 50px 150px 0;\n        max-width: 1920px;\n\n        & a {\n            text-decoration: none;\n            color: black;\n        }\n\n        & a:hover {\n            color: #577FA4; /* Cor de destaque ao passar o mouse */\n            text-decoration: none; /* Sublinha o texto no hover */\n        }\n    }\n\n    .LangButtonsContainer {\n        display: flex;\n        gap: 0;\n    }\n\n    .LangButton {\n        width: 46px;\n        height: 46px;\n        background: white;\n        border: 1px solid #44617C;\n        cursor: pointer;\n        font-size: 24px;\n        font-family: Montserrat,serif;\n        font-weight: 400;\n        color: #44617C;\n        transition: background-color 0.3s, transform 0.3s;\n    }\n\n\n    .LangButton#btnEN {\n        background: white;\n        padding: 1px;\n        color: #44617C;\n        border: 1px solid #44617C;\n        transition: background-color 0.3s, transform 0.3s;\n    }\n\n    .LangButton.active {\n        background: #44617C;\n        color: white;\n        border: 1px solid #44617C;\n    }\n\n    .LangButton.active#btnEN {\n        background: #44617C;\n        color: white;\n    }\n\n    /* Hover Effect */\n\n    .LangButton:hover {\n        transform: scale(1.1);\n    }\n\n    .navbaritens {\n        display: flex;\n        gap: 70px;\n    }\n"],tr||(tr=nr.slice(0)),Yt=Object.freeze(Object.defineProperties(nr,{raw:{value:Object.freeze(tr)}})))),or=o(893);const ir=function(){return(0,or.jsx)(rr,{children:(0,or.jsxs)("nav",{className:"nav",children:[(0,or.jsx)("div",{children:(0,or.jsx)("img",{className:"Logo",src:"imagens/logo1.png"})}),(0,or.jsxs)("div",{className:"navbaritens",children:[(0,or.jsx)(he,{to:"/",className:"NavbarItem",id:"navQuemSomos",children:"Home"}),(0,or.jsx)(he,{to:"/servicos",className:"NavbarItem",id:"navServicos",children:"Serviços"}),(0,or.jsx)(he,{to:"/transacoes",className:"NavbarItem",id:"navEquipe",children:"Transações"}),(0,or.jsx)(he,{to:"/",className:"NavbarItem",id:"navContato",children:"Quem somos"})]}),(0,or.jsx)("div",{children:(0,or.jsxs)("div",{className:"LangButtonsContainer",children:[(0,or.jsx)("button",{id:"btnPT",className:"LangButton active",children:"PT"}),(0,or.jsx)("button",{id:"btnEN",className:"LangButton",children:"EN"})]})})]})})};var sr,ar=er.header(sr||(sr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 50px 150px;\n    \n    .dv-footer {\n        background: white;\n        padding: 50px 150px;\n    }\n\n    .dv-fr-conteudo {\n        display: flex;\n        justify-content: space-between;\n        border-top: 4px solid #577FA4;\n        padding-top: 20px;\n    }\n\n    .dv-fr-co-nav {\n        display: flex;\n        gap: 50px;\n        & a{\n            color: #44617c;\n            font-size: 24px;\n            font-family: Montserrat, sans-serif;\n            font-weight: 400;\n            word-wrap: break-word;\n        }\n    }\n\n    .dv-fr-co-logo {\n\n    }\n\n    .dv-fr-copyright {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n"])));const lr=function(){return(0,or.jsxs)(ar,{children:[(0,or.jsxs)("div",{className:"dv-fr-conteudo",children:[(0,or.jsxs)("div",{className:"dv-fr-co-nav",children:[(0,or.jsx)("a",{href:"/assessor",className:"Nav-item QuemSomos",id:"navQuemSomosFooter",children:"Quem somos"}),(0,or.jsx)("a",{href:"/servicos",className:"Nav-item Servicos-posicao",id:"navServicosFooter",children:"Serviços"}),(0,or.jsx)("a",{href:"/transacoes",className:"Nav-item Equipe-posicao",id:"navEquipeFooter",children:"Equipe"}),(0,or.jsx)("a",{href:"/contato",className:"Nav-item Contato-posicao",id:"navContatoFooter",children:"Contato"})]}),(0,or.jsx)("div",{className:"dv-fr-co-logo",children:(0,or.jsx)("img",{className:"Logo Logo-posicao",src:"imagens/pvr.png"})})]}),(0,or.jsxs)("div",{className:"dv-fr-copyright",children:[(0,or.jsx)("div",{children:"© Copyright 2024 PVR Capital. All rights reserved."}),(0,or.jsx)("div",{children:"Politicas de Privacidade | Termos de Uso"})]})]})},dr=function(e){return(0,or.jsxs)(or.Fragment,{children:[(0,or.jsx)(ir,{}),(0,or.jsx)("div",{className:"container",children:e.children}),(0,or.jsx)(lr,{})]})};var cr,ur=er.header(cr||(cr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    .Titulo-destaque,\n    .Titulo-subtitulo {\n        display: block;\n        color: #44617C;\n        font-size: 64px;\n        font-family: Montserrat, serif;\n        font-weight: 700; /* Ajuste para o subtítulo se necessário */\n        word-wrap: break-word;\n        opacity: 0; /* Inicialmente invisível */\n        animation: fadeIn 1s ease-out forwards; /* Animação */\n    }\n\n    .Titulo-subtitulo {\n        font-weight: 100;\n        animation-delay: 0.5s; /* Aparece depois do título principal */\n    }\n\n    .Grafico {\n        display: flex;\n        gap: 20px;\n        align-items: flex-end;\n        opacity: 0; /* Inicialmente invisível */\n        animation: slideUp 1.2s ease-out forwards; /* Animação */\n        animation-delay: 0.7s;\n    }\n\n    .mp {\n        margin: 50px 150px;\n        max-width: 1920px;\n    }\n\n    .banner {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 10px 10px 0 10px;\n        margin-top: 50px;\n        margin-bottom: 0;\n        opacity: 0; /* Inicialmente invisível */\n        transform: translateY(-20px); /* Começa deslocado para cima */\n        animation: bannerFadeIn 1s ease-out forwards; /* Animação */\n    }\n\n    /* Keyframes para as animações */\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes slideUp {\n        from {\n            opacity: 0;\n            transform: translateY(20px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes bannerFadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(-20px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n"])));const mr=function(){return(0,or.jsx)(ur,{children:(0,or.jsxs)("div",{className:"banner mp",children:[(0,or.jsx)("div",{children:(0,or.jsx)("div",{children:(0,or.jsxs)("div",{className:"Titulo",children:[(0,or.jsx)("span",{className:"Titulo-destaque",children:"Performance,"}),(0,or.jsx)("span",{className:"Titulo-destaque",children:"Valor e"}),(0,or.jsx)("span",{className:"Titulo-destaque",children:"Resultado:"}),(0,or.jsx)("span",{className:"Titulo-subtitulo",children:"Estratégia Financeira"}),(0,or.jsx)("span",{className:"Titulo-subtitulo",children:"para o Sucesso Empresarial."})]})})}),(0,or.jsx)("div",{children:(0,or.jsxs)("div",{className:"Grafico",children:[(0,or.jsx)("div",{className:"Coluna1",style:{width:"141px",height:"161px",opacity:.6,background:"#E8E8E8"}}),(0,or.jsx)("div",{className:"Coluna2",style:{width:"141px",height:"269px",opacity:.6,background:"#577FA4"}}),(0,or.jsx)("div",{className:"Coluna3",style:{width:"141px",height:"567px",opacity:.6,background:"#44617C"}}),(0,or.jsx)("div",{className:"Coluna4",style:{width:"141px",height:"695px",opacity:.6,background:"#D0D0D0"}})]})})]})})};var pr,fr=er.header(pr||(pr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    .div-nossa-historia {\n        display: flex;\n        padding: 50px 150px;\n        opacity: 0; /* Inicialmente invisível */\n        transform: translateY(20px); /* Começa deslocado para baixo */\n        animation: fadeInUp 1s ease-out forwards; /* Animação para a seção inteira */\n    }\n\n    .nossa-historia {\n        background: #f5f5f5;\n    }\n\n    .conteudo-nossa-historia {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        padding-left: 60px;\n        opacity: 0;\n        animation: fadeInText 1s ease-out forwards;\n        animation-delay: 0.2s; /* Aparece depois da seção */\n    }\n\n    .imagem-nossa-historia {\n        & img {\n            width: 818px;\n            height: 647px;\n            opacity: 0; /* Inicialmente invisível */\n            transform: translateX(-30px); /* Deslocado para a esquerda */\n            animation: slideInLeft 1s ease-out forwards;\n            animation-delay: 0.4s; /* Aparece depois do texto */\n        }\n    }\n\n    .titulo-nossa-historia {\n        margin-bottom: 20px;\n    }\n\n    .titulo-principal-nossa-historia {\n        color: rgb(68, 97, 124);\n        font-size: 40px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 700;\n        overflow-wrap: break-word;\n        opacity: 0; /* Invisível no início */\n        animation: fadeIn 1s ease-out forwards;\n        animation-delay: 0.2s; /* Começa após a entrada da seção */\n    }\n\n    .subtitulo-nossa-historia {\n        color: rgb(87, 127, 164);\n        font-size: 24px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        overflow-wrap: break-word;\n        opacity: 0;\n        animation: fadeIn 1s ease-out forwards;\n        animation-delay: 0.4s; /* Aparece depois do título */\n    }\n\n    .corpo-nossa-historia {\n        margin-top: 100px;\n        color: black;\n        font-size: 20px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        line-height: 35px;\n        word-wrap: break-word;\n        opacity: 0; /* Invisível no início */\n        animation: fadeIn 1s ease-out forwards;\n        animation-delay: 0.6s; /* Aparece depois do subtítulo */\n    }\n\n    /* Keyframes para animações */\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes fadeInUp {\n        from {\n            opacity: 0;\n            transform: translateY(20px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes fadeInText {\n        from {\n            opacity: 0;\n            transform: translateY(15px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes slideInLeft {\n        from {\n            opacity: 0;\n            transform: translateX(-30px);\n        }\n        to {\n            opacity: 1;\n            transform: translateX(0);\n        }\n    }\n"])));const gr=function(){return(0,or.jsx)(fr,{children:(0,or.jsx)("div",{className:"nossa-historia",children:(0,or.jsxs)("div",{className:"div-nossa-historia",children:[(0,or.jsx)("div",{className:"imagem-nossa-historia",children:(0,or.jsx)("img",{src:"imagens/nossaHistoria.png"})}),(0,or.jsxs)("div",{className:"conteudo-nossa-historia",children:[(0,or.jsxs)("div",{className:"titulo-nossa-historia",children:[(0,or.jsx)("div",{className:"titulo-principal-nossa-historia",children:"A PVR Capital"}),(0,or.jsx)("div",{className:"subtitulo-nossa-historia",children:"Nossa História"})]}),(0,or.jsx)("div",{className:"corpo-nossa-historia",children:"A PVR Capital foi fundada em 2024 por uma equipe multidisciplinar com vasta experiência em projetos de emissão de dívida estruturada, M&A e IPO, com o objetivo de prover soluções que vão desde o planejamento estratégico até a captação de recursos para as empresas, utilizando diversos instrumentos financeiros tais como: emissão de dívida, joint ventures, aporte de capital e venda parcial ou total das ações."})]})]})})})};var hr,vr,Cr=er.header(hr||(hr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    .dv-nossos-servicos {\n        background: #44617c;\n        padding: 50px 150px 0;\n        opacity: 0;\n        animation: fadeInUp 1s ease-out forwards;\n    }\n\n    .dv-nossos-servicos-titulo {\n        top: 69px;\n        color: white;\n        font-size: 40px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 700;\n        word-wrap: break-word;\n        opacity: 0;\n        animation: fadeIn 1s ease-out forwards;\n        animation-delay: 0.2s;\n    }\n\n    .dv-nossos-servicos-conteudo {\n        padding-top: 4rem;\n        display: flex;\n        justify-content: center;\n        gap: 75px;\n        opacity: 0;\n        animation: fadeInUp 1s ease-out forwards;\n        animation-delay: 0.4s;\n    }\n\n    .cd-nossos-servicos {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        opacity: 0;\n        transform: translateY(20px);\n        animation: fadeInUp 0.8s ease-out forwards;\n        animation-delay: 0.6s;\n    }\n\n    .cd-logo-nossos-servicos {\n        height: 100px;\n        opacity: 0;\n        animation: zoomIn 1s ease-out forwards;\n        animation-delay: 0.8s;\n    }\n\n    .cd-titulo-nossos-servicos {\n        padding-bottom: 30px;\n        color: #FDFDFD;\n        font-size: 24px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 600;\n        word-wrap: break-word;\n        border-bottom: 2px solid #577fa4;\n        display: flex;\n        justify-content: center;\n        opacity: 0;\n        animation: fadeIn 1s ease-out forwards;\n        animation-delay: 1s;\n    }\n\n    .cd-conteudo-nossos-servicos {\n        text-align: center;\n        color: white;\n        font-size: 20px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        line-height: 35px;\n        word-wrap: break-word;\n        padding-top: 30px;\n        opacity: 0;\n        animation: fadeInText 1s ease-out forwards;\n        animation-delay: 1.2s;\n    }\n\n    .dv-nossos-servicos-botao {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .Graficopequeno1 {\n        transform: scaleX(-1);\n        /* transform-origin: 0 0; */\n        justify-content: center;\n        align-items: flex-end;\n        gap: 29px;\n        display: inline-flex;\n        animation: slideInLeft2 1s ease-out forwards;\n        opacity: 0;\n        animation-delay: 1.4s;\n    }\n\n    .Graficopequeno2 {\n        /* width: 298px; */\n        /* height: 184px; */\n        /* left: 1499px; */\n        /* position: relative; */\n        /* justify-content: center; */\n        align-items: flex-end;\n        gap: 29px;\n        display: inline-flex;\n        animation: slideInLeft 1s ease-out forwards;\n        opacity: 0;\n        animation-delay: 1.4s;\n        transform: scaleX(1);\n    }\n    \n    /* Keyframes para animações */\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes fadeInUp {\n        from {\n            opacity: 0;\n            transform: translateY(20px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes fadeInText {\n        from {\n            opacity: 0;\n            transform: translateY(15px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes slideInLeft {\n        from {\n            opacity: 0;\n            transform: translateX(-20px);\n        }\n        to {\n            opacity: 1;\n            transform: translateX(0);\n        }\n    }\n\n    @keyframes slideInLeft2 {\n        from {\n            opacity: 0;\n            transform: translateX(-20px) scaleX(-1);\n        }\n        to {\n            opacity: 1;\n            transform: translateX(0) scaleX(-1);\n        }\n    }\n\n    @keyframes zoomIn {\n        from {\n            opacity: 0;\n            transform: scale(0.8);\n        }\n        to {\n            opacity: 1;\n            transform: scale(1);\n        }\n    }\n"]))),br=er.header(vr||(vr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    .btn {\n        padding: 18px 92px;\n        background: ",";\n        border: none;\n        border-radius: 15px;\n        cursor: pointer;\n        font-size: 24px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        color: ",";\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;\n    }\n\n    .btn:hover {\n        background-color: ",";\n        transform: scale(1.1);\n        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);\n    }\n"])),(function(e){return 2===e.modo?"#577FA4":"#E8E8E8"}),(function(e){return 2===e.modo?"#E8E8E8":"#577FA4"}),(function(e){return 2===e.modo?"#476B89":"#D4D4D4"}));const yr=function(e){return(0,or.jsx)(br,{modo:e.modo,children:(0,or.jsx)(he,{to:e.href,children:(0,or.jsx)("button",{className:"btn",type:e.type,onClick:e.onClick,disabled:e.disabled,children:e.texto})})})},Sr=function(){return(0,or.jsx)(Cr,{children:(0,or.jsxs)("div",{className:"dv-nossos-servicos",children:[(0,or.jsx)("div",{className:"dv-nossos-servicos-titulo",children:"Nossos Serviços"}),(0,or.jsxs)("div",{className:"dv-nossos-servicos-conteudo",children:[(0,or.jsxs)("div",{className:"cd-nossos-servicos",children:[(0,or.jsx)("div",{className:"cd-logo-nossos-servicos",children:(0,or.jsx)("img",{className:"Icone",src:"imagens/icone1.png",alt:"Ícone 1"})}),(0,or.jsx)("div",{className:"cd-titulo-nossos-servicos",children:"Mergers & Aquisitions"}),(0,or.jsxs)("div",{className:"cd-conteudo-nossos-servicos",children:["Fusões & Aquisições",(0,or.jsx)("br",{}),"Spin-offs",(0,or.jsx)("br",{}),"Fairness opinions",(0,or.jsx)("br",{}),"Valuations",(0,or.jsx)("br",{}),"Planejamento Estratégico",(0,or.jsx)("br",{}),"Joint Venture & Partnership"]})]}),(0,or.jsxs)("div",{className:"cd-nossos-servicos",children:[(0,or.jsx)("div",{className:"cd-logo-nossos-servicos",children:(0,or.jsx)("img",{className:"Icone",src:"imagens/icone2.png",alt:"Ícone 2"})}),(0,or.jsx)("div",{className:"cd-titulo-nossos-servicos",children:"Consultoria Especializada"}),(0,or.jsxs)("div",{className:"cd-conteudo-nossos-servicos",children:["Análise macroeconômica e setorial",(0,or.jsx)("br",{}),"Entendimento de pontos críticos e definição de plano de ação",(0,or.jsx)("br",{}),"Estruturação e execução de plano de ação"]})]}),(0,or.jsxs)("div",{className:"cd-nossos-servicos",children:[(0,or.jsx)("div",{className:"cd-logo-nossos-servicos",children:(0,or.jsx)("img",{className:"Icone",src:"imagens/icone3.png",alt:"Ícone 3"})}),(0,or.jsx)("div",{className:"cd-titulo-nossos-servicos",children:"Dívida Estruturada"}),(0,or.jsxs)("div",{className:"cd-conteudo-nossos-servicos",children:["Debêntures",(0,or.jsx)("br",{}),"CRA, CRI e FIDC",(0,or.jsx)("br",{}),"Entre outros produtos"]})]})]}),(0,or.jsxs)("div",{className:"dv-nossos-servicos-botao",children:[(0,or.jsx)("div",{children:(0,or.jsxs)("div",{className:"Graficopequeno1",children:[(0,or.jsx)("div",{className:"Coluna1",style:{width:"80px",height:"45px",opacity:.3,background:"#D9D9D9"}}),(0,or.jsx)("div",{className:"Coluna2",style:{width:"80px",height:"113px",opacity:.3,background:"#EFEFEF"}}),(0,or.jsx)("div",{className:"Coluna3",style:{width:"80px",height:"184px",opacity:.3,background:"#577FA4"}})]})}),(0,or.jsx)("div",{className:"btn-nossos-servicos",children:(0,or.jsx)(yr,{href:"/servicos",modo:1,texto:"Nossos serviços"})}),(0,or.jsx)("div",{children:(0,or.jsxs)("div",{className:"Graficopequeno2",children:[(0,or.jsx)("div",{className:"Coluna1",style:{width:"80px",height:"45px",opacity:.3,background:"#D9D9D9"}}),(0,or.jsx)("div",{className:"Coluna2",style:{width:"80px",height:"113px",opacity:.3,background:"#EFEFEF"}}),(0,or.jsx)("div",{className:"Coluna3",style:{width:"80px",height:"184px",opacity:.3,background:"#577FA4"}})]})})]})]})})};var Pr,xr=er.header(Pr||(Pr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(['\n    .Assessor {\n        background: url("imagens/assesor.png");\n        padding: 50px 150px;\n        opacity: 1;\n    }\n\n    .Assessor-conteudo {\n        display: flex;\n        padding-top: 150px;\n        flex-direction: column;\n        gap: 60px;\n        width: 50%;\n        opacity: 0;\n        transform: translateY(20px); /* Deslocado para baixo inicialmente */\n        animation: fadeInUp 1s ease-out forwards;\n        animation-delay: 0.2s; /* Animação com atraso */\n    }\n\n    .Assessor-titulo {\n        color: #E8E8E8;\n        font-size: 40px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 700;\n        word-wrap: break-word;\n        opacity: 0;\n        animation: fadeIn 1s ease-out forwards;\n        animation-delay: 0.4s;\n    }\n\n    .Assessor-corpo {\n        color: white;\n        font-size: 20px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        line-height: 35px;\n        word-wrap: break-word;\n        opacity: 0;\n        animation: fadeIn 1s ease-out forwards;\n        animation-delay: 0.6s;\n    }\n\n    .btn-assessor {\n        padding-top: 18px;\n        padding-bottom: 19px;\n        padding-left: 92px;\n        padding-right: 92px;\n\n        background: #577FA4;\n        border-radius: 15px;\n        overflow: hidden;\n        justify-content: center;\n        align-items: center;\n        display: inline-flex;\n\n        color: white;\n        font-size: 24px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        word-wrap: break-word;\n        opacity: 0;\n        transform: scale(0.9); /* Inicialmente menor */\n        animation: zoomInButton 1s ease-out forwards;\n        animation-delay: 0.8s; /* Animação com atraso */\n        transition: transform 0.3s ease;\n    }\n\n    .btn-assessor:hover {\n        transform: scale(1.05); /* Aumenta ligeiramente o botão no hover */\n    }\n\n    .dv-assessor-botao {\n        padding-bottom: 50px;\n    }\n\n    /* Keyframes para as animações */\n    @keyframes fadeInBackground {\n        from {\n            opacity: 0;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes fadeInUp {\n        from {\n            opacity: 0;\n            transform: translateY(20px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes zoomInButton {\n        from {\n            opacity: 0;\n            transform: scale(0.9);\n        }\n        to {\n            opacity: 1;\n            transform: scale(1);\n        }\n    }\n'])));const Er=function(){return(0,or.jsx)(xr,{children:(0,or.jsx)("div",{className:"Assessor",children:(0,or.jsxs)("div",{className:"Assessor-conteudo",children:[(0,or.jsxs)("div",{className:"Assessor-titulo",children:[(0,or.jsx)("span",{children:"A importância de contratar"}),(0,or.jsx)("span",{children:"de um assessor financeiro"})]}),(0,or.jsx)("div",{className:"Assessor-corpo",children:"A contratação de um assessor financeiro agrega valor a uma potencial transação permitindo aos sócios que foquem na operação da empresa ao mesmo tempo que um time dedicado conduza as negociações e supra as demandas dos investidores."}),(0,or.jsx)("div",{className:"dv-assessor-botao",children:(0,or.jsx)(yr,{href:"/assessor",modo:2,texto:"Saiba mais"})})]})})})};var Ar,Or=er.header(Ar||(Ar=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 50px 150px;\n    background: #44617c;\n\n    .header {\n        display: flex;\n        justify-content: space-between;\n\n        .titulo {\n            .titulo-principal {\n                color: white;\n                font-size: 40px;\n                font-family: Montserrat, sans-serif;\n                font-weight: 700;\n                word-wrap: break-word;\n                \n            }\n\n            .subtitulo {\n                opacity: 0.60;\n                color: white;\n                font-size: 24px;\n                font-family: Montserrat, sans-serif;\n                font-weight: 400;\n                word-wrap: break-word;\n                width: 400px;\n            }\n        }\n    }\n\n    .conteudo {\n        display: flex;\n        justify-content: space-between;\n        padding: 50px 0;\n        height: 450px;\n        \n        .botao {\n            background: none;\n            border: none;\n            cursor: pointer;\n            \n            width: 44px;\n            height: 44px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 0;\n            transition: transform 0.2s ease;\n            position: relative;\n            top: 203px;\n            \n            img {\n                width: 100%;\n                height: 100%;\n            }\n\n            :hover {\n                transform: scale(1.1);\n            }\n        }\n\n        .seta:hover {\n            transform: scale(1.1) rotate(-180deg);\n        }\n\n        .seta1 {\n            transform: rotate(-180deg); /* Inverte a seta 1 */\n        }\n        \n        .cards {\n            display: flex;\n            gap: 4rem;\n            transition: transform 0.5s;\n            align-items: center;\n        }\n    }\n"])));const Dr=JSON.parse('[{"titulo":"TLSV & Grupo GPS 1","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 2","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 3","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 4","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 5","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 6","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 7","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 8","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"},{"titulo":"TLSV & Grupo GPS 9","descricao":"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização.","imagem1":"imagens/empre1.png","imagem2":"imagens/empre2.png"}]');var _r,wr=er.header(_r||(_r=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    .Fundo-box {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 20px;\n        padding: 20px;\n        box-sizing: border-box;\n    }\n\n    .Card {\n        width: 450px;\n        height: 450px;\n        background: white;\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        transition: transform 0.4s ease, box-shadow 0.4s ease;\n        animation: fadeIn 0.6s ease-out;\n    }\n\n    .Card:hover {\n        transform: scale(1.05);\n        box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.3);\n    }\n\n    .card-menor {\n        width: 350px;\n        height: 350px;\n        top: 50px;\n        transition: transform 0.4s ease;\n    }\n\n    .Imagens {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        animation: slideIn 0.8s ease-out;\n    }\n\n    .Imagemempresa2,\n    .Imagemempresa1 {\n        width: 140px;\n        height: auto;\n        transition: transform 0.3s ease;\n    }\n\n    .Br {\n        width: 2px;\n        height: 60px;\n        background-color: #577FA4;\n    }\n\n    .Conteudo-texto {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        text-align: left;\n        gap: 10px;\n        padding: 0 10px;\n        animation: fadeInText 0.6s ease-out;\n    }\n\n    .Titulo-transacao {\n        color: black;\n        font-size: 20px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        margin-bottom: 10px;\n        opacity: 0;\n        animation: fadeIn 0.8s ease-out forwards;\n    }\n\n    .Descricao-transacao {\n        color: black;\n        font-size: 14px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        line-height: 1.5;\n        margin-top: 10px;\n        opacity: 0;\n        animation: fadeIn 1.2s ease-out forwards;\n    }\n\n    /* Keyframes for Animations */\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n\n    @keyframes slideIn {\n        from {\n            opacity: 0;\n            transform: translateX(-30px);\n        }\n        to {\n            opacity: 1;\n            transform: translateX(0);\n        }\n    }\n\n    @keyframes fadeInText {\n        from {\n            opacity: 0;\n            transform: translateY(20px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n"])));const Lr=function(e){var n=e.transacao,t=e.isCardMenor,r=e.numero;return(0,or.jsx)(wr,{children:(0,or.jsx)("div",{className:"Card ".concat(t?"card-menor":""," card").concat(r+1),children:(0,or.jsxs)("div",{className:"Fundo-box",children:[(0,or.jsxs)("div",{className:"Imagens",children:[(0,or.jsx)("img",{className:"Imagemempresa2",src:n.imagem1,alt:"Imagem Empresa 1"}),(0,or.jsx)("div",{className:"Br"}),(0,or.jsx)("img",{className:"Imagemempresa1",src:n.imagem2,alt:"Imagem Empresa 2"})]}),(0,or.jsxs)("div",{className:"Conteudo-texto",children:[(0,or.jsx)("div",{className:"Titulo-transacao",children:n.titulo}),(0,or.jsx)("div",{className:"Descricao Descricao-transacao",children:n.descricao})]})]})},r)})};function Ir(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,s,a=[],l=!0,d=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(a.push(r.value),a.length!==n);l=!0);}catch(e){d=!0,o=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(d)throw o}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return kr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?kr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}const Ur=function(){var e=Ir((0,n.useState)(0),2),t=e[0],r=e[1],o=Ir((0,n.useState)(!1),2),i=o[0],s=o[1],a=Ir((0,n.useState)(Dr),2),l=a[0],d=(a[1],function(){return l.slice(t,t+3).map((function(e,n){return(0,or.jsx)(Lr,{transacao:e,isCardMenor:0===n||2===n,numero:n},n)}))});return(0,n.useEffect)((function(){d()}),[t]),(0,or.jsxs)(Or,{children:[(0,or.jsxs)("div",{className:"header",children:[(0,or.jsxs)("div",{className:"titulo",children:[(0,or.jsx)("div",{className:"titulo-principal",children:"Transações"}),(0,or.jsx)("div",{className:"subtitulo",children:"Nossas últimas transações"})]}),(0,or.jsx)("div",{children:(0,or.jsx)(yr,{href:"/transacoes",modo:2,texto:"Ver todas"})})]}),(0,or.jsxs)("div",{className:"conteudo",children:[(0,or.jsx)("button",{className:"botao seta1",onClick:function(){i||0===t||(s(!0),setTimeout((function(){r((function(e){return e-1})),s(!1)}),500))},children:(0,or.jsx)("img",{src:"imagens/seta2.png",alt:"Transação anterior"})}),(0,or.jsx)("div",{className:"cards",children:d()}),(0,or.jsx)("button",{className:"botao seta2",onClick:function(){i||t+3>=l.length||(s(!0),setTimeout((function(){r((function(e){return e+1})),s(!1)}),500))},children:(0,or.jsx)("img",{src:"imagens/seta2.png",alt:"Próxima transação"})})]})]})};var Mr,jr=er.header(Mr||(Mr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 50px 150px;\n\n    .dv-nossa-equipe {\n        background: white;\n    }\n\n    .dv-ne-titulo {\n        color: #44617c;\n        font-size: 40px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 700;\n        word-wrap: break-word;\n    }\n\n    .dv-ne-conteudo {\n        display: flex;\n        gap: 10rem;\n        padding-top: 50px;\n        justify-content: center;\n    }\n\n    .dv-ne-co-card {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n        align-items: center;\n        width: 450px;\n    }\n\n    .dv-ne-co-cd-foto {\n        height: 339px;\n\n        & img {\n            width: 326px;\n            height: 339px;\n        }\n    }\n\n    .dv-ne-co-cd-nom {\n        color: #44617c;\n        font-size: 24px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        word-wrap: break-word;\n\n        & span {\n            font-weight: 700;\n        }\n    }\n\n    .dv-ne-co-cd-btn {\n        display: flex;\n        justify-content: center;\n    }\n\n    .btn-ne-co-cd {\n        padding: 18px 92px;\n        background: none;\n        border: none;\n        border-radius: 15px;\n        cursor: pointer;\n        font-size: 24px;\n        font-family: Montserrat, serif;\n        font-weight: 400;\n        color: #44617c;\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        transition: background-color 0.3s, transform 0.3s;\n    }\n\n    .informacoes {\n        display: flex;\n    }\n\n    .ativo {\n        transform: rotate(180deg) scale(1.1);\n    }\n\n    .redes {\n        display: flex;\n        gap: 20px;\n        border-top: 1px solid #44617c;\n        align-items: flex-end;\n        justify-content: center;\n        flex-direction: row;\n        padding-top: 20px;\n\n        & a:hover img {\n            transform: scale(1.1);\n            cursor: pointer;\n        }\n\n        & a:active img {\n            transform: scale(0.9);\n        }\n\n        & img {\n            transition: transform 0.3s;\n        }\n\n\n    }\n\n    .ul-informacoes {\n        height: 750px;\n        margin-bottom: 10px;\n\n        & li {\n            color: #000;\n            font-family: Montserrat;\n            font-size: 24px;\n            font-style: normal;\n            font-weight: 400;\n            line-height: 35px; /* 145.833% */\n\n            word-wrap: break-word;\n            padding-top: 20px;\n        }\n    }\n\n"])));function Nr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}const Rr=function(){var e,t,r=(e=(0,n.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,s,a=[],l=!0,d=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(a.push(r.value),a.length!==n);l=!0);}catch(e){d=!0,o=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(d)throw o}}return a}}(e,t)||function(e,n){if(e){if("string"==typeof e)return Nr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Nr(e,n):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];return(0,or.jsx)(jr,{children:(0,or.jsxs)("div",{className:"dv-nossa-equipe",children:[(0,or.jsx)("div",{className:"dv-ne-titulo",children:"Nossa Equipe"}),(0,or.jsxs)("div",{className:"dv-ne-conteudo",children:[(0,or.jsxs)("div",{className:"dv-ne-co-card",children:[(0,or.jsx)("div",{className:"dv-ne-co-cd-foto",children:(0,or.jsx)("img",{src:"imagens/equipe01.png"})}),(0,or.jsxs)("div",{className:"dv-ne-co-cd-nom",children:["Alexandre França ",(0,or.jsx)("span",{children:"Fraga"})]}),(0,or.jsx)("div",{className:"dv-ne-co-cd-btn",children:(0,or.jsx)("button",{className:"btn-ne-co-cd ".concat(o?"ativo":""),onClick:function(){return i(!o)},children:(0,or.jsx)("img",{src:"imagens/setaDropdown.png"})})}),o&&(0,or.jsxs)("div",{className:"informacoes-equipe",children:[(0,or.jsxs)("ul",{className:"ul-informacoes",children:[(0,or.jsx)("li",{children:"Engenheiro Eletrônico pela Escola Politécnica da Universidade de São Paulo, atua há mais de 35 anos no mercado financeiro."}),(0,or.jsx)("li",{children:"Desempenhou funções em diversas áreas em instituições como Lloyds Bank Plc, Banco Pecúnia, Banco Paulista e SOCOPA – Sociedade Corretora Paulista, onde foi Diretor de Marketing e Recursos (Tecnológicos, Humanos e Materiais)"}),(0,or.jsx)("li",{children:"Sócio Fundador da PVR Capital, atualmente é responsável pelas Áreas Financeira e de Risco e Compliance."})]}),(0,or.jsxs)("div",{className:"redes",children:[(0,or.jsx)("div",{className:"linkedin",children:(0,or.jsx)("a",{children:(0,or.jsx)("img",{src:"imagens/linkedin.png"})})}),(0,or.jsx)("div",{className:"email",children:(0,or.jsx)("a",{children:(0,or.jsx)("img",{src:"imagens/e-mail.png"})})})]})]})]}),(0,or.jsxs)("div",{className:"dv-ne-co-card",children:[(0,or.jsx)("div",{className:"dv-ne-co-cd-foto",children:(0,or.jsx)("img",{src:"imagens/equipe02.png"})}),(0,or.jsxs)("div",{className:"dv-ne-co-cd-nom",children:[(0,or.jsx)("span",{children:"PEDRO"})," Thomazoni"]}),(0,or.jsx)("div",{className:"dv-ne-co-cd-btn",children:(0,or.jsx)("button",{className:"btn-ne-co-cd ".concat(o?"ativo":""),onClick:function(){return i(!o)},children:(0,or.jsx)("img",{src:"imagens/setaDropdown.png"})})}),o&&(0,or.jsxs)("div",{className:"informacoes-equipe",children:[(0,or.jsxs)("ul",{className:"ul-informacoes",children:[(0,or.jsx)("li",{children:"Economista pela FEA-USP, com especialização em mercado de capitais internacionais pela Oxford University."}),(0,or.jsx)("li",{children:"Experiência de mais de 30 anos no gerenciamento de carteiras de ações, mercados de capitais, fusões e aquisições e private equity."}),(0,or.jsx)("li",{children:"Trabalhou em instituições financeiras importantes como Citibank NA, Lloyds TSB plc, Banco Votorantim, Latin Finance e EP Capital."}),(0,or.jsx)("li",{children:"Na PVR Capital Assessoria, é responsável pela área de M&A."})]}),(0,or.jsxs)("div",{className:"redes",children:[(0,or.jsx)("div",{className:"linkedin",children:(0,or.jsx)("a",{children:(0,or.jsx)("img",{src:"imagens/linkedin.png"})})}),(0,or.jsx)("div",{className:"email",children:(0,or.jsx)("a",{children:(0,or.jsx)("img",{src:"imagens/e-mail.png"})})})]})]})]}),(0,or.jsxs)("div",{className:"dv-ne-co-card",children:[(0,or.jsx)("div",{className:"dv-ne-co-cd-foto",children:(0,or.jsx)("img",{src:"imagens/usuario.jpg"})}),(0,or.jsxs)("div",{className:"dv-ne-co-cd-nom",children:[(0,or.jsx)("span",{children:"RODRIGO"})," da Silva Perez"]}),(0,or.jsx)("div",{className:"dv-ne-co-cd-btn",children:(0,or.jsx)("button",{className:"btn-ne-co-cd ".concat(o?"ativo":""),onClick:function(){return i(!o)},children:(0,or.jsx)("img",{src:"imagens/setaDropdown.png"})})}),o&&(0,or.jsxs)("div",{className:"informacoes-equipe",children:[(0,or.jsxs)("ul",{className:"ul-informacoes",children:[(0,or.jsx)("li",{children:"Economista pelo INSPER | Instituto de Ensino e Pesquisa, com especialização em Investiment Banking pela Saint Paul."}),(0,or.jsx)("li",{children:"Iniciou sua trajetória no time de Investment Banking do Santander Brasil, atuando em M&A e ECM. Trabalhou em boutiques de assessoria financeira de renome, tais como Pulsar Invest, SRB e EP Capital, tendo se especializado em M&A e planejamento estratégico."})]}),(0,or.jsxs)("div",{className:"redes",children:[(0,or.jsx)("div",{className:"linkedin",children:(0,or.jsx)("a",{children:(0,or.jsx)("img",{src:"imagens/linkedin.png"})})}),(0,or.jsx)("div",{className:"email",children:(0,or.jsx)("a",{children:(0,or.jsx)("img",{src:"imagens/e-mail.png"})})})]})]})]})]})]})})};var Fr,Wr,Tr,Br=er.header(Fr||(Fr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n\n\n\n    .dv-contato {\n        background: #f5f5f5;\n        padding: 50px 150px;\n    }\n\n    .dv-co-titulo {\n        color: #44617c;\n        font-size: 40px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 700;\n        word-wrap: break-word;\n    }\n\n    .dv-co-conteudo {\n        display: flex;\n        gap: 50px;\n        padding-top: 50px;\n    }\n\n    .dv-co-co-mapa {\n        width: 50%;\n        display: flex;\n        justify-content: flex-end;\n    }\n\n    .Mapa-contato {\n        width: 489px;\n    }\n\n\n    .dv-co-co-info {\n        display: flex;\n        flex-direction: column;\n        gap: 50px;\n    }\n\n    .dv-co-co-in-item {\n        display: flex;\n        gap: 20px;\n    }\n\n    .dv-co-co-in-icone {\n        height: 50px;\n    }\n\n    .dv-co-co-in-texto {\n        color: #44617c;\n        font-size: 24px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        word-wrap: break-word;\n    }\n"])));function zr(e){return zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zr(e)}function Vr(e,n,t){return(n=function(e){var n=function(e,n){if("object"!=zr(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=zr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==zr(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Jr(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Hr=(Tr||(Tr=1,Wr=function(e,n,t,r,o,i,s,a){if(!e){var l;if(void 0===n)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var d=[t,r,o,i,s,a],c=0;(l=new Error(n.replace(/%s/g,(function(){return d[c++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}),Wr),Gr=Jr(Hr),$r=(0,n.createContext)(null);function Qr(e){google.maps.event.removeListener(e)}function qr(){(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).forEach(Qr)}function Xr(e){var{updaterMap:n,eventMap:t,prevProps:r,nextProps:o,instance:i}=e,s=function(e,n,t){var r,o,i,s=(r=t,o=function(t,r,o){return"function"==typeof e[o]&&t.push(google.maps.event.addListener(n,r,e[o])),t},i=[],Object.keys(r).reduce((function(e,n){return o(e,r[n],n)}),i));return s}(o,i,t);return function(e,n,t,r){var o,i,s={};o=e,i=(e,o)=>{var i=t[o];i!==n[o]&&(s[o]=i,e(r,i))},Object.keys(o).forEach((e=>i(o[e],e)))}(n,r,o,i),s}var Zr={onDblClick:"dblclick",onDragEnd:"dragend",onDragStart:"dragstart",onMapTypeIdChanged:"maptypeid_changed",onMouseMove:"mousemove",onMouseOut:"mouseout",onMouseOver:"mouseover",onMouseDown:"mousedown",onMouseUp:"mouseup",onRightClick:"rightclick",onTilesLoaded:"tilesloaded",onBoundsChanged:"bounds_changed",onCenterChanged:"center_changed",onClick:"click",onDrag:"drag",onHeadingChanged:"heading_changed",onIdle:"idle",onProjectionChanged:"projection_changed",onResize:"resize",onTiltChanged:"tilt_changed",onZoomChanged:"zoom_changed"},Yr={extraMapTypes(e,n){n.forEach((function(n,t){e.mapTypes.set(String(t),n)}))},center(e,n){e.setCenter(n)},clickableIcons(e,n){e.setClickableIcons(n)},heading(e,n){e.setHeading(n)},mapTypeId(e,n){e.setMapTypeId(n)},options(e,n){e.setOptions(n)},streetView(e,n){e.setStreetView(n)},tilt(e,n){e.setTilt(n)},zoom(e,n){e.setZoom(n)}};(0,n.memo)((function(e){var{children:t,options:r,id:o,mapContainerStyle:i,mapContainerClassName:s,center:a,onClick:l,onDblClick:d,onDrag:c,onDragEnd:u,onDragStart:m,onMouseMove:p,onMouseOut:f,onMouseOver:g,onMouseDown:h,onMouseUp:v,onRightClick:C,onCenterChanged:b,onLoad:y,onUnmount:S}=e,[P,x]=(0,n.useState)(null),E=(0,n.useRef)(null),[A,O]=(0,n.useState)(null),[D,_]=(0,n.useState)(null),[w,L]=(0,n.useState)(null),[I,k]=(0,n.useState)(null),[U,M]=(0,n.useState)(null),[j,N]=(0,n.useState)(null),[R,F]=(0,n.useState)(null),[W,T]=(0,n.useState)(null),[B,z]=(0,n.useState)(null),[V,J]=(0,n.useState)(null),[H,G]=(0,n.useState)(null),[$,Q]=(0,n.useState)(null);return(0,n.useEffect)((()=>{r&&null!==P&&P.setOptions(r)}),[P,r]),(0,n.useEffect)((()=>{null!==P&&void 0!==a&&P.setCenter(a)}),[P,a]),(0,n.useEffect)((()=>{P&&d&&(null!==D&&google.maps.event.removeListener(D),_(google.maps.event.addListener(P,"dblclick",d)))}),[d]),(0,n.useEffect)((()=>{P&&u&&(null!==w&&google.maps.event.removeListener(w),L(google.maps.event.addListener(P,"dragend",u)))}),[u]),(0,n.useEffect)((()=>{P&&m&&(null!==I&&google.maps.event.removeListener(I),k(google.maps.event.addListener(P,"dragstart",m)))}),[m]),(0,n.useEffect)((()=>{P&&h&&(null!==U&&google.maps.event.removeListener(U),M(google.maps.event.addListener(P,"mousedown",h)))}),[h]),(0,n.useEffect)((()=>{P&&p&&(null!==j&&google.maps.event.removeListener(j),N(google.maps.event.addListener(P,"mousemove",p)))}),[p]),(0,n.useEffect)((()=>{P&&f&&(null!==R&&google.maps.event.removeListener(R),F(google.maps.event.addListener(P,"mouseout",f)))}),[f]),(0,n.useEffect)((()=>{P&&g&&(null!==W&&google.maps.event.removeListener(W),T(google.maps.event.addListener(P,"mouseover",g)))}),[g]),(0,n.useEffect)((()=>{P&&v&&(null!==B&&google.maps.event.removeListener(B),z(google.maps.event.addListener(P,"mouseup",v)))}),[v]),(0,n.useEffect)((()=>{P&&C&&(null!==V&&google.maps.event.removeListener(V),J(google.maps.event.addListener(P,"rightclick",C)))}),[C]),(0,n.useEffect)((()=>{P&&l&&(null!==H&&google.maps.event.removeListener(H),G(google.maps.event.addListener(P,"click",l)))}),[l]),(0,n.useEffect)((()=>{P&&c&&(null!==$&&google.maps.event.removeListener($),Q(google.maps.event.addListener(P,"drag",c)))}),[c]),(0,n.useEffect)((()=>{P&&b&&(null!==A&&google.maps.event.removeListener(A),O(google.maps.event.addListener(P,"center_changed",b)))}),[l]),(0,n.useEffect)((()=>{var e=null===E.current?null:new google.maps.Map(E.current,r);return x(e),null!==e&&y&&y(e),()=>{null!==e&&S&&S(e)}}),[]),(0,or.jsx)("div",{id:o,ref:E,style:i,className:s,children:(0,or.jsx)($r.Provider,{value:P,children:null!==P?t:null})})}));class Kr extends n.PureComponent{constructor(){super(...arguments),Vr(this,"state",{map:null}),Vr(this,"registeredEvents",[]),Vr(this,"mapRef",null),Vr(this,"getInstance",(()=>null===this.mapRef?null:new google.maps.Map(this.mapRef,this.props.options))),Vr(this,"panTo",(e=>{var n=this.getInstance();n&&n.panTo(e)})),Vr(this,"setMapCallback",(()=>{null!==this.state.map&&this.props.onLoad&&this.props.onLoad(this.state.map)})),Vr(this,"getRef",(e=>{this.mapRef=e}))}componentDidMount(){var e=this.getInstance();this.registeredEvents=Xr({updaterMap:Yr,eventMap:Zr,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{map:e}}),this.setMapCallback)}componentDidUpdate(e){null!==this.state.map&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Yr,eventMap:Zr,prevProps:e,nextProps:this.props,instance:this.state.map}))}componentWillUnmount(){null!==this.state.map&&(this.props.onUnmount&&this.props.onUnmount(this.state.map),qr(this.registeredEvents))}render(){return(0,or.jsx)("div",{id:this.props.id,ref:this.getRef,style:this.props.mapContainerStyle,className:this.props.mapContainerClassName,children:(0,or.jsx)($r.Provider,{value:this.state.map,children:null!==this.state.map?this.props.children:null})})}}function eo(e,n,t,r,o,i,s){try{var a=e[i](s),l=a.value}catch(e){return void t(e)}a.done?n(l):Promise.resolve(l).then(r,o)}function no(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var i=e.apply(n,t);function s(e){eo(i,r,o,s,a,"next",e)}function a(e){eo(i,r,o,s,a,"throw",e)}s(void 0)}))}}function to(e){var{googleMapsApiKey:n,googleMapsClientId:t,version:r="weekly",language:o,region:i,libraries:s,channel:a,mapIds:l,authReferrerPolicy:d}=e,c=[];return Gr(n&&t||!(n&&t),"You need to specify either googleMapsApiKey or googleMapsClientId for @react-google-maps/api load script to work. You cannot use both at the same time."),n?c.push("key=".concat(n)):t&&c.push("client=".concat(t)),r&&c.push("v=".concat(r)),o&&c.push("language=".concat(o)),i&&c.push("region=".concat(i)),s&&s.length&&c.push("libraries=".concat(s.sort().join(","))),a&&c.push("channel=".concat(a)),l&&l.length&&c.push("map_ids=".concat(l.join(","))),d&&c.push("auth_referrer_policy=".concat(d)),c.push("loading=async"),c.push("callback=initMap"),"https://maps.googleapis.com/maps/api/js?".concat(c.join("&"))}var ro="undefined"!=typeof document;function oo(e){var{url:n,id:t,nonce:r}=e;return ro?new Promise((function(e,o){var i=document.getElementById(t),s=window;if(i){var a=i.getAttribute("data-state");if(i.src===n&&"error"!==a){if("ready"===a)return e(t);var l=s.initMap,d=i.onerror;return s.initMap=function(){l&&l(),e(t)},void(i.onerror=function(e){d&&d(e),o(e)})}i.remove()}var c=document.createElement("script");c.type="text/javascript",c.src=n,c.id=t,c.async=!0,c.nonce=r||"",c.onerror=function(e){c.setAttribute("data-state","error"),o(e)},s.initMap=function(){c.setAttribute("data-state","ready"),e(t)},document.head.appendChild(c)})).catch((e=>{throw console.error("injectScript error: ",e),e})):Promise.reject(new Error("document is undefined"))}function io(e){var n=e.href;return!((!n||0!==n.indexOf("https://fonts.googleapis.com/css?family=Roboto")&&0!==n.indexOf("https://fonts.googleapis.com/css?family=Google+Sans+Text"))&&("style"===e.tagName.toLowerCase()&&e.styleSheet&&e.styleSheet.cssText&&0===e.styleSheet.cssText.replace("\r\n","").indexOf(".gm-style")?(e.styleSheet.cssText="",0):"style"===e.tagName.toLowerCase()&&e.innerHTML&&0===e.innerHTML.replace("\r\n","").indexOf(".gm-style")?(e.innerHTML="",0):"style"!==e.tagName.toLowerCase()||e.styleSheet||e.innerHTML))}function so(){var e=document.getElementsByTagName("head")[0];if(e){var n=e.insertBefore.bind(e);e.insertBefore=function(t,r){return io(t)||Reflect.apply(n,e,[t,r]),t};var t=e.appendChild.bind(e);e.appendChild=function(n){return io(n)||Reflect.apply(t,e,[n]),n}}}var ao=!1;function lo(){return(0,or.jsx)("div",{children:"Loading..."})}var co,uo={id:"script-loader",version:"weekly"};class mo extends n.PureComponent{constructor(){super(...arguments),Vr(this,"check",(0,n.createRef)()),Vr(this,"state",{loaded:!1}),Vr(this,"cleanupCallback",(()=>{delete window.google.maps,this.injectScript()})),Vr(this,"isCleaningUp",no((function*(){return new Promise((function(e){if(ao){if(ro)var n=window.setInterval((function(){ao||(window.clearInterval(n),e())}),1)}else e()}))}))),Vr(this,"cleanup",(()=>{ao=!0;var e=document.getElementById(this.props.id);e&&e.parentNode&&e.parentNode.removeChild(e),Array.prototype.slice.call(document.getElementsByTagName("script")).filter((function(e){return"string"==typeof e.src&&e.src.includes("maps.googleapis")})).forEach((function(e){e.parentNode&&e.parentNode.removeChild(e)})),Array.prototype.slice.call(document.getElementsByTagName("link")).filter((function(e){return"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Google+Sans"===e.href})).forEach((function(e){e.parentNode&&e.parentNode.removeChild(e)})),Array.prototype.slice.call(document.getElementsByTagName("style")).filter((function(e){return void 0!==e.innerText&&e.innerText.length>0&&e.innerText.includes(".gm-")})).forEach((function(e){e.parentNode&&e.parentNode.removeChild(e)}))})),Vr(this,"injectScript",(()=>{this.props.preventGoogleFontsLoading&&so(),Gr(!!this.props.id,'LoadScript requires "id" prop to be a string: %s',this.props.id),oo({id:this.props.id,nonce:this.props.nonce,url:to(this.props)}).then((()=>{this.props.onLoad&&this.props.onLoad(),this.setState((function(){return{loaded:!0}}))})).catch((e=>{this.props.onError&&this.props.onError(e),console.error("\n          There has been an Error with loading Google Maps API script, please check that you provided correct google API key (".concat(this.props.googleMapsApiKey||"-",") or Client ID (").concat(this.props.googleMapsClientId||"-",") to <LoadScript />\n          Otherwise it is a Network issue.\n        "))}))}))}componentDidMount(){if(ro){if(window.google&&window.google.maps&&!ao)return void console.error("google api is already presented");this.isCleaningUp().then(this.injectScript).catch((function(e){console.error("Error at injecting script after cleaning up: ",e)}))}}componentDidUpdate(e){this.props.libraries!==e.libraries&&console.warn("Performance warning! LoadScript has been reloaded unintentionally! You should not pass `libraries` prop as new array. Please keep an array of libraries as static class property for Components and PureComponents, or just a const variable outside of component, or somewhere in config files or ENV variables"),ro&&e.language!==this.props.language&&(this.cleanup(),this.setState((function(){return{loaded:!1}}),this.cleanupCallback))}componentWillUnmount(){ro&&(this.cleanup(),window.setTimeout((()=>{this.check.current||(delete window.google,ao=!1)}),1),this.props.onUnmount&&this.props.onUnmount())}render(){return(0,or.jsxs)(or.Fragment,{children:[(0,or.jsx)("div",{ref:this.check}),this.state.loaded?this.props.children:this.props.loadingElement||(0,or.jsx)(lo,{})]})}}function po(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(n.includes(r))continue;t[r]=e[r]}return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.includes(t)||{}.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}Vr(mo,"defaultProps",uo);var fo,go=["loadingElement","onLoad","onError","onUnmount","children"],ho=(0,or.jsx)(lo,{});function vo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Co(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?vo(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):vo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}(0,n.memo)((function(e){var{loadingElement:t,onLoad:r,onError:o,onUnmount:i,children:s}=e,a=po(e,go),{isLoaded:l,loadError:d}=function(e){var{id:t=uo.id,version:r=uo.version,nonce:o,googleMapsApiKey:i,googleMapsClientId:s,language:a,region:l,libraries:d,preventGoogleFontsLoading:c,channel:u,mapIds:m,authReferrerPolicy:p}=e,f=(0,n.useRef)(!1),[g,h]=(0,n.useState)(!1),[v,C]=(0,n.useState)(void 0);(0,n.useEffect)((function(){return f.current=!0,()=>{f.current=!1}}),[]),(0,n.useEffect)((function(){ro&&c&&so()}),[c]),(0,n.useEffect)((function(){g&&Gr(!!window.google,"useLoadScript was marked as loaded, but window.google is not present. Something went wrong.")}),[g]);var b=to({version:r,googleMapsApiKey:i,googleMapsClientId:s,language:a,region:l,libraries:d,channel:u,mapIds:m,authReferrerPolicy:p});(0,n.useEffect)((function(){function e(){f.current&&(h(!0),co=b)}ro&&(window.google&&window.google.maps&&co===b?e():oo({id:t,url:b,nonce:o}).then(e).catch((function(e){f.current&&C(e),console.warn("\n        There has been an Error with loading Google Maps API script, please check that you provided correct google API key (".concat(i||"-",") or Client ID (").concat(s||"-",")\n        Otherwise it is a Network issue.\n      ")),console.error(e)})))}),[t,b,o]);var y=(0,n.useRef)();return(0,n.useEffect)((function(){y.current&&d!==y.current&&console.warn("Performance warning! LoadScript has been reloaded unintentionally! You should not pass `libraries` prop as new array. Please keep an array of libraries as static class property for Components and PureComponents, or just a const variable outside of component, or somewhere in config files or ENV variables"),y.current=d}),[d]),{isLoaded:g,loadError:v,url:b}}(a);return(0,n.useEffect)((function(){l&&"function"==typeof r&&r()}),[l,r]),(0,n.useEffect)((function(){d&&"function"==typeof o&&o(d)}),[d,o]),(0,n.useEffect)((function(){return()=>{i&&i()}}),[i]),l?s:t||ho})),"function"==typeof SuppressedError&&SuppressedError,function(e){e[e.INITIALIZED=0]="INITIALIZED",e[e.LOADING=1]="LOADING",e[e.SUCCESS=2]="SUCCESS",e[e.FAILURE=3]="FAILURE"}(fo||(fo={}));var bo={},yo={options(e,n){e.setOptions(n)}};(0,n.memo)((function(e){var{options:t,onLoad:r,onUnmount:o}=e,i=(0,n.useContext)($r),[s,a]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==s&&s.setMap(i)}),[i]),(0,n.useEffect)((()=>{t&&null!==s&&s.setOptions(t)}),[s,t]),(0,n.useEffect)((()=>{var e=new google.maps.TrafficLayer(Co(Co({},t),{},{map:i}));return a(e),r&&r(e),()=>{null!==s&&(o&&o(s),s.setMap(null))}}),[]),null}));class So extends n.PureComponent{constructor(){super(...arguments),Vr(this,"state",{trafficLayer:null}),Vr(this,"setTrafficLayerCallback",(()=>{null!==this.state.trafficLayer&&this.props.onLoad&&this.props.onLoad(this.state.trafficLayer)})),Vr(this,"registeredEvents",[])}componentDidMount(){var e=new google.maps.TrafficLayer(Co(Co({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:yo,eventMap:bo,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{trafficLayer:e}}),this.setTrafficLayerCallback)}componentDidUpdate(e){null!==this.state.trafficLayer&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:yo,eventMap:bo,prevProps:e,nextProps:this.props,instance:this.state.trafficLayer}))}componentWillUnmount(){null!==this.state.trafficLayer&&(this.props.onUnmount&&this.props.onUnmount(this.state.trafficLayer),qr(this.registeredEvents),this.state.trafficLayer.setMap(null))}render(){return null}}Vr(So,"contextType",$r),(0,n.memo)((function(e){var{onLoad:t,onUnmount:r}=e,o=(0,n.useContext)($r),[i,s]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==i&&i.setMap(o)}),[o]),(0,n.useEffect)((()=>{var e=new google.maps.BicyclingLayer;return s(e),e.setMap(o),t&&t(e),()=>{null!==e&&(r&&r(e),e.setMap(null))}}),[]),null}));class Po extends n.PureComponent{constructor(){super(...arguments),Vr(this,"state",{bicyclingLayer:null}),Vr(this,"setBicyclingLayerCallback",(()=>{null!==this.state.bicyclingLayer&&(this.state.bicyclingLayer.setMap(this.context),this.props.onLoad&&this.props.onLoad(this.state.bicyclingLayer))}))}componentDidMount(){var e=new google.maps.BicyclingLayer;this.setState((()=>({bicyclingLayer:e})),this.setBicyclingLayerCallback)}componentWillUnmount(){null!==this.state.bicyclingLayer&&(this.props.onUnmount&&this.props.onUnmount(this.state.bicyclingLayer),this.state.bicyclingLayer.setMap(null))}render(){return null}}Vr(Po,"contextType",$r),(0,n.memo)((function(e){var{onLoad:t,onUnmount:r}=e,o=(0,n.useContext)($r),[i,s]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==i&&i.setMap(o)}),[o]),(0,n.useEffect)((()=>{var e=new google.maps.TransitLayer;return s(e),e.setMap(o),t&&t(e),()=>{null!==i&&(r&&r(i),i.setMap(null))}}),[]),null}));class xo extends n.PureComponent{constructor(){super(...arguments),Vr(this,"state",{transitLayer:null}),Vr(this,"setTransitLayerCallback",(()=>{null!==this.state.transitLayer&&(this.state.transitLayer.setMap(this.context),this.props.onLoad&&this.props.onLoad(this.state.transitLayer))}))}componentDidMount(){var e=new google.maps.TransitLayer;this.setState((function(){return{transitLayer:e}}),this.setTransitLayerCallback)}componentWillUnmount(){null!==this.state.transitLayer&&(this.props.onUnmount&&this.props.onUnmount(this.state.transitLayer),this.state.transitLayer.setMap(null))}render(){return null}}function Eo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ao(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Eo(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Eo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(xo,"contextType",$r);var Oo={onCircleComplete:"circlecomplete",onMarkerComplete:"markercomplete",onOverlayComplete:"overlaycomplete",onPolygonComplete:"polygoncomplete",onPolylineComplete:"polylinecomplete",onRectangleComplete:"rectanglecomplete"},Do={drawingMode(e,n){e.setDrawingMode(n)},options(e,n){e.setOptions(n)}};(0,n.memo)((function(e){var{options:t,drawingMode:r,onCircleComplete:o,onMarkerComplete:i,onOverlayComplete:s,onPolygonComplete:a,onPolylineComplete:l,onRectangleComplete:d,onLoad:c,onUnmount:u}=e,m=(0,n.useContext)($r),[p,f]=(0,n.useState)(null),[g,h]=(0,n.useState)(null),[v,C]=(0,n.useState)(null),[b,y]=(0,n.useState)(null),[S,P]=(0,n.useState)(null),[x,E]=(0,n.useState)(null),[A,O]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==p&&p.setMap(m)}),[m]),(0,n.useEffect)((()=>{t&&null!==p&&p.setOptions(t)}),[p,t]),(0,n.useEffect)((()=>{null!==p&&p.setDrawingMode(null!=r?r:null)}),[p,r]),(0,n.useEffect)((()=>{p&&o&&(null!==g&&google.maps.event.removeListener(g),h(google.maps.event.addListener(p,"circlecomplete",o)))}),[p,o]),(0,n.useEffect)((()=>{p&&i&&(null!==v&&google.maps.event.removeListener(v),C(google.maps.event.addListener(p,"markercomplete",i)))}),[p,i]),(0,n.useEffect)((()=>{p&&s&&(null!==b&&google.maps.event.removeListener(b),y(google.maps.event.addListener(p,"overlaycomplete",s)))}),[p,s]),(0,n.useEffect)((()=>{p&&a&&(null!==S&&google.maps.event.removeListener(S),P(google.maps.event.addListener(p,"polygoncomplete",a)))}),[p,a]),(0,n.useEffect)((()=>{p&&l&&(null!==x&&google.maps.event.removeListener(x),E(google.maps.event.addListener(p,"polylinecomplete",l)))}),[p,l]),(0,n.useEffect)((()=>{p&&d&&(null!==A&&google.maps.event.removeListener(A),O(google.maps.event.addListener(p,"rectanglecomplete",d)))}),[p,d]),(0,n.useEffect)((()=>{Gr(!!google.maps.drawing,"Did you include prop libraries={['drawing']} in the URL? %s",google.maps.drawing);var e=new google.maps.drawing.DrawingManager(Ao(Ao({},t),{},{map:m}));return r&&e.setDrawingMode(r),o&&h(google.maps.event.addListener(e,"circlecomplete",o)),i&&C(google.maps.event.addListener(e,"markercomplete",i)),s&&y(google.maps.event.addListener(e,"overlaycomplete",s)),a&&P(google.maps.event.addListener(e,"polygoncomplete",a)),l&&E(google.maps.event.addListener(e,"polylinecomplete",l)),d&&O(google.maps.event.addListener(e,"rectanglecomplete",d)),f(e),c&&c(e),()=>{null!==p&&(g&&google.maps.event.removeListener(g),v&&google.maps.event.removeListener(v),b&&google.maps.event.removeListener(b),S&&google.maps.event.removeListener(S),x&&google.maps.event.removeListener(x),A&&google.maps.event.removeListener(A),u&&u(p),p.setMap(null))}}),[]),null}));class _o extends n.PureComponent{constructor(e){super(e),Vr(this,"registeredEvents",[]),Vr(this,"state",{drawingManager:null}),Vr(this,"setDrawingManagerCallback",(()=>{null!==this.state.drawingManager&&this.props.onLoad&&this.props.onLoad(this.state.drawingManager)})),Gr(!!google.maps.drawing,"Did you include prop libraries={['drawing']} in the URL? %s",google.maps.drawing)}componentDidMount(){var e=new google.maps.drawing.DrawingManager(Ao(Ao({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:Do,eventMap:Oo,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{drawingManager:e}}),this.setDrawingManagerCallback)}componentDidUpdate(e){null!==this.state.drawingManager&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Do,eventMap:Oo,prevProps:e,nextProps:this.props,instance:this.state.drawingManager}))}componentWillUnmount(){null!==this.state.drawingManager&&(this.props.onUnmount&&this.props.onUnmount(this.state.drawingManager),qr(this.registeredEvents),this.state.drawingManager.setMap(null))}render(){return null}}function wo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Lo(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?wo(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):wo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(_o,"contextType",$r);var Io={onAnimationChanged:"animation_changed",onClick:"click",onClickableChanged:"clickable_changed",onCursorChanged:"cursor_changed",onDblClick:"dblclick",onDrag:"drag",onDragEnd:"dragend",onDraggableChanged:"draggable_changed",onDragStart:"dragstart",onFlatChanged:"flat_changed",onIconChanged:"icon_changed",onMouseDown:"mousedown",onMouseOut:"mouseout",onMouseOver:"mouseover",onMouseUp:"mouseup",onPositionChanged:"position_changed",onRightClick:"rightclick",onShapeChanged:"shape_changed",onTitleChanged:"title_changed",onVisibleChanged:"visible_changed",onZindexChanged:"zindex_changed"},ko={animation(e,n){e.setAnimation(n)},clickable(e,n){e.setClickable(n)},cursor(e,n){e.setCursor(n)},draggable(e,n){e.setDraggable(n)},icon(e,n){e.setIcon(n)},label(e,n){e.setLabel(n)},map(e,n){e.setMap(n)},opacity(e,n){e.setOpacity(n)},options(e,n){e.setOptions(n)},position(e,n){e.setPosition(n)},shape(e,n){e.setShape(n)},title(e,n){e.setTitle(n)},visible(e,n){e.setVisible(n)},zIndex(e,n){e.setZIndex(n)}},Uo={};(0,n.memo)((function(e){var{position:t,options:r,clusterer:o,noClustererRedraw:i,children:s,draggable:a,visible:l,animation:d,clickable:c,cursor:u,icon:m,label:p,opacity:f,shape:g,title:h,zIndex:v,onClick:C,onDblClick:b,onDrag:y,onDragEnd:S,onDragStart:P,onMouseOut:x,onMouseOver:E,onMouseUp:A,onMouseDown:O,onRightClick:D,onClickableChanged:_,onCursorChanged:w,onAnimationChanged:L,onDraggableChanged:I,onFlatChanged:k,onIconChanged:U,onPositionChanged:M,onShapeChanged:j,onTitleChanged:N,onVisibleChanged:R,onZindexChanged:F,onLoad:W,onUnmount:T}=e,B=(0,n.useContext)($r),[z,V]=(0,n.useState)(null),[J,H]=(0,n.useState)(null),[G,$]=(0,n.useState)(null),[Q,q]=(0,n.useState)(null),[X,Z]=(0,n.useState)(null),[Y,K]=(0,n.useState)(null),[ee,ne]=(0,n.useState)(null),[te,re]=(0,n.useState)(null),[oe,ie]=(0,n.useState)(null),[se,ae]=(0,n.useState)(null),[le,de]=(0,n.useState)(null),[ce,ue]=(0,n.useState)(null),[me,pe]=(0,n.useState)(null),[fe,ge]=(0,n.useState)(null),[he,ve]=(0,n.useState)(null),[Ce,be]=(0,n.useState)(null),[ye,Se]=(0,n.useState)(null),[Pe,xe]=(0,n.useState)(null),[Ee,Ae]=(0,n.useState)(null),[Oe,De]=(0,n.useState)(null),[_e,we]=(0,n.useState)(null),[Le,Ie]=(0,n.useState)(null);(0,n.useEffect)((()=>{null!==z&&z.setMap(B)}),[B]),(0,n.useEffect)((()=>{void 0!==r&&null!==z&&z.setOptions(r)}),[z,r]),(0,n.useEffect)((()=>{void 0!==a&&null!==z&&z.setDraggable(a)}),[z,a]),(0,n.useEffect)((()=>{t&&null!==z&&z.setPosition(t)}),[z,t]),(0,n.useEffect)((()=>{void 0!==l&&null!==z&&z.setVisible(l)}),[z,l]),(0,n.useEffect)((()=>{null==z||z.setAnimation(d)}),[z,d]),(0,n.useEffect)((()=>{z&&void 0!==c&&z.setClickable(c)}),[z,c]),(0,n.useEffect)((()=>{z&&void 0!==u&&z.setCursor(u)}),[z,u]),(0,n.useEffect)((()=>{z&&void 0!==m&&z.setIcon(m)}),[z,m]),(0,n.useEffect)((()=>{z&&void 0!==p&&z.setLabel(p)}),[z,p]),(0,n.useEffect)((()=>{z&&void 0!==f&&z.setOpacity(f)}),[z,f]),(0,n.useEffect)((()=>{z&&void 0!==g&&z.setShape(g)}),[z,g]),(0,n.useEffect)((()=>{z&&void 0!==h&&z.setTitle(h)}),[z,h]),(0,n.useEffect)((()=>{z&&void 0!==v&&z.setZIndex(v)}),[z,v]),(0,n.useEffect)((()=>{z&&b&&(null!==J&&google.maps.event.removeListener(J),H(google.maps.event.addListener(z,"dblclick",b)))}),[b]),(0,n.useEffect)((()=>{z&&S&&(null!==G&&google.maps.event.removeListener(G),$(google.maps.event.addListener(z,"dragend",S)))}),[S]),(0,n.useEffect)((()=>{z&&P&&(null!==Q&&google.maps.event.removeListener(Q),q(google.maps.event.addListener(z,"dragstart",P)))}),[P]),(0,n.useEffect)((()=>{z&&O&&(null!==X&&google.maps.event.removeListener(X),Z(google.maps.event.addListener(z,"mousedown",O)))}),[O]),(0,n.useEffect)((()=>{z&&x&&(null!==Y&&google.maps.event.removeListener(Y),K(google.maps.event.addListener(z,"mouseout",x)))}),[x]),(0,n.useEffect)((()=>{z&&E&&(null!==ee&&google.maps.event.removeListener(ee),ne(google.maps.event.addListener(z,"mouseover",E)))}),[E]),(0,n.useEffect)((()=>{z&&A&&(null!==te&&google.maps.event.removeListener(te),re(google.maps.event.addListener(z,"mouseup",A)))}),[A]),(0,n.useEffect)((()=>{z&&D&&(null!==oe&&google.maps.event.removeListener(oe),ie(google.maps.event.addListener(z,"rightclick",D)))}),[D]),(0,n.useEffect)((()=>{z&&C&&(null!==se&&google.maps.event.removeListener(se),ae(google.maps.event.addListener(z,"click",C)))}),[C]),(0,n.useEffect)((()=>{z&&y&&(null!==le&&google.maps.event.removeListener(le),de(google.maps.event.addListener(z,"drag",y)))}),[y]),(0,n.useEffect)((()=>{z&&_&&(null!==ce&&google.maps.event.removeListener(ce),ue(google.maps.event.addListener(z,"clickable_changed",_)))}),[_]),(0,n.useEffect)((()=>{z&&w&&(null!==me&&google.maps.event.removeListener(me),pe(google.maps.event.addListener(z,"cursor_changed",w)))}),[w]),(0,n.useEffect)((()=>{z&&L&&(null!==fe&&google.maps.event.removeListener(fe),ge(google.maps.event.addListener(z,"animation_changed",L)))}),[L]),(0,n.useEffect)((()=>{z&&I&&(null!==he&&google.maps.event.removeListener(he),ve(google.maps.event.addListener(z,"draggable_changed",I)))}),[I]),(0,n.useEffect)((()=>{z&&k&&(null!==Ce&&google.maps.event.removeListener(Ce),be(google.maps.event.addListener(z,"flat_changed",k)))}),[k]),(0,n.useEffect)((()=>{z&&U&&(null!==ye&&google.maps.event.removeListener(ye),Se(google.maps.event.addListener(z,"icon_changed",U)))}),[U]),(0,n.useEffect)((()=>{z&&M&&(null!==Pe&&google.maps.event.removeListener(Pe),xe(google.maps.event.addListener(z,"position_changed",M)))}),[M]),(0,n.useEffect)((()=>{z&&j&&(null!==Ee&&google.maps.event.removeListener(Ee),Ae(google.maps.event.addListener(z,"shape_changed",j)))}),[j]),(0,n.useEffect)((()=>{z&&N&&(null!==Oe&&google.maps.event.removeListener(Oe),De(google.maps.event.addListener(z,"title_changed",N)))}),[N]),(0,n.useEffect)((()=>{z&&R&&(null!==_e&&google.maps.event.removeListener(_e),we(google.maps.event.addListener(z,"visible_changed",R)))}),[R]),(0,n.useEffect)((()=>{z&&F&&(null!==Le&&google.maps.event.removeListener(Le),Ie(google.maps.event.addListener(z,"zindex_changed",F)))}),[F]),(0,n.useEffect)((()=>{var e=Lo(Lo(Lo({},r||Uo),o?Uo:{map:B}),{},{position:t}),n=new google.maps.Marker(e);return o?o.addMarker(n,!!i):n.setMap(B),t&&n.setPosition(t),void 0!==l&&n.setVisible(l),void 0!==a&&n.setDraggable(a),void 0!==c&&n.setClickable(c),"string"==typeof u&&n.setCursor(u),m&&n.setIcon(m),void 0!==p&&n.setLabel(p),void 0!==f&&n.setOpacity(f),g&&n.setShape(g),"string"==typeof h&&n.setTitle(h),"number"==typeof v&&n.setZIndex(v),b&&H(google.maps.event.addListener(n,"dblclick",b)),S&&$(google.maps.event.addListener(n,"dragend",S)),P&&q(google.maps.event.addListener(n,"dragstart",P)),O&&Z(google.maps.event.addListener(n,"mousedown",O)),x&&K(google.maps.event.addListener(n,"mouseout",x)),E&&ne(google.maps.event.addListener(n,"mouseover",E)),A&&re(google.maps.event.addListener(n,"mouseup",A)),D&&ie(google.maps.event.addListener(n,"rightclick",D)),C&&ae(google.maps.event.addListener(n,"click",C)),y&&de(google.maps.event.addListener(n,"drag",y)),_&&ue(google.maps.event.addListener(n,"clickable_changed",_)),w&&pe(google.maps.event.addListener(n,"cursor_changed",w)),L&&ge(google.maps.event.addListener(n,"animation_changed",L)),I&&ve(google.maps.event.addListener(n,"draggable_changed",I)),k&&be(google.maps.event.addListener(n,"flat_changed",k)),U&&Se(google.maps.event.addListener(n,"icon_changed",U)),M&&xe(google.maps.event.addListener(n,"position_changed",M)),j&&Ae(google.maps.event.addListener(n,"shape_changed",j)),N&&De(google.maps.event.addListener(n,"title_changed",N)),R&&we(google.maps.event.addListener(n,"visible_changed",R)),F&&Ie(google.maps.event.addListener(n,"zindex_changed",F)),V(n),W&&W(n),()=>{null!==J&&google.maps.event.removeListener(J),null!==G&&google.maps.event.removeListener(G),null!==Q&&google.maps.event.removeListener(Q),null!==X&&google.maps.event.removeListener(X),null!==Y&&google.maps.event.removeListener(Y),null!==ee&&google.maps.event.removeListener(ee),null!==te&&google.maps.event.removeListener(te),null!==oe&&google.maps.event.removeListener(oe),null!==se&&google.maps.event.removeListener(se),null!==ce&&google.maps.event.removeListener(ce),null!==me&&google.maps.event.removeListener(me),null!==fe&&google.maps.event.removeListener(fe),null!==he&&google.maps.event.removeListener(he),null!==Ce&&google.maps.event.removeListener(Ce),null!==ye&&google.maps.event.removeListener(ye),null!==Pe&&google.maps.event.removeListener(Pe),null!==Oe&&google.maps.event.removeListener(Oe),null!==_e&&google.maps.event.removeListener(_e),null!==Le&&google.maps.event.removeListener(Le),T&&T(n),o?o.removeMarker(n,!!i):n&&n.setMap(null)}}),[]);var ke=(0,n.useMemo)((()=>s?n.Children.map(s,(e=>{if(!(0,n.isValidElement)(e))return e;var t=e;return(0,n.cloneElement)(t,{anchor:z})})):null),[s,z]);return(0,or.jsx)(or.Fragment,{children:ke})||null}));class Mo extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[])}componentDidMount(){var e=this;return no((function*(){var n=Lo(Lo(Lo({},e.props.options||Uo),e.props.clusterer?Uo:{map:e.context}),{},{position:e.props.position});e.marker=new google.maps.Marker(n),e.props.clusterer?e.props.clusterer.addMarker(e.marker,!!e.props.noClustererRedraw):e.marker.setMap(e.context),e.registeredEvents=Xr({updaterMap:ko,eventMap:Io,prevProps:{},nextProps:e.props,instance:e.marker}),e.props.onLoad&&e.props.onLoad(e.marker)}))()}componentDidUpdate(e){this.marker&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:ko,eventMap:Io,prevProps:e,nextProps:this.props,instance:this.marker}))}componentWillUnmount(){this.marker&&(this.props.onUnmount&&this.props.onUnmount(this.marker),qr(this.registeredEvents),this.props.clusterer?this.props.clusterer.removeMarker(this.marker,!!this.props.noClustererRedraw):this.marker&&this.marker.setMap(null))}render(){return(this.props.children?n.Children.map(this.props.children,(e=>{if(!(0,n.isValidElement)(e))return e;var t=e;return(0,n.cloneElement)(t,{anchor:this.marker})})):null)||null}}Vr(Mo,"contextType",$r);var jo=function(){function e(n,t){n.getClusterer().extend(e,google.maps.OverlayView),this.cluster=n,this.clusterClassName=this.cluster.getClusterer().getClusterClass(),this.className=this.clusterClassName,this.styles=t,this.center=void 0,this.div=null,this.sums=null,this.visible=!1,this.boundsChangedListener=null,this.url="",this.height=0,this.width=0,this.anchorText=[0,0],this.anchorIcon=[0,0],this.textColor="black",this.textSize=11,this.textDecoration="none",this.fontWeight="bold",this.fontStyle="normal",this.fontFamily="Arial,sans-serif",this.backgroundPosition="0 0",this.cMouseDownInCluster=null,this.cDraggingMapByCluster=null,this.timeOut=null,this.setMap(n.getMap()),this.onBoundsChanged=this.onBoundsChanged.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onClick=this.onClick.bind(this),this.onMouseOver=this.onMouseOver.bind(this),this.onMouseOut=this.onMouseOut.bind(this),this.onAdd=this.onAdd.bind(this),this.onRemove=this.onRemove.bind(this),this.draw=this.draw.bind(this),this.hide=this.hide.bind(this),this.show=this.show.bind(this),this.useStyle=this.useStyle.bind(this),this.setCenter=this.setCenter.bind(this),this.getPosFromLatLng=this.getPosFromLatLng.bind(this)}return e.prototype.onBoundsChanged=function(){this.cDraggingMapByCluster=this.cMouseDownInCluster},e.prototype.onMouseDown=function(){this.cMouseDownInCluster=!0,this.cDraggingMapByCluster=!1},e.prototype.onClick=function(e){if(this.cMouseDownInCluster=!1,!this.cDraggingMapByCluster){var n=this.cluster.getClusterer();if(google.maps.event.trigger(n,"click",this.cluster),google.maps.event.trigger(n,"clusterclick",this.cluster),n.getZoomOnClick()){var t=n.getMaxZoom(),r=this.cluster.getBounds(),o=n.getMap();null!==o&&"fitBounds"in o&&o.fitBounds(r),this.timeOut=window.setTimeout((function(){var e=n.getMap();if(null!==e){"fitBounds"in e&&e.fitBounds(r);var o=e.getZoom()||0;null!==t&&o>t&&e.setZoom(t+1)}}),100)}e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation()}},e.prototype.onMouseOver=function(){google.maps.event.trigger(this.cluster.getClusterer(),"mouseover",this.cluster)},e.prototype.onMouseOut=function(){google.maps.event.trigger(this.cluster.getClusterer(),"mouseout",this.cluster)},e.prototype.onAdd=function(){var e;this.div=document.createElement("div"),this.div.className=this.className,this.visible&&this.show(),null===(e=this.getPanes())||void 0===e||e.overlayMouseTarget.appendChild(this.div);var n=this.getMap();null!==n&&(this.boundsChangedListener=google.maps.event.addListener(n,"bounds_changed",this.onBoundsChanged),this.div.addEventListener("mousedown",this.onMouseDown),this.div.addEventListener("click",this.onClick),this.div.addEventListener("mouseover",this.onMouseOver),this.div.addEventListener("mouseout",this.onMouseOut))},e.prototype.onRemove=function(){this.div&&this.div.parentNode&&(this.hide(),null!==this.boundsChangedListener&&google.maps.event.removeListener(this.boundsChangedListener),this.div.removeEventListener("mousedown",this.onMouseDown),this.div.removeEventListener("click",this.onClick),this.div.removeEventListener("mouseover",this.onMouseOver),this.div.removeEventListener("mouseout",this.onMouseOut),this.div.parentNode.removeChild(this.div),null!==this.timeOut&&(window.clearTimeout(this.timeOut),this.timeOut=null),this.div=null)},e.prototype.draw=function(){if(this.visible&&null!==this.div&&this.center){var e=this.getPosFromLatLng(this.center);this.div.style.top=null!==e?"".concat(e.y,"px"):"0",this.div.style.left=null!==e?"".concat(e.x,"px"):"0"}},e.prototype.hide=function(){this.div&&(this.div.style.display="none"),this.visible=!1},e.prototype.show=function(){var e,n,t,r,o,i;if(this.div&&this.center){var s=null===this.sums||void 0===this.sums.title||""===this.sums.title?this.cluster.getClusterer().getTitle():this.sums.title,a=this.backgroundPosition.split(" "),l=parseInt((null===(e=a[0])||void 0===e?void 0:e.replace(/^\s+|\s+$/g,""))||"0",10),d=parseInt((null===(n=a[1])||void 0===n?void 0:n.replace(/^\s+|\s+$/g,""))||"0",10),c=this.getPosFromLatLng(this.center);this.div.className=this.className,this.div.setAttribute("style","cursor: pointer; position: absolute; top: ".concat(null!==c?"".concat(c.y,"px"):"0","; left: ").concat(null!==c?"".concat(c.x,"px"):"0","; width: ").concat(this.width,"px; height: ").concat(this.height,"px; "));var u=document.createElement("img");u.alt=s,u.src=this.url,u.width=this.width,u.height=this.height,u.setAttribute("style","position: absolute; top: ".concat(d,"px; left: ").concat(l,"px")),this.cluster.getClusterer().enableRetinaIcons||(u.style.clip="rect(-".concat(d,"px, -").concat(l+this.width,"px, -").concat(d+this.height,", -").concat(l,")"));var m=document.createElement("div");m.setAttribute("style","position: absolute; top: ".concat(this.anchorText[0],"px; left: ").concat(this.anchorText[1],"px; color: ").concat(this.textColor,"; font-size: ").concat(this.textSize,"px; font-family: ").concat(this.fontFamily,"; font-weight: ").concat(this.fontWeight,"; fontStyle: ").concat(this.fontStyle,"; text-decoration: ").concat(this.textDecoration,"; text-align: center; width: ").concat(this.width,"px; line-height: ").concat(this.height,"px")),(null===(t=this.sums)||void 0===t?void 0:t.text)&&(m.innerText="".concat(null===(r=this.sums)||void 0===r?void 0:r.text)),(null===(o=this.sums)||void 0===o?void 0:o.html)&&(m.innerHTML="".concat(null===(i=this.sums)||void 0===i?void 0:i.html)),this.div.innerHTML="",this.div.appendChild(u),this.div.appendChild(m),this.div.title=s,this.div.style.display=""}this.visible=!0},e.prototype.useStyle=function(e){this.sums=e;var n=this.cluster.getClusterer().getStyles(),t=n[Math.min(n.length-1,Math.max(0,e.index-1))];t&&(this.url=t.url,this.height=t.height,this.width=t.width,t.className&&(this.className="".concat(this.clusterClassName," ").concat(t.className)),this.anchorText=t.anchorText||[0,0],this.anchorIcon=t.anchorIcon||[this.height/2,this.width/2],this.textColor=t.textColor||"black",this.textSize=t.textSize||11,this.textDecoration=t.textDecoration||"none",this.fontWeight=t.fontWeight||"bold",this.fontStyle=t.fontStyle||"normal",this.fontFamily=t.fontFamily||"Arial,sans-serif",this.backgroundPosition=t.backgroundPosition||"0 0")},e.prototype.setCenter=function(e){this.center=e},e.prototype.getPosFromLatLng=function(e){var n=this.getProjection().fromLatLngToDivPixel(e);return null!==n&&(n.x-=this.anchorIcon[1],n.y-=this.anchorIcon[0]),n},e}(),No=function(){function e(e){this.markerClusterer=e,this.map=this.markerClusterer.getMap(),this.gridSize=this.markerClusterer.getGridSize(),this.minClusterSize=this.markerClusterer.getMinimumClusterSize(),this.averageCenter=this.markerClusterer.getAverageCenter(),this.markers=[],this.center=void 0,this.bounds=null,this.clusterIcon=new jo(this,this.markerClusterer.getStyles()),this.getSize=this.getSize.bind(this),this.getMarkers=this.getMarkers.bind(this),this.getCenter=this.getCenter.bind(this),this.getMap=this.getMap.bind(this),this.getClusterer=this.getClusterer.bind(this),this.getBounds=this.getBounds.bind(this),this.remove=this.remove.bind(this),this.addMarker=this.addMarker.bind(this),this.isMarkerInClusterBounds=this.isMarkerInClusterBounds.bind(this),this.calculateBounds=this.calculateBounds.bind(this),this.updateIcon=this.updateIcon.bind(this),this.isMarkerAlreadyAdded=this.isMarkerAlreadyAdded.bind(this)}return e.prototype.getSize=function(){return this.markers.length},e.prototype.getMarkers=function(){return this.markers},e.prototype.getCenter=function(){return this.center},e.prototype.getMap=function(){return this.map},e.prototype.getClusterer=function(){return this.markerClusterer},e.prototype.getBounds=function(){for(var e=new google.maps.LatLngBounds(this.center,this.center),n=0,t=this.getMarkers();n<t.length;n++){var r=t[n].getPosition();r&&e.extend(r)}return e},e.prototype.remove=function(){this.clusterIcon.setMap(null),this.markers=[],delete this.markers},e.prototype.addMarker=function(e){var n,t;if(this.isMarkerAlreadyAdded(e))return!1;if(this.center){if(this.averageCenter&&(t=e.getPosition())){var r=this.markers.length+1;this.center=new google.maps.LatLng((this.center.lat()*(r-1)+t.lat())/r,(this.center.lng()*(r-1)+t.lng())/r),this.calculateBounds()}}else(t=e.getPosition())&&(this.center=t,this.calculateBounds());e.isAdded=!0,this.markers.push(e);var o=this.markers.length,i=this.markerClusterer.getMaxZoom(),s=null===(n=this.map)||void 0===n?void 0:n.getZoom();if(null!==i&&void 0!==s&&s>i)e.getMap()!==this.map&&e.setMap(this.map);else if(o<this.minClusterSize)e.getMap()!==this.map&&e.setMap(this.map);else if(o===this.minClusterSize)for(var a=0,l=this.markers;a<l.length;a++)l[a].setMap(null);else e.setMap(null);return!0},e.prototype.isMarkerInClusterBounds=function(e){if(null!==this.bounds){var n=e.getPosition();if(n)return this.bounds.contains(n)}return!1},e.prototype.calculateBounds=function(){this.bounds=this.markerClusterer.getExtendedBounds(new google.maps.LatLngBounds(this.center,this.center))},e.prototype.updateIcon=function(){var e,n=this.markers.length,t=this.markerClusterer.getMaxZoom(),r=null===(e=this.map)||void 0===e?void 0:e.getZoom();null!==t&&void 0!==r&&r>t||n<this.minClusterSize?this.clusterIcon.hide():(this.center&&this.clusterIcon.setCenter(this.center),this.clusterIcon.useStyle(this.markerClusterer.getCalculator()(this.markers,this.markerClusterer.getStyles().length)),this.clusterIcon.show())},e.prototype.isMarkerAlreadyAdded=function(e){if(this.markers.includes)return this.markers.includes(e);for(var n=0;n<this.markers.length;n++)if(e===this.markers[n])return!0;return!1},e}();function Ro(e,n){var t=e.length,r=t.toString().length,o=Math.min(r,n);return{text:t.toString(),index:o,title:""}}var Fo=[53,56,66,78,90],Wo=function(){function e(n,t,r){void 0===t&&(t=[]),void 0===r&&(r={}),this.getMinimumClusterSize=this.getMinimumClusterSize.bind(this),this.setMinimumClusterSize=this.setMinimumClusterSize.bind(this),this.getEnableRetinaIcons=this.getEnableRetinaIcons.bind(this),this.setEnableRetinaIcons=this.setEnableRetinaIcons.bind(this),this.addToClosestCluster=this.addToClosestCluster.bind(this),this.getImageExtension=this.getImageExtension.bind(this),this.setImageExtension=this.setImageExtension.bind(this),this.getExtendedBounds=this.getExtendedBounds.bind(this),this.getAverageCenter=this.getAverageCenter.bind(this),this.setAverageCenter=this.setAverageCenter.bind(this),this.getTotalClusters=this.getTotalClusters.bind(this),this.fitMapToMarkers=this.fitMapToMarkers.bind(this),this.getIgnoreHidden=this.getIgnoreHidden.bind(this),this.setIgnoreHidden=this.setIgnoreHidden.bind(this),this.getClusterClass=this.getClusterClass.bind(this),this.setClusterClass=this.setClusterClass.bind(this),this.getTotalMarkers=this.getTotalMarkers.bind(this),this.getZoomOnClick=this.getZoomOnClick.bind(this),this.setZoomOnClick=this.setZoomOnClick.bind(this),this.getBatchSizeIE=this.getBatchSizeIE.bind(this),this.setBatchSizeIE=this.setBatchSizeIE.bind(this),this.createClusters=this.createClusters.bind(this),this.onZoomChanged=this.onZoomChanged.bind(this),this.getImageSizes=this.getImageSizes.bind(this),this.setImageSizes=this.setImageSizes.bind(this),this.getCalculator=this.getCalculator.bind(this),this.setCalculator=this.setCalculator.bind(this),this.removeMarkers=this.removeMarkers.bind(this),this.resetViewport=this.resetViewport.bind(this),this.getImagePath=this.getImagePath.bind(this),this.setImagePath=this.setImagePath.bind(this),this.pushMarkerTo=this.pushMarkerTo.bind(this),this.removeMarker=this.removeMarker.bind(this),this.clearMarkers=this.clearMarkers.bind(this),this.setupStyles=this.setupStyles.bind(this),this.getGridSize=this.getGridSize.bind(this),this.setGridSize=this.setGridSize.bind(this),this.getClusters=this.getClusters.bind(this),this.getMaxZoom=this.getMaxZoom.bind(this),this.setMaxZoom=this.setMaxZoom.bind(this),this.getMarkers=this.getMarkers.bind(this),this.addMarkers=this.addMarkers.bind(this),this.getStyles=this.getStyles.bind(this),this.setStyles=this.setStyles.bind(this),this.addMarker=this.addMarker.bind(this),this.onRemove=this.onRemove.bind(this),this.getTitle=this.getTitle.bind(this),this.setTitle=this.setTitle.bind(this),this.repaint=this.repaint.bind(this),this.onIdle=this.onIdle.bind(this),this.redraw=this.redraw.bind(this),this.onAdd=this.onAdd.bind(this),this.draw=this.draw.bind(this),this.extend=this.extend.bind(this),this.extend(e,google.maps.OverlayView),this.markers=[],this.clusters=[],this.listeners=[],this.activeMap=null,this.ready=!1,this.gridSize=r.gridSize||60,this.minClusterSize=r.minimumClusterSize||2,this.maxZoom=r.maxZoom||null,this.styles=r.styles||[],this.title=r.title||"",this.zoomOnClick=!0,void 0!==r.zoomOnClick&&(this.zoomOnClick=r.zoomOnClick),this.averageCenter=!1,void 0!==r.averageCenter&&(this.averageCenter=r.averageCenter),this.ignoreHidden=!1,void 0!==r.ignoreHidden&&(this.ignoreHidden=r.ignoreHidden),this.enableRetinaIcons=!1,void 0!==r.enableRetinaIcons&&(this.enableRetinaIcons=r.enableRetinaIcons),this.imagePath=r.imagePath||"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",this.imageExtension=r.imageExtension||"png",this.imageSizes=r.imageSizes||Fo,this.calculator=r.calculator||Ro,this.batchSize=r.batchSize||2e3,this.batchSizeIE=r.batchSizeIE||500,this.clusterClass=r.clusterClass||"cluster",-1!==navigator.userAgent.toLowerCase().indexOf("msie")&&(this.batchSize=this.batchSizeIE),this.timerRefStatic=null,this.setupStyles(),this.addMarkers(t,!0),this.setMap(n)}return e.prototype.onZoomChanged=function(){var e,n;this.resetViewport(!1),(null===(e=this.getMap())||void 0===e?void 0:e.getZoom())!==(this.get("minZoom")||0)&&(null===(n=this.getMap())||void 0===n?void 0:n.getZoom())!==this.get("maxZoom")||google.maps.event.trigger(this,"idle")},e.prototype.onIdle=function(){this.redraw()},e.prototype.onAdd=function(){var e=this.getMap();this.activeMap=e,this.ready=!0,this.repaint(),null!==e&&(this.listeners=[google.maps.event.addListener(e,"zoom_changed",this.onZoomChanged),google.maps.event.addListener(e,"idle",this.onIdle)])},e.prototype.onRemove=function(){for(var e=0,n=this.markers;e<n.length;e++){var t=n[e];t.getMap()!==this.activeMap&&t.setMap(this.activeMap)}for(var r=0,o=this.clusters;r<o.length;r++)o[r].remove();this.clusters=[];for(var i=0,s=this.listeners;i<s.length;i++){var a=s[i];google.maps.event.removeListener(a)}this.listeners=[],this.activeMap=null,this.ready=!1},e.prototype.draw=function(){},e.prototype.getMap=function(){return null},e.prototype.getPanes=function(){return null},e.prototype.getProjection=function(){return{fromContainerPixelToLatLng:function(){return null},fromDivPixelToLatLng:function(){return null},fromLatLngToContainerPixel:function(){return null},fromLatLngToDivPixel:function(){return null},getVisibleRegion:function(){return null},getWorldWidth:function(){return 0}}},e.prototype.setMap=function(){},e.prototype.addListener=function(){return{remove:function(){}}},e.prototype.bindTo=function(){},e.prototype.get=function(){},e.prototype.notify=function(){},e.prototype.set=function(){},e.prototype.setValues=function(){},e.prototype.unbind=function(){},e.prototype.unbindAll=function(){},e.prototype.setupStyles=function(){if(!(this.styles.length>0))for(var e=0;e<this.imageSizes.length;e++)this.styles.push({url:"".concat(this.imagePath+(e+1),".").concat(this.imageExtension),height:this.imageSizes[e]||0,width:this.imageSizes[e]||0})},e.prototype.fitMapToMarkers=function(){for(var e=this.getMarkers(),n=new google.maps.LatLngBounds,t=0,r=e;t<r.length;t++){var o=r[t].getPosition();o&&n.extend(o)}var i=this.getMap();null!==i&&"fitBounds"in i&&i.fitBounds(n)},e.prototype.getGridSize=function(){return this.gridSize},e.prototype.setGridSize=function(e){this.gridSize=e},e.prototype.getMinimumClusterSize=function(){return this.minClusterSize},e.prototype.setMinimumClusterSize=function(e){this.minClusterSize=e},e.prototype.getMaxZoom=function(){return this.maxZoom},e.prototype.setMaxZoom=function(e){this.maxZoom=e},e.prototype.getStyles=function(){return this.styles},e.prototype.setStyles=function(e){this.styles=e},e.prototype.getTitle=function(){return this.title},e.prototype.setTitle=function(e){this.title=e},e.prototype.getZoomOnClick=function(){return this.zoomOnClick},e.prototype.setZoomOnClick=function(e){this.zoomOnClick=e},e.prototype.getAverageCenter=function(){return this.averageCenter},e.prototype.setAverageCenter=function(e){this.averageCenter=e},e.prototype.getIgnoreHidden=function(){return this.ignoreHidden},e.prototype.setIgnoreHidden=function(e){this.ignoreHidden=e},e.prototype.getEnableRetinaIcons=function(){return this.enableRetinaIcons},e.prototype.setEnableRetinaIcons=function(e){this.enableRetinaIcons=e},e.prototype.getImageExtension=function(){return this.imageExtension},e.prototype.setImageExtension=function(e){this.imageExtension=e},e.prototype.getImagePath=function(){return this.imagePath},e.prototype.setImagePath=function(e){this.imagePath=e},e.prototype.getImageSizes=function(){return this.imageSizes},e.prototype.setImageSizes=function(e){this.imageSizes=e},e.prototype.getCalculator=function(){return this.calculator},e.prototype.setCalculator=function(e){this.calculator=e},e.prototype.getBatchSizeIE=function(){return this.batchSizeIE},e.prototype.setBatchSizeIE=function(e){this.batchSizeIE=e},e.prototype.getClusterClass=function(){return this.clusterClass},e.prototype.setClusterClass=function(e){this.clusterClass=e},e.prototype.getMarkers=function(){return this.markers},e.prototype.getTotalMarkers=function(){return this.markers.length},e.prototype.getClusters=function(){return this.clusters},e.prototype.getTotalClusters=function(){return this.clusters.length},e.prototype.addMarker=function(e,n){this.pushMarkerTo(e),n||this.redraw()},e.prototype.addMarkers=function(e,n){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=e[t];r&&this.pushMarkerTo(r)}n||this.redraw()},e.prototype.pushMarkerTo=function(e){var n=this;e.getDraggable()&&google.maps.event.addListener(e,"dragend",(function(){n.ready&&(e.isAdded=!1,n.repaint())})),e.isAdded=!1,this.markers.push(e)},e.prototype.removeMarker_=function(e){var n=-1;if(this.markers.indexOf)n=this.markers.indexOf(e);else for(var t=0;t<this.markers.length;t++)if(e===this.markers[t]){n=t;break}return-1!==n&&(e.setMap(null),this.markers.splice(n,1),!0)},e.prototype.removeMarker=function(e,n){var t=this.removeMarker_(e);return!n&&t&&this.repaint(),t},e.prototype.removeMarkers=function(e,n){for(var t=!1,r=0,o=e;r<o.length;r++){var i=o[r];t=t||this.removeMarker_(i)}return!n&&t&&this.repaint(),t},e.prototype.clearMarkers=function(){this.resetViewport(!0),this.markers=[]},e.prototype.repaint=function(){var e=this.clusters.slice();this.clusters=[],this.resetViewport(!1),this.redraw(),setTimeout((function(){for(var n=0,t=e;n<t.length;n++)t[n].remove()}),0)},e.prototype.getExtendedBounds=function(e){var n=this.getProjection(),t=n.fromLatLngToDivPixel(new google.maps.LatLng(e.getNorthEast().lat(),e.getNorthEast().lng()));null!==t&&(t.x+=this.gridSize,t.y-=this.gridSize);var r=n.fromLatLngToDivPixel(new google.maps.LatLng(e.getSouthWest().lat(),e.getSouthWest().lng()));if(null!==r&&(r.x-=this.gridSize,r.y+=this.gridSize),null!==t){var o=n.fromDivPixelToLatLng(t);null!==o&&e.extend(o)}if(null!==r){var i=n.fromDivPixelToLatLng(r);null!==i&&e.extend(i)}return e},e.prototype.redraw=function(){this.createClusters(0)},e.prototype.resetViewport=function(e){for(var n=0,t=this.clusters;n<t.length;n++)t[n].remove();this.clusters=[];for(var r=0,o=this.markers;r<o.length;r++){var i=o[r];i.isAdded=!1,e&&i.setMap(null)}},e.prototype.distanceBetweenPoints=function(e,n){var t=(n.lat()-e.lat())*Math.PI/180,r=(n.lng()-e.lng())*Math.PI/180,o=Math.sin(t/2)*Math.sin(t/2)+Math.cos(e.lat()*Math.PI/180)*Math.cos(n.lat()*Math.PI/180)*Math.sin(r/2)*Math.sin(r/2);return 2*Math.atan2(Math.sqrt(o),Math.sqrt(1-o))*6371},e.prototype.isMarkerInBounds=function(e,n){var t=e.getPosition();return!!t&&n.contains(t)},e.prototype.addToClosestCluster=function(e){for(var n,t=4e4,r=null,o=0,i=this.clusters;o<i.length;o++){var s=(n=i[o]).getCenter(),a=e.getPosition();if(s&&a){var l=this.distanceBetweenPoints(s,a);l<t&&(t=l,r=n)}}r&&r.isMarkerInClusterBounds(e)?r.addMarker(e):((n=new No(this)).addMarker(e),this.clusters.push(n))},e.prototype.createClusters=function(e){var n=this;if(this.ready){0===e&&(google.maps.event.trigger(this,"clusteringbegin",this),null!==this.timerRefStatic&&(window.clearTimeout(this.timerRefStatic),delete this.timerRefStatic));for(var t=this.getMap(),r=(null!==t&&"getBounds"in t?t.getBounds():null),o=((null==t?void 0:t.getZoom())||0)>3?new google.maps.LatLngBounds(null==r?void 0:r.getSouthWest(),null==r?void 0:r.getNorthEast()):new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472,-178.48388434375),new google.maps.LatLng(-85.08136444384544,178.00048865625)),i=this.getExtendedBounds(o),s=Math.min(e+this.batchSize,this.markers.length),a=e;a<s;a++){var l=this.markers[a];l&&!l.isAdded&&this.isMarkerInBounds(l,i)&&(!this.ignoreHidden||this.ignoreHidden&&l.getVisible())&&this.addToClosestCluster(l)}if(s<this.markers.length)this.timerRefStatic=window.setTimeout((function(){n.createClusters(s)}),0);else{this.timerRefStatic=null,google.maps.event.trigger(this,"clusteringend",this);for(var d=0,c=this.clusters;d<c.length;d++)c[d].updateIcon()}}},e.prototype.extend=function(e,n){return function(e){for(var n in e.prototype){var t=n;this.prototype[t]=e.prototype[t]}return this}.apply(e,[n])},e}();function To(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}var Bo={onClick:"click",onClusteringBegin:"clusteringbegin",onClusteringEnd:"clusteringend",onMouseOut:"mouseout",onMouseOver:"mouseover"},zo={averageCenter(e,n){e.setAverageCenter(n)},batchSizeIE(e,n){e.setBatchSizeIE(n)},calculator(e,n){e.setCalculator(n)},clusterClass(e,n){e.setClusterClass(n)},enableRetinaIcons(e,n){e.setEnableRetinaIcons(n)},gridSize(e,n){e.setGridSize(n)},ignoreHidden(e,n){e.setIgnoreHidden(n)},imageExtension(e,n){e.setImageExtension(n)},imagePath(e,n){e.setImagePath(n)},imageSizes(e,n){e.setImageSizes(n)},maxZoom(e,n){e.setMaxZoom(n)},minimumClusterSize(e,n){e.setMinimumClusterSize(n)},styles(e,n){e.setStyles(n)},title(e,n){e.setTitle(n)},zoomOnClick(e,n){e.setZoomOnClick(n)}},Vo={};(0,n.memo)((function(e){var{children:t,options:r,averageCenter:o,batchSizeIE:i,calculator:s,clusterClass:a,enableRetinaIcons:l,gridSize:d,ignoreHidden:c,imageExtension:u,imagePath:m,imageSizes:p,maxZoom:f,minimumClusterSize:g,styles:h,title:v,zoomOnClick:C,onClick:b,onClusteringBegin:y,onClusteringEnd:S,onMouseOver:P,onMouseOut:x,onLoad:E,onUnmount:A}=e,[O,D]=(0,n.useState)(null),_=(0,n.useContext)($r),[w,L]=(0,n.useState)(null),[I,k]=(0,n.useState)(null),[U,M]=(0,n.useState)(null),[j,N]=(0,n.useState)(null),[R,F]=(0,n.useState)(null);return(0,n.useEffect)((()=>{O&&x&&(null!==j&&google.maps.event.removeListener(j),N(google.maps.event.addListener(O,Bo.onMouseOut,x)))}),[x]),(0,n.useEffect)((()=>{O&&P&&(null!==R&&google.maps.event.removeListener(R),F(google.maps.event.addListener(O,Bo.onMouseOver,P)))}),[P]),(0,n.useEffect)((()=>{O&&b&&(null!==w&&google.maps.event.removeListener(w),L(google.maps.event.addListener(O,Bo.onClick,b)))}),[b]),(0,n.useEffect)((()=>{O&&y&&(null!==I&&google.maps.event.removeListener(I),k(google.maps.event.addListener(O,Bo.onClusteringBegin,y)))}),[y]),(0,n.useEffect)((()=>{O&&S&&(null!==U&&google.maps.event.removeListener(U),k(google.maps.event.addListener(O,Bo.onClusteringEnd,S)))}),[S]),(0,n.useEffect)((()=>{void 0!==o&&null!==O&&zo.averageCenter(O,o)}),[O,o]),(0,n.useEffect)((()=>{void 0!==i&&null!==O&&zo.batchSizeIE(O,i)}),[O,i]),(0,n.useEffect)((()=>{void 0!==s&&null!==O&&zo.calculator(O,s)}),[O,s]),(0,n.useEffect)((()=>{void 0!==a&&null!==O&&zo.clusterClass(O,a)}),[O,a]),(0,n.useEffect)((()=>{void 0!==l&&null!==O&&zo.enableRetinaIcons(O,l)}),[O,l]),(0,n.useEffect)((()=>{void 0!==d&&null!==O&&zo.gridSize(O,d)}),[O,d]),(0,n.useEffect)((()=>{void 0!==c&&null!==O&&zo.ignoreHidden(O,c)}),[O,c]),(0,n.useEffect)((()=>{void 0!==u&&null!==O&&zo.imageExtension(O,u)}),[O,u]),(0,n.useEffect)((()=>{void 0!==m&&null!==O&&zo.imagePath(O,m)}),[O,m]),(0,n.useEffect)((()=>{void 0!==p&&null!==O&&zo.imageSizes(O,p)}),[O,p]),(0,n.useEffect)((()=>{void 0!==f&&null!==O&&zo.maxZoom(O,f)}),[O,f]),(0,n.useEffect)((()=>{void 0!==g&&null!==O&&zo.minimumClusterSize(O,g)}),[O,g]),(0,n.useEffect)((()=>{void 0!==h&&null!==O&&zo.styles(O,h)}),[O,h]),(0,n.useEffect)((()=>{void 0!==v&&null!==O&&zo.title(O,v)}),[O,v]),(0,n.useEffect)((()=>{void 0!==C&&null!==O&&zo.zoomOnClick(O,C)}),[O,C]),(0,n.useEffect)((()=>{if(_){var e=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?To(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):To(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},r||Vo),n=new Wo(_,[],e);return o&&zo.averageCenter(n,o),i&&zo.batchSizeIE(n,i),s&&zo.calculator(n,s),a&&zo.clusterClass(n,a),l&&zo.enableRetinaIcons(n,l),d&&zo.gridSize(n,d),c&&zo.ignoreHidden(n,c),u&&zo.imageExtension(n,u),m&&zo.imagePath(n,m),p&&zo.imageSizes(n,p),f&&zo.maxZoom(n,f),g&&zo.minimumClusterSize(n,g),h&&zo.styles(n,h),v&&zo.title(n,v),C&&zo.zoomOnClick(n,C),x&&N(google.maps.event.addListener(n,Bo.onMouseOut,x)),P&&F(google.maps.event.addListener(n,Bo.onMouseOver,P)),b&&L(google.maps.event.addListener(n,Bo.onClick,b)),y&&k(google.maps.event.addListener(n,Bo.onClusteringBegin,y)),S&&M(google.maps.event.addListener(n,Bo.onClusteringEnd,S)),D(n),E&&E(n),()=>{null!==j&&google.maps.event.removeListener(j),null!==R&&google.maps.event.removeListener(R),null!==w&&google.maps.event.removeListener(w),null!==I&&google.maps.event.removeListener(I),null!==U&&google.maps.event.removeListener(U),A&&A(n)}}}),[]),null!==O&&t(O)||null}));class Jo extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{markerClusterer:null}),Vr(this,"setClustererCallback",(()=>{null!==this.state.markerClusterer&&this.props.onLoad&&this.props.onLoad(this.state.markerClusterer)}))}componentDidMount(){if(this.context){var e=new Wo(this.context,[],this.props.options);this.registeredEvents=Xr({updaterMap:zo,eventMap:Bo,prevProps:{},nextProps:this.props,instance:e}),this.setState((()=>({markerClusterer:e})),this.setClustererCallback)}}componentDidUpdate(e){this.state.markerClusterer&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:zo,eventMap:Bo,prevProps:e,nextProps:this.props,instance:this.state.markerClusterer}))}componentWillUnmount(){null!==this.state.markerClusterer&&(this.props.onUnmount&&this.props.onUnmount(this.state.markerClusterer),qr(this.registeredEvents),this.state.markerClusterer.setMap(null))}render(){return null!==this.state.markerClusterer?this.props.children(this.state.markerClusterer):null}}function Ho(e){e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation()}Vr(Jo,"contextType",$r);var Go=function(){function e(n){void 0===n&&(n={}),this.getCloseClickHandler=this.getCloseClickHandler.bind(this),this.closeClickHandler=this.closeClickHandler.bind(this),this.createInfoBoxDiv=this.createInfoBoxDiv.bind(this),this.addClickHandler=this.addClickHandler.bind(this),this.getCloseBoxImg=this.getCloseBoxImg.bind(this),this.getBoxWidths=this.getBoxWidths.bind(this),this.setBoxStyle=this.setBoxStyle.bind(this),this.setPosition=this.setPosition.bind(this),this.getPosition=this.getPosition.bind(this),this.setOptions=this.setOptions.bind(this),this.setContent=this.setContent.bind(this),this.setVisible=this.setVisible.bind(this),this.getContent=this.getContent.bind(this),this.getVisible=this.getVisible.bind(this),this.setZIndex=this.setZIndex.bind(this),this.getZIndex=this.getZIndex.bind(this),this.onRemove=this.onRemove.bind(this),this.panBox=this.panBox.bind(this),this.extend=this.extend.bind(this),this.close=this.close.bind(this),this.draw=this.draw.bind(this),this.show=this.show.bind(this),this.hide=this.hide.bind(this),this.open=this.open.bind(this),this.extend(e,google.maps.OverlayView),this.content=n.content||"",this.disableAutoPan=n.disableAutoPan||!1,this.maxWidth=n.maxWidth||0,this.pixelOffset=n.pixelOffset||new google.maps.Size(0,0),this.position=n.position||new google.maps.LatLng(0,0),this.zIndex=n.zIndex||null,this.boxClass=n.boxClass||"infoBox",this.boxStyle=n.boxStyle||{},this.closeBoxMargin=n.closeBoxMargin||"2px",this.closeBoxURL=n.closeBoxURL||"http://www.google.com/intl/en_us/mapfiles/close.gif",""===n.closeBoxURL&&(this.closeBoxURL=""),this.infoBoxClearance=n.infoBoxClearance||new google.maps.Size(1,1),void 0===n.visible&&(void 0===n.isHidden?n.visible=!0:n.visible=!n.isHidden),this.isHidden=!n.visible,this.alignBottom=n.alignBottom||!1,this.pane=n.pane||"floatPane",this.enableEventPropagation=n.enableEventPropagation||!1,this.div=null,this.closeListener=null,this.moveListener=null,this.mapListener=null,this.contextListener=null,this.eventListeners=null,this.fixedWidthSet=null}return e.prototype.createInfoBoxDiv=function(){var e=this;if(!this.div){this.div=document.createElement("div"),this.setBoxStyle(),"string"==typeof this.content?this.div.innerHTML=this.getCloseBoxImg()+this.content:(this.div.innerHTML=this.getCloseBoxImg(),this.div.appendChild(this.content));var n=this.getPanes();if(null!==n&&n[this.pane].appendChild(this.div),this.addClickHandler(),this.div.style.width)this.fixedWidthSet=!0;else if(0!==this.maxWidth&&this.div.offsetWidth>this.maxWidth)this.div.style.width=this.maxWidth+"px",this.fixedWidthSet=!0;else{var t=this.getBoxWidths();this.div.style.width=this.div.offsetWidth-t.left-t.right+"px",this.fixedWidthSet=!1}if(this.panBox(this.disableAutoPan),!this.enableEventPropagation){this.eventListeners=[];for(var r=0,o=["mousedown","mouseover","mouseout","mouseup","click","dblclick","touchstart","touchend","touchmove"];r<o.length;r++){var i=o[r];this.eventListeners.push(google.maps.event.addListener(this.div,i,Ho))}this.eventListeners.push(google.maps.event.addListener(this.div,"mouseover",(function(){e.div&&(e.div.style.cursor="default")})))}this.contextListener=google.maps.event.addListener(this.div,"contextmenu",(function(n){n.returnValue=!1,n.preventDefault&&n.preventDefault(),e.enableEventPropagation||Ho(n)})),google.maps.event.trigger(this,"domready")}},e.prototype.getCloseBoxImg=function(){var e="";return""!==this.closeBoxURL&&(e='<img alt=""',e+=' aria-hidden="true"',e+=" src='"+this.closeBoxURL+"'",e+=" align=right",e+=" style='",e+=" position: relative;",e+=" cursor: pointer;",e+=" margin: "+this.closeBoxMargin+";",e+="'>"),e},e.prototype.addClickHandler=function(){this.closeListener=this.div&&this.div.firstChild&&""!==this.closeBoxURL?google.maps.event.addListener(this.div.firstChild,"click",this.getCloseClickHandler()):null},e.prototype.closeClickHandler=function(e){e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation(),google.maps.event.trigger(this,"closeclick"),this.close()},e.prototype.getCloseClickHandler=function(){return this.closeClickHandler},e.prototype.panBox=function(e){if(this.div&&!e){var n=this.getMap();if(n instanceof google.maps.Map){var t=0,r=0,o=n.getBounds();o&&!o.contains(this.position)&&n.setCenter(this.position);var i=n.getDiv(),s=i.offsetWidth,a=i.offsetHeight,l=this.pixelOffset.width,d=this.pixelOffset.height,c=this.div.offsetWidth,u=this.div.offsetHeight,m=this.infoBoxClearance.width,p=this.infoBoxClearance.height,f=this.getProjection().fromLatLngToContainerPixel(this.position);null!==f&&(f.x<-l+m?t=f.x+l-m:f.x+c+l+m>s&&(t=f.x+c+l+m-s),this.alignBottom?f.y<-d+p+u?r=f.y+d-p-u:f.y+d+p>a&&(r=f.y+d+p-a):f.y<-d+p?r=f.y+d-p:f.y+u+d+p>a&&(r=f.y+u+d+p-a)),0===t&&0===r||n.panBy(t,r)}}},e.prototype.setBoxStyle=function(){if(this.div){this.div.className=this.boxClass,this.div.style.cssText="";var e=this.boxStyle;for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(this.div.style[n]=e[n]);if(this.div.style.webkitTransform="translateZ(0)",void 0!==this.div.style.opacity&&""!==this.div.style.opacity){var t=parseFloat(this.div.style.opacity||"");this.div.style.msFilter='"progid:DXImageTransform.Microsoft.Alpha(Opacity='+100*t+')"',this.div.style.filter="alpha(opacity="+100*t+")"}this.div.style.position="absolute",this.div.style.visibility="hidden",null!==this.zIndex&&(this.div.style.zIndex=this.zIndex+""),this.div.style.overflow||(this.div.style.overflow="auto")}},e.prototype.getBoxWidths=function(){var e={top:0,bottom:0,left:0,right:0};if(!this.div)return e;if(document.defaultView){var n=this.div.ownerDocument,t=n&&n.defaultView?n.defaultView.getComputedStyle(this.div,""):null;t&&(e.top=parseInt(t.borderTopWidth||"",10)||0,e.bottom=parseInt(t.borderBottomWidth||"",10)||0,e.left=parseInt(t.borderLeftWidth||"",10)||0,e.right=parseInt(t.borderRightWidth||"",10)||0)}else if(document.documentElement.currentStyle){var r=this.div.currentStyle;r&&(e.top=parseInt(r.borderTopWidth||"",10)||0,e.bottom=parseInt(r.borderBottomWidth||"",10)||0,e.left=parseInt(r.borderLeftWidth||"",10)||0,e.right=parseInt(r.borderRightWidth||"",10)||0)}return e},e.prototype.onRemove=function(){this.div&&this.div.parentNode&&(this.div.parentNode.removeChild(this.div),this.div=null)},e.prototype.draw=function(){if(this.createInfoBoxDiv(),this.div){var e=this.getProjection().fromLatLngToDivPixel(this.position);null!==e&&(this.div.style.left=e.x+this.pixelOffset.width+"px",this.alignBottom?this.div.style.bottom=-(e.y+this.pixelOffset.height)+"px":this.div.style.top=e.y+this.pixelOffset.height+"px"),this.isHidden?this.div.style.visibility="hidden":this.div.style.visibility="visible"}},e.prototype.setOptions=function(e){void 0===e&&(e={}),void 0!==e.boxClass&&(this.boxClass=e.boxClass,this.setBoxStyle()),void 0!==e.boxStyle&&(this.boxStyle=e.boxStyle,this.setBoxStyle()),void 0!==e.content&&this.setContent(e.content),void 0!==e.disableAutoPan&&(this.disableAutoPan=e.disableAutoPan),void 0!==e.maxWidth&&(this.maxWidth=e.maxWidth),void 0!==e.pixelOffset&&(this.pixelOffset=e.pixelOffset),void 0!==e.alignBottom&&(this.alignBottom=e.alignBottom),void 0!==e.position&&this.setPosition(e.position),void 0!==e.zIndex&&this.setZIndex(e.zIndex),void 0!==e.closeBoxMargin&&(this.closeBoxMargin=e.closeBoxMargin),void 0!==e.closeBoxURL&&(this.closeBoxURL=e.closeBoxURL),void 0!==e.infoBoxClearance&&(this.infoBoxClearance=e.infoBoxClearance),void 0!==e.isHidden&&(this.isHidden=e.isHidden),void 0!==e.visible&&(this.isHidden=!e.visible),void 0!==e.enableEventPropagation&&(this.enableEventPropagation=e.enableEventPropagation),this.div&&this.draw()},e.prototype.setContent=function(e){this.content=e,this.div&&(this.closeListener&&(google.maps.event.removeListener(this.closeListener),this.closeListener=null),this.fixedWidthSet||(this.div.style.width=""),"string"==typeof e?this.div.innerHTML=this.getCloseBoxImg()+e:(this.div.innerHTML=this.getCloseBoxImg(),this.div.appendChild(e)),this.fixedWidthSet||(this.div.style.width=this.div.offsetWidth+"px","string"==typeof e?this.div.innerHTML=this.getCloseBoxImg()+e:(this.div.innerHTML=this.getCloseBoxImg(),this.div.appendChild(e))),this.addClickHandler()),google.maps.event.trigger(this,"content_changed")},e.prototype.setPosition=function(e){this.position=e,this.div&&this.draw(),google.maps.event.trigger(this,"position_changed")},e.prototype.setVisible=function(e){this.isHidden=!e,this.div&&(this.div.style.visibility=this.isHidden?"hidden":"visible")},e.prototype.setZIndex=function(e){this.zIndex=e,this.div&&(this.div.style.zIndex=e+""),google.maps.event.trigger(this,"zindex_changed")},e.prototype.getContent=function(){return this.content},e.prototype.getPosition=function(){return this.position},e.prototype.getZIndex=function(){return this.zIndex},e.prototype.getVisible=function(){return null!=this.getMap()&&!this.isHidden},e.prototype.show=function(){this.isHidden=!1,this.div&&(this.div.style.visibility="visible")},e.prototype.hide=function(){this.isHidden=!0,this.div&&(this.div.style.visibility="hidden")},e.prototype.open=function(e,n){var t=this;n&&(this.position=n.getPosition(),this.moveListener=google.maps.event.addListener(n,"position_changed",(function(){var e=n.getPosition();t.setPosition(e)})),this.mapListener=google.maps.event.addListener(n,"map_changed",(function(){t.setMap(n.map)}))),this.setMap(e),this.div&&this.panBox()},e.prototype.close=function(){if(this.closeListener&&(google.maps.event.removeListener(this.closeListener),this.closeListener=null),this.eventListeners){for(var e=0,n=this.eventListeners;e<n.length;e++){var t=n[e];google.maps.event.removeListener(t)}this.eventListeners=null}this.moveListener&&(google.maps.event.removeListener(this.moveListener),this.moveListener=null),this.mapListener&&(google.maps.event.removeListener(this.mapListener),this.mapListener=null),this.contextListener&&(google.maps.event.removeListener(this.contextListener),this.contextListener=null),this.setMap(null)},e.prototype.extend=function(e,n){return function(e){for(var n in e.prototype)Object.prototype.hasOwnProperty.call(this,n)||(this.prototype[n]=e.prototype[n]);return this}.apply(e,[n])},e}(),$o=["position"],Qo=["position"];function qo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Xo(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?qo(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):qo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var Zo,Yo,Ko={onCloseClick:"closeclick",onContentChanged:"content_changed",onDomReady:"domready",onPositionChanged:"position_changed",onZindexChanged:"zindex_changed"},ei={options(e,n){e.setOptions(n)},position(e,n){n instanceof google.maps.LatLng?e.setPosition(n):e.setPosition(new google.maps.LatLng(n.lat,n.lng))},visible(e,n){e.setVisible(n)},zIndex(e,n){e.setZIndex(n)}},ni={};(0,n.memo)((function(e){var{children:t,anchor:r,options:o,position:s,zIndex:a,onCloseClick:l,onDomReady:d,onContentChanged:c,onPositionChanged:u,onZindexChanged:m,onLoad:p,onUnmount:f}=e,g=(0,n.useContext)($r),[h,v]=(0,n.useState)(null),[C,b]=(0,n.useState)(null),[y,S]=(0,n.useState)(null),[P,x]=(0,n.useState)(null),[E,A]=(0,n.useState)(null),[O,D]=(0,n.useState)(null),_=(0,n.useRef)(null);return(0,n.useEffect)((()=>{g&&null!==h&&(h.close(),r?h.open(g,r):h.getPosition()&&h.open(g))}),[g,h,r]),(0,n.useEffect)((()=>{o&&null!==h&&h.setOptions(o)}),[h,o]),(0,n.useEffect)((()=>{if(s&&null!==h){var e=s instanceof google.maps.LatLng?s:new google.maps.LatLng(s.lat,s.lng);h.setPosition(e)}}),[s]),(0,n.useEffect)((()=>{"number"==typeof a&&null!==h&&h.setZIndex(a)}),[a]),(0,n.useEffect)((()=>{h&&l&&(null!==C&&google.maps.event.removeListener(C),b(google.maps.event.addListener(h,"closeclick",l)))}),[l]),(0,n.useEffect)((()=>{h&&d&&(null!==y&&google.maps.event.removeListener(y),S(google.maps.event.addListener(h,"domready",d)))}),[d]),(0,n.useEffect)((()=>{h&&c&&(null!==P&&google.maps.event.removeListener(P),x(google.maps.event.addListener(h,"content_changed",c)))}),[c]),(0,n.useEffect)((()=>{h&&u&&(null!==E&&google.maps.event.removeListener(E),A(google.maps.event.addListener(h,"position_changed",u)))}),[u]),(0,n.useEffect)((()=>{h&&m&&(null!==O&&google.maps.event.removeListener(O),D(google.maps.event.addListener(h,"zindex_changed",m)))}),[m]),(0,n.useEffect)((()=>{if(g){var e,n=o||ni,{position:t}=n,i=po(n,$o);!t||t instanceof google.maps.LatLng||(e=new google.maps.LatLng(t.lat,t.lng));var s=new Go(Xo(Xo({},i),e?{position:e}:{}));_.current=document.createElement("div"),v(s),l&&b(google.maps.event.addListener(s,"closeclick",l)),d&&S(google.maps.event.addListener(s,"domready",d)),c&&x(google.maps.event.addListener(s,"content_changed",c)),u&&A(google.maps.event.addListener(s,"position_changed",u)),m&&D(google.maps.event.addListener(s,"zindex_changed",m)),s.setContent(_.current),r?s.open(g,r):s.getPosition()?s.open(g):Gr(!1,"You must provide either an anchor or a position prop for <InfoBox>."),p&&p(s)}return()=>{null!==h&&(C&&google.maps.event.removeListener(C),P&&google.maps.event.removeListener(P),y&&google.maps.event.removeListener(y),E&&google.maps.event.removeListener(E),O&&google.maps.event.removeListener(O),f&&f(h),h.close())}}),[]),_.current?(0,i.createPortal)(n.Children.only(t),_.current):null}));class ti extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"containerElement",null),Vr(this,"state",{infoBox:null}),Vr(this,"open",((e,n)=>{n?null!==this.context&&e.open(this.context,n):e.getPosition()?null!==this.context&&e.open(this.context):Gr(!1,"You must provide either an anchor or a position prop for <InfoBox>.")})),Vr(this,"setInfoBoxCallback",(()=>{null!==this.state.infoBox&&null!==this.containerElement&&(this.state.infoBox.setContent(this.containerElement),this.open(this.state.infoBox,this.props.anchor),this.props.onLoad&&this.props.onLoad(this.state.infoBox))}))}componentDidMount(){var e,n=this.props.options||{},{position:t}=n,r=po(n,Qo);!t||t instanceof google.maps.LatLng||(e=new google.maps.LatLng(t.lat,t.lng));var o=new Go(Xo(Xo({},r),e?{position:e}:{}));this.containerElement=document.createElement("div"),this.registeredEvents=Xr({updaterMap:ei,eventMap:Ko,prevProps:{},nextProps:this.props,instance:o}),this.setState({infoBox:o},this.setInfoBoxCallback)}componentDidUpdate(e){var{infoBox:n}=this.state;null!==n&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:ei,eventMap:Ko,prevProps:e,nextProps:this.props,instance:n}))}componentWillUnmount(){var{onUnmount:e}=this.props,{infoBox:n}=this.state;null!==n&&(e&&e(n),qr(this.registeredEvents),n.close())}render(){return this.containerElement?(0,i.createPortal)(n.Children.only(this.props.children),this.containerElement):null}}Vr(ti,"contextType",$r);var ri=(Yo||(Yo=1,Zo=function e(n,t){if(n===t)return!0;if(n&&t&&"object"==typeof n&&"object"==typeof t){if(n.constructor!==t.constructor)return!1;var r,o,i;if(Array.isArray(n)){if((r=n.length)!=t.length)return!1;for(o=r;0!=o--;)if(!e(n[o],t[o]))return!1;return!0}if(n.constructor===RegExp)return n.source===t.source&&n.flags===t.flags;if(n.valueOf!==Object.prototype.valueOf)return n.valueOf()===t.valueOf();if(n.toString!==Object.prototype.toString)return n.toString()===t.toString();if((r=(i=Object.keys(n)).length)!==Object.keys(t).length)return!1;for(o=r;0!=o--;)if(!Object.prototype.hasOwnProperty.call(t,i[o]))return!1;for(o=r;0!=o--;){var s=i[o];if(!e(n[s],t[s]))return!1}return!0}return n!=n&&t!=t}),Zo),oi=Jr(ri),ii=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];class si{static from(e){if(!(e instanceof ArrayBuffer))throw new Error("Data must be an instance of ArrayBuffer.");var[n,t]=new Uint8Array(e,0,2);if(219!==n)throw new Error("Data does not appear to be in a KDBush format.");var r=t>>4;if(1!==r)throw new Error("Got v".concat(r," data when expected v").concat(1,"."));var o=ii[15&t];if(!o)throw new Error("Unrecognized array type.");var[i]=new Uint16Array(e,2,1),[s]=new Uint32Array(e,4,1);return new si(s,i,o,e)}constructor(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:64,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Float64Array,r=arguments.length>3?arguments[3]:void 0;if(isNaN(e)||e<0)throw new Error("Unpexpected numItems value: ".concat(e,"."));this.numItems=+e,this.nodeSize=Math.min(Math.max(+n,2),65535),this.ArrayType=t,this.IndexArrayType=e<65536?Uint16Array:Uint32Array;var o=ii.indexOf(this.ArrayType),i=2*e*this.ArrayType.BYTES_PER_ELEMENT,s=e*this.IndexArrayType.BYTES_PER_ELEMENT,a=(8-s%8)%8;if(o<0)throw new Error("Unexpected typed array class: ".concat(t,"."));r&&r instanceof ArrayBuffer?(this.data=r,this.ids=new this.IndexArrayType(this.data,8,e),this.coords=new this.ArrayType(this.data,8+s+a,2*e),this._pos=2*e,this._finished=!0):(this.data=new ArrayBuffer(8+i+s+a),this.ids=new this.IndexArrayType(this.data,8,e),this.coords=new this.ArrayType(this.data,8+s+a,2*e),this._pos=0,this._finished=!1,new Uint8Array(this.data,0,2).set([219,16+o]),new Uint16Array(this.data,2,1)[0]=n,new Uint32Array(this.data,4,1)[0]=e)}add(e,n){var t=this._pos>>1;return this.ids[t]=t,this.coords[this._pos++]=e,this.coords[this._pos++]=n,t}finish(){var e=this._pos>>1;if(e!==this.numItems)throw new Error("Added ".concat(e," items when expected ").concat(this.numItems,"."));return ai(this.ids,this.coords,this.nodeSize,0,this.numItems-1,0),this._finished=!0,this}range(e,n,t,r){if(!this._finished)throw new Error("Data not yet indexed - call index.finish().");for(var{ids:o,coords:i,nodeSize:s}=this,a=[0,o.length-1,0],l=[];a.length;){var d=a.pop()||0,c=a.pop()||0,u=a.pop()||0;if(c-u<=s)for(var m=u;m<=c;m++){var p=i[2*m],f=i[2*m+1];p>=e&&p<=t&&f>=n&&f<=r&&l.push(o[m])}else{var g=u+c>>1,h=i[2*g],v=i[2*g+1];h>=e&&h<=t&&v>=n&&v<=r&&l.push(o[g]),(0===d?e<=h:n<=v)&&(a.push(u),a.push(g-1),a.push(1-d)),(0===d?t>=h:r>=v)&&(a.push(g+1),a.push(c),a.push(1-d))}}return l}within(e,n,t){if(!this._finished)throw new Error("Data not yet indexed - call index.finish().");for(var{ids:r,coords:o,nodeSize:i}=this,s=[0,r.length-1,0],a=[],l=t*t;s.length;){var d=s.pop()||0,c=s.pop()||0,u=s.pop()||0;if(c-u<=i)for(var m=u;m<=c;m++)ui(o[2*m],o[2*m+1],e,n)<=l&&a.push(r[m]);else{var p=u+c>>1,f=o[2*p],g=o[2*p+1];ui(f,g,e,n)<=l&&a.push(r[p]),(0===d?e-t<=f:n-t<=g)&&(s.push(u),s.push(p-1),s.push(1-d)),(0===d?e+t>=f:n+t>=g)&&(s.push(p+1),s.push(c),s.push(1-d))}}return a}}function ai(e,n,t,r,o,i){if(!(o-r<=t)){var s=r+o>>1;li(e,n,s,r,o,i),ai(e,n,t,r,s-1,1-i),ai(e,n,t,s+1,o,1-i)}}function li(e,n,t,r,o,i){for(;o>r;){if(o-r>600){var s=o-r+1,a=t-r+1,l=Math.log(s),d=.5*Math.exp(2*l/3),c=.5*Math.sqrt(l*d*(s-d)/s)*(a-s/2<0?-1:1);li(e,n,t,Math.max(r,Math.floor(t-a*d/s+c)),Math.min(o,Math.floor(t+(s-a)*d/s+c)),i)}var u=n[2*t+i],m=r,p=o;for(di(e,n,r,t),n[2*o+i]>u&&di(e,n,r,o);m<p;){for(di(e,n,m,p),m++,p--;n[2*m+i]<u;)m++;for(;n[2*p+i]>u;)p--}n[2*r+i]===u?di(e,n,r,p):di(e,n,++p,o),p<=t&&(r=p+1),t<=p&&(o=p-1)}}function di(e,n,t,r){ci(e,t,r),ci(n,2*t,2*r),ci(n,2*t+1,2*r+1)}function ci(e,n,t){var r=e[n];e[n]=e[t],e[t]=r}function ui(e,n,t,r){var o=e-t,i=n-r;return o*o+i*i}var mi,pi={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:e=>e},fi=Math.fround||(mi=new Float32Array(1),e=>(mi[0]=+e,mi[0])),gi=3,hi=5,vi=6;class Ci{constructor(e){this.options=Object.assign(Object.create(pi),e),this.trees=new Array(this.options.maxZoom+1),this.stride=this.options.reduce?7:6,this.clusterProps=[]}load(e){var{log:n,minZoom:t,maxZoom:r}=this.options;n&&console.time("total time");var o="prepare ".concat(e.length," points");n&&console.time(o),this.points=e;for(var i=[],s=0;s<e.length;s++){var a=e[s];if(a.geometry){var[l,d]=a.geometry.coordinates,c=fi(Si(l)),u=fi(Pi(d));i.push(c,u,1/0,s,-1,1),this.options.reduce&&i.push(0)}}var m=this.trees[r+1]=this._createTree(i);n&&console.timeEnd(o);for(var p=r;p>=t;p--){var f=+Date.now();m=this.trees[p]=this._createTree(this._cluster(m,p)),n&&console.log("z%d: %d clusters in %dms",p,m.numItems,+Date.now()-f)}return n&&console.timeEnd("total time"),this}getClusters(e,n){var t=((e[0]+180)%360+360)%360-180,r=Math.max(-90,Math.min(90,e[1])),o=180===e[2]?180:((e[2]+180)%360+360)%360-180,i=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)t=-180,o=180;else if(t>o){var s=this.getClusters([t,r,180,i],n),a=this.getClusters([-180,r,o,i],n);return s.concat(a)}var l=this.trees[this._limitZoom(n)],d=l.range(Si(t),Pi(i),Si(o),Pi(r)),c=l.data,u=[];for(var m of d){var p=this.stride*m;u.push(c[p+hi]>1?bi(c,p,this.clusterProps):this.points[c[p+gi]])}return u}getChildren(e){var n=this._getOriginId(e),t=this._getOriginZoom(e),r="No cluster with the specified id.",o=this.trees[t];if(!o)throw new Error(r);var i=o.data;if(n*this.stride>=i.length)throw new Error(r);var s=this.options.radius/(this.options.extent*Math.pow(2,t-1)),a=i[n*this.stride],l=i[n*this.stride+1],d=o.within(a,l,s),c=[];for(var u of d){var m=u*this.stride;i[m+4]===e&&c.push(i[m+hi]>1?bi(i,m,this.clusterProps):this.points[i[m+gi]])}if(0===c.length)throw new Error(r);return c}getLeaves(e,n,t){n=n||10,t=t||0;var r=[];return this._appendLeaves(r,e,n,t,0),r}getTile(e,n,t){var r=this.trees[this._limitZoom(e)],o=Math.pow(2,e),{extent:i,radius:s}=this.options,a=s/i,l=(t-a)/o,d=(t+1+a)/o,c={features:[]};return this._addTileFeatures(r.range((n-a)/o,l,(n+1+a)/o,d),r.data,n,t,o,c),0===n&&this._addTileFeatures(r.range(1-a/o,l,1,d),r.data,o,t,o,c),n===o-1&&this._addTileFeatures(r.range(0,l,a/o,d),r.data,-1,t,o,c),c.features.length?c:null}getClusterExpansionZoom(e){for(var n=this._getOriginZoom(e)-1;n<=this.options.maxZoom;){var t=this.getChildren(e);if(n++,1!==t.length)break;e=t[0].properties.cluster_id}return n}_appendLeaves(e,n,t,r,o){var i=this.getChildren(n);for(var s of i){var a=s.properties;if(a&&a.cluster?o+a.point_count<=r?o+=a.point_count:o=this._appendLeaves(e,a.cluster_id,t,r,o):o<r?o++:e.push(s),e.length===t)break}return o}_createTree(e){for(var n=new si(e.length/this.stride|0,this.options.nodeSize,Float32Array),t=0;t<e.length;t+=this.stride)n.add(e[t],e[t+1]);return n.finish(),n.data=e,n}_addTileFeatures(e,n,t,r,o,i){for(var s of e){var a=s*this.stride,l=n[a+hi]>1,d=void 0,c=void 0,u=void 0;if(l)d=yi(n,a,this.clusterProps),c=n[a],u=n[a+1];else{var m=this.points[n[a+gi]];d=m.properties;var[p,f]=m.geometry.coordinates;c=Si(p),u=Pi(f)}var g,h={type:1,geometry:[[Math.round(this.options.extent*(c*o-t)),Math.round(this.options.extent*(u*o-r))]],tags:d};void 0!==(g=l||this.options.generateId?n[a+gi]:this.points[n[a+gi]].id)&&(h.id=g),i.features.push(h)}}_limitZoom(e){return Math.max(this.options.minZoom,Math.min(Math.floor(+e),this.options.maxZoom+1))}_cluster(e,n){for(var{radius:t,extent:r,reduce:o,minPoints:i}=this.options,s=t/(r*Math.pow(2,n)),a=e.data,l=[],d=this.stride,c=0;c<a.length;c+=d)if(!(a[c+2]<=n)){a[c+2]=n;var u=a[c],m=a[c+1],p=e.within(a[c],a[c+1],s),f=a[c+hi],g=f;for(var h of p){var v=h*d;a[v+2]>n&&(g+=a[v+hi])}if(g>f&&g>=i){var C=u*f,b=m*f,y=void 0,S=-1,P=((c/d|0)<<5)+(n+1)+this.points.length;for(var x of p){var E=x*d;if(!(a[E+2]<=n)){a[E+2]=n;var A=a[E+hi];C+=a[E]*A,b+=a[E+1]*A,a[E+4]=P,o&&(y||(y=this._map(a,c,!0),S=this.clusterProps.length,this.clusterProps.push(y)),o(y,this._map(a,E)))}}a[c+4]=P,l.push(C/g,b/g,1/0,P,-1,g),o&&l.push(S)}else{for(var O=0;O<d;O++)l.push(a[c+O]);if(g>1)for(var D of p){var _=D*d;if(!(a[_+2]<=n)){a[_+2]=n;for(var w=0;w<d;w++)l.push(a[_+w])}}}}return l}_getOriginId(e){return e-this.points.length>>5}_getOriginZoom(e){return(e-this.points.length)%32}_map(e,n,t){if(e[n+hi]>1){var r=this.clusterProps[e[n+vi]];return t?Object.assign({},r):r}var o=this.points[e[n+gi]].properties,i=this.options.map(o);return t&&i===o?Object.assign({},i):i}}function bi(e,n,t){return{type:"Feature",id:e[n+gi],properties:yi(e,n,t),geometry:{type:"Point",coordinates:[xi(e[n]),Ei(e[n+1])]}}}function yi(e,n,t){var r=e[n+hi],o=r>=1e4?"".concat(Math.round(r/1e3),"k"):r>=1e3?"".concat(Math.round(r/100)/10,"k"):r,i=e[n+vi],s=-1===i?{}:Object.assign({},t[i]);return Object.assign(s,{cluster:!0,cluster_id:e[n+gi],point_count:r,point_count_abbreviated:o})}function Si(e){return e/360+.5}function Pi(e){var n=Math.sin(e*Math.PI/180),t=.5-.25*Math.log((1+n)/(1-n))/Math.PI;return t<0?0:t>1?1:t}function xi(e){return 360*(e-.5)}function Ei(e){var n=(180-360*e)*Math.PI/180;return 360*Math.atan(Math.exp(n))/Math.PI-90}class Ai{static isAdvancedMarkerAvailable(e){return google.maps.marker&&!0===e.getMapCapabilities().isAdvancedMarkersAvailable}static isAdvancedMarker(e){return google.maps.marker&&e instanceof google.maps.marker.AdvancedMarkerElement}static setMap(e,n){this.isAdvancedMarker(e)?e.map=n:e.setMap(n)}static getPosition(e){if(this.isAdvancedMarker(e)){if(e.position){if(e.position instanceof google.maps.LatLng)return e.position;if(e.position.lat&&e.position.lng)return new google.maps.LatLng(e.position.lat,e.position.lng)}return new google.maps.LatLng(null)}return e.getPosition()}static getVisible(e){return!!this.isAdvancedMarker(e)||e.getVisible()}}class Oi{constructor(e){var{markers:n,position:t}=e;this.markers=n,t&&(t instanceof google.maps.LatLng?this._position=t:this._position=new google.maps.LatLng(t))}get bounds(){if(0!==this.markers.length||this._position){var e=new google.maps.LatLngBounds(this._position,this._position);for(var n of this.markers)e.extend(Ai.getPosition(n));return e}}get position(){return this._position||this.bounds.getCenter()}get count(){return this.markers.filter((e=>Ai.getVisible(e))).length}push(e){this.markers.push(e)}delete(){this.marker&&(Ai.setMap(this.marker,null),this.marker=void 0),this.markers.length=0}}class Di{constructor(e){var{maxZoom:n=16}=e;this.maxZoom=n}noop(e){var{markers:n}=e;return wi(n)}}var _i,wi=e=>e.map((e=>new Oi({position:Ai.getPosition(e),markers:[e]})));class Li extends Di{constructor(e){var{maxZoom:n,radius:t=60}=e,r=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["maxZoom","radius"]);super({maxZoom:n}),this.state={zoom:-1},this.superCluster=new Ci(Object.assign({maxZoom:this.maxZoom,radius:t},r))}calculate(e){var n=!1,t={zoom:e.map.getZoom()};if(!oi(e.markers,this.markers)){n=!0,this.markers=[...e.markers];var r=this.markers.map((e=>{var n=Ai.getPosition(e);return{type:"Feature",geometry:{type:"Point",coordinates:[n.lng(),n.lat()]},properties:{marker:e}}}));this.superCluster.load(r)}return n||(this.state.zoom<=this.maxZoom||t.zoom<=this.maxZoom)&&(n=!oi(this.state,t)),this.state=t,n&&(this.clusters=this.cluster(e)),{clusters:this.clusters,changed:n}}cluster(e){var{map:n}=e;return this.superCluster.getClusters([-180,-90,180,90],Math.round(n.getZoom())).map((e=>this.transformCluster(e)))}transformCluster(e){var{geometry:{coordinates:[n,t]},properties:r}=e;if(r.cluster)return new Oi({markers:this.superCluster.getLeaves(r.cluster_id,1/0).map((e=>e.properties.marker)),position:{lat:t,lng:n}});var o=r.marker;return new Oi({markers:[o],position:Ai.getPosition(o)})}}class Ii{constructor(e,n){this.markers={sum:e.length};var t=n.map((e=>e.count)),r=t.reduce(((e,n)=>e+n),0);this.clusters={count:n.length,markers:{mean:r/n.length,sum:r,min:Math.min(...t),max:Math.max(...t)}}}}class ki{render(e,n,t){var{count:r,position:o}=e,i=r>Math.max(10,n.clusters.markers.mean)?"#ff0000":"#0000ff",s='<svg fill="'.concat(i,'" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 240" width="50" height="50">\n<circle cx="120" cy="120" opacity=".6" r="70" />\n<circle cx="120" cy="120" opacity=".3" r="90" />\n<circle cx="120" cy="120" opacity=".2" r="110" />\n<text x="50%" y="50%" style="fill:#fff" text-anchor="middle" font-size="50" dominant-baseline="middle" font-family="roboto,arial,sans-serif">').concat(r,"</text>\n</svg>"),a="Cluster of ".concat(r," markers"),l=Number(google.maps.Marker.MAX_ZINDEX)+r;if(Ai.isAdvancedMarkerAvailable(t)){var d=(new DOMParser).parseFromString(s,"image/svg+xml").documentElement;d.setAttribute("transform","translate(0 25)");var c={map:t,position:o,zIndex:l,title:a,content:d};return new google.maps.marker.AdvancedMarkerElement(c)}var u={position:o,zIndex:l,title:a,icon:{url:"data:image/svg+xml;base64,".concat(btoa(s)),anchor:new google.maps.Point(25,25)}};return new google.maps.Marker(u)}}class Ui{constructor(){!function(e,n){for(var t in n.prototype)e.prototype[t]=n.prototype[t]}(Ui,google.maps.OverlayView)}}!function(e){e.CLUSTERING_BEGIN="clusteringbegin",e.CLUSTERING_END="clusteringend",e.CLUSTER_CLICK="click"}(_i||(_i={}));var Mi=(e,n,t)=>{t.fitBounds(n.bounds)};class ji extends Ui{constructor(e){var{map:n,markers:t=[],algorithmOptions:r={},algorithm:o=new Li(r),renderer:i=new ki,onClusterClick:s=Mi}=e;super(),this.markers=[...t],this.clusters=[],this.algorithm=o,this.renderer=i,this.onClusterClick=s,n&&this.setMap(n)}addMarker(e,n){this.markers.includes(e)||(this.markers.push(e),n||this.render())}addMarkers(e,n){e.forEach((e=>{this.addMarker(e,!0)})),n||this.render()}removeMarker(e,n){var t=this.markers.indexOf(e);return-1!==t&&(Ai.setMap(e,null),this.markers.splice(t,1),n||this.render(),!0)}removeMarkers(e,n){var t=!1;return e.forEach((e=>{t=this.removeMarker(e,!0)||t})),t&&!n&&this.render(),t}clearMarkers(e){this.markers.length=0,e||this.render()}render(){var e=this.getMap();if(e instanceof google.maps.Map&&e.getProjection()){google.maps.event.trigger(this,_i.CLUSTERING_BEGIN,this);var{clusters:n,changed:t}=this.algorithm.calculate({markers:this.markers,map:e,mapCanvasProjection:this.getProjection()});if(t||null==t){var r=new Set;for(var o of n)1==o.markers.length&&r.add(o.markers[0]);var i=[];for(var s of this.clusters)null!=s.marker&&(1==s.markers.length?r.has(s.marker)||Ai.setMap(s.marker,null):i.push(s.marker));this.clusters=n,this.renderClusters(),requestAnimationFrame((()=>i.forEach((e=>Ai.setMap(e,null)))))}google.maps.event.trigger(this,_i.CLUSTERING_END,this)}}onAdd(){this.idleListener=this.getMap().addListener("idle",this.render.bind(this)),this.render()}onRemove(){google.maps.event.removeListener(this.idleListener),this.reset()}reset(){this.markers.forEach((e=>Ai.setMap(e,null))),this.clusters.forEach((e=>e.delete())),this.clusters=[]}renderClusters(){var e=new Ii(this.markers,this.clusters),n=this.getMap();this.clusters.forEach((t=>{1===t.markers.length?t.marker=t.markers[0]:(t.marker=this.renderer.render(t,e,n),t.markers.forEach((e=>Ai.setMap(e,null))),this.onClusterClick&&t.marker.addListener("click",(e=>{google.maps.event.trigger(this,_i.CLUSTER_CLICK,t),this.onClusterClick(e,t,n)}))),Ai.setMap(t.marker,n)}))}}function Ni(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ri(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ni(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ni(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}(0,n.memo)((function(e){var{children:t,options:r}=e,o=function(e){var t=function(){Gr(!!n.useContext,"useGoogleMap is React hook and requires React version 16.8+");var e=(0,n.useContext)($r);return Gr(!!e,"useGoogleMap needs a GoogleMap available up in the tree"),e}(),[r,o]=(0,n.useState)(null);return(0,n.useEffect)((()=>{if(t&&null===r){var n=new ji(Ri(Ri({},e),{},{map:t}));o(n)}}),[t]),r}(r);return null!==o?t(o):null}));var Fi={onCloseClick:"closeclick",onContentChanged:"content_changed",onDomReady:"domready",onPositionChanged:"position_changed",onZindexChanged:"zindex_changed"},Wi={options(e,n){e.setOptions(n)},position(e,n){e.setPosition(n)},zIndex(e,n){e.setZIndex(n)}};(0,n.memo)((function(e){var{children:t,anchor:r,options:o,position:s,zIndex:a,onCloseClick:l,onDomReady:d,onContentChanged:c,onPositionChanged:u,onZindexChanged:m,onLoad:p,onUnmount:f}=e,g=(0,n.useContext)($r),[h,v]=(0,n.useState)(null),[C,b]=(0,n.useState)(null),[y,S]=(0,n.useState)(null),[P,x]=(0,n.useState)(null),[E,A]=(0,n.useState)(null),[O,D]=(0,n.useState)(null),_=(0,n.useRef)(null);return(0,n.useEffect)((()=>{null!==h&&(h.close(),r?h.open(g,r):h.getPosition()&&h.open(g))}),[g,h,r]),(0,n.useEffect)((()=>{o&&null!==h&&h.setOptions(o)}),[h,o]),(0,n.useEffect)((()=>{s&&null!==h&&h.setPosition(s)}),[s]),(0,n.useEffect)((()=>{"number"==typeof a&&null!==h&&h.setZIndex(a)}),[a]),(0,n.useEffect)((()=>{h&&l&&(null!==C&&google.maps.event.removeListener(C),b(google.maps.event.addListener(h,"closeclick",l)))}),[l]),(0,n.useEffect)((()=>{h&&d&&(null!==y&&google.maps.event.removeListener(y),S(google.maps.event.addListener(h,"domready",d)))}),[d]),(0,n.useEffect)((()=>{h&&c&&(null!==P&&google.maps.event.removeListener(P),x(google.maps.event.addListener(h,"content_changed",c)))}),[c]),(0,n.useEffect)((()=>{h&&u&&(null!==E&&google.maps.event.removeListener(E),A(google.maps.event.addListener(h,"position_changed",u)))}),[u]),(0,n.useEffect)((()=>{h&&m&&(null!==O&&google.maps.event.removeListener(O),D(google.maps.event.addListener(h,"zindex_changed",m)))}),[m]),(0,n.useEffect)((()=>{var e=new google.maps.InfoWindow(o);return v(e),_.current=document.createElement("div"),l&&b(google.maps.event.addListener(e,"closeclick",l)),d&&S(google.maps.event.addListener(e,"domready",d)),c&&x(google.maps.event.addListener(e,"content_changed",c)),u&&A(google.maps.event.addListener(e,"position_changed",u)),m&&D(google.maps.event.addListener(e,"zindex_changed",m)),e.setContent(_.current),s&&e.setPosition(s),a&&e.setZIndex(a),r?e.open(g,r):e.getPosition()?e.open(g):Gr(!1,"You must provide either an anchor (typically render it inside a <Marker>) or a position props for <InfoWindow>."),p&&p(e),()=>{C&&google.maps.event.removeListener(C),P&&google.maps.event.removeListener(P),y&&google.maps.event.removeListener(y),E&&google.maps.event.removeListener(E),O&&google.maps.event.removeListener(O),f&&f(e),e.close()}}),[]),_.current?(0,i.createPortal)(n.Children.only(t),_.current):null}));class Ti extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"containerElement",null),Vr(this,"state",{infoWindow:null}),Vr(this,"open",((e,n)=>{n?e.open(this.context,n):e.getPosition()?e.open(this.context):Gr(!1,"You must provide either an anchor (typically render it inside a <Marker>) or a position props for <InfoWindow>.")})),Vr(this,"setInfoWindowCallback",(()=>{null!==this.state.infoWindow&&null!==this.containerElement&&(this.state.infoWindow.setContent(this.containerElement),this.open(this.state.infoWindow,this.props.anchor),this.props.onLoad&&this.props.onLoad(this.state.infoWindow))}))}componentDidMount(){var e=new google.maps.InfoWindow(this.props.options);this.containerElement=document.createElement("div"),this.registeredEvents=Xr({updaterMap:Wi,eventMap:Fi,prevProps:{},nextProps:this.props,instance:e}),this.setState((()=>({infoWindow:e})),this.setInfoWindowCallback)}componentDidUpdate(e){null!==this.state.infoWindow&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Wi,eventMap:Fi,prevProps:e,nextProps:this.props,instance:this.state.infoWindow}))}componentWillUnmount(){null!==this.state.infoWindow&&(qr(this.registeredEvents),this.props.onUnmount&&this.props.onUnmount(this.state.infoWindow),this.state.infoWindow.close())}render(){return this.containerElement?(0,i.createPortal)(n.Children.only(this.props.children),this.containerElement):null}}function Bi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function zi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Bi(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Bi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(Ti,"contextType",$r);var Vi={onClick:"click",onDblClick:"dblclick",onDrag:"drag",onDragEnd:"dragend",onDragStart:"dragstart",onMouseDown:"mousedown",onMouseMove:"mousemove",onMouseOut:"mouseout",onMouseOver:"mouseover",onMouseUp:"mouseup",onRightClick:"rightclick"},Ji={draggable(e,n){e.setDraggable(n)},editable(e,n){e.setEditable(n)},map(e,n){e.setMap(n)},options(e,n){e.setOptions(n)},path(e,n){e.setPath(n)},visible(e,n){e.setVisible(n)}},Hi={};(0,n.memo)((function(e){var{options:t,draggable:r,editable:o,visible:i,path:s,onDblClick:a,onDragEnd:l,onDragStart:d,onMouseDown:c,onMouseMove:u,onMouseOut:m,onMouseOver:p,onMouseUp:f,onRightClick:g,onClick:h,onDrag:v,onLoad:C,onUnmount:b}=e,y=(0,n.useContext)($r),[S,P]=(0,n.useState)(null),[x,E]=(0,n.useState)(null),[A,O]=(0,n.useState)(null),[D,_]=(0,n.useState)(null),[w,L]=(0,n.useState)(null),[I,k]=(0,n.useState)(null),[U,M]=(0,n.useState)(null),[j,N]=(0,n.useState)(null),[R,F]=(0,n.useState)(null),[W,T]=(0,n.useState)(null),[B,z]=(0,n.useState)(null),[V,J]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==S&&S.setMap(y)}),[y]),(0,n.useEffect)((()=>{void 0!==t&&null!==S&&S.setOptions(t)}),[S,t]),(0,n.useEffect)((()=>{void 0!==r&&null!==S&&S.setDraggable(r)}),[S,r]),(0,n.useEffect)((()=>{void 0!==o&&null!==S&&S.setEditable(o)}),[S,o]),(0,n.useEffect)((()=>{void 0!==i&&null!==S&&S.setVisible(i)}),[S,i]),(0,n.useEffect)((()=>{void 0!==s&&null!==S&&S.setPath(s)}),[S,s]),(0,n.useEffect)((()=>{S&&a&&(null!==x&&google.maps.event.removeListener(x),E(google.maps.event.addListener(S,"dblclick",a)))}),[a]),(0,n.useEffect)((()=>{S&&l&&(null!==A&&google.maps.event.removeListener(A),O(google.maps.event.addListener(S,"dragend",l)))}),[l]),(0,n.useEffect)((()=>{S&&d&&(null!==D&&google.maps.event.removeListener(D),_(google.maps.event.addListener(S,"dragstart",d)))}),[d]),(0,n.useEffect)((()=>{S&&c&&(null!==w&&google.maps.event.removeListener(w),L(google.maps.event.addListener(S,"mousedown",c)))}),[c]),(0,n.useEffect)((()=>{S&&u&&(null!==I&&google.maps.event.removeListener(I),k(google.maps.event.addListener(S,"mousemove",u)))}),[u]),(0,n.useEffect)((()=>{S&&m&&(null!==U&&google.maps.event.removeListener(U),M(google.maps.event.addListener(S,"mouseout",m)))}),[m]),(0,n.useEffect)((()=>{S&&p&&(null!==j&&google.maps.event.removeListener(j),N(google.maps.event.addListener(S,"mouseover",p)))}),[p]),(0,n.useEffect)((()=>{S&&f&&(null!==R&&google.maps.event.removeListener(R),F(google.maps.event.addListener(S,"mouseup",f)))}),[f]),(0,n.useEffect)((()=>{S&&g&&(null!==W&&google.maps.event.removeListener(W),T(google.maps.event.addListener(S,"rightclick",g)))}),[g]),(0,n.useEffect)((()=>{S&&h&&(null!==B&&google.maps.event.removeListener(B),z(google.maps.event.addListener(S,"click",h)))}),[h]),(0,n.useEffect)((()=>{S&&v&&(null!==V&&google.maps.event.removeListener(V),J(google.maps.event.addListener(S,"drag",v)))}),[v]),(0,n.useEffect)((()=>{var e=new google.maps.Polyline(zi(zi({},t||Hi),{},{map:y}));return s&&e.setPath(s),void 0!==i&&e.setVisible(i),void 0!==o&&e.setEditable(o),void 0!==r&&e.setDraggable(r),a&&E(google.maps.event.addListener(e,"dblclick",a)),l&&O(google.maps.event.addListener(e,"dragend",l)),d&&_(google.maps.event.addListener(e,"dragstart",d)),c&&L(google.maps.event.addListener(e,"mousedown",c)),u&&k(google.maps.event.addListener(e,"mousemove",u)),m&&M(google.maps.event.addListener(e,"mouseout",m)),p&&N(google.maps.event.addListener(e,"mouseover",p)),f&&F(google.maps.event.addListener(e,"mouseup",f)),g&&T(google.maps.event.addListener(e,"rightclick",g)),h&&z(google.maps.event.addListener(e,"click",h)),v&&J(google.maps.event.addListener(e,"drag",v)),P(e),C&&C(e),()=>{null!==x&&google.maps.event.removeListener(x),null!==A&&google.maps.event.removeListener(A),null!==D&&google.maps.event.removeListener(D),null!==w&&google.maps.event.removeListener(w),null!==I&&google.maps.event.removeListener(I),null!==U&&google.maps.event.removeListener(U),null!==j&&google.maps.event.removeListener(j),null!==R&&google.maps.event.removeListener(R),null!==W&&google.maps.event.removeListener(W),null!==B&&google.maps.event.removeListener(B),b&&b(e),e.setMap(null)}}),[]),null}));class Gi extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{polyline:null}),Vr(this,"setPolylineCallback",(()=>{null!==this.state.polyline&&this.props.onLoad&&this.props.onLoad(this.state.polyline)}))}componentDidMount(){var e=new google.maps.Polyline(zi(zi({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:Ji,eventMap:Vi,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{polyline:e}}),this.setPolylineCallback)}componentDidUpdate(e){null!==this.state.polyline&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Ji,eventMap:Vi,prevProps:e,nextProps:this.props,instance:this.state.polyline}))}componentWillUnmount(){null!==this.state.polyline&&(this.props.onUnmount&&this.props.onUnmount(this.state.polyline),qr(this.registeredEvents),this.state.polyline.setMap(null))}render(){return null}}function $i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Qi(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?$i(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):$i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(Gi,"contextType",$r);var qi={onClick:"click",onDblClick:"dblclick",onDrag:"drag",onDragEnd:"dragend",onDragStart:"dragstart",onMouseDown:"mousedown",onMouseMove:"mousemove",onMouseOut:"mouseout",onMouseOver:"mouseover",onMouseUp:"mouseup",onRightClick:"rightclick"},Xi={draggable(e,n){e.setDraggable(n)},editable(e,n){e.setEditable(n)},map(e,n){e.setMap(n)},options(e,n){e.setOptions(n)},path(e,n){e.setPath(n)},paths(e,n){e.setPaths(n)},visible(e,n){e.setVisible(n)}};(0,n.memo)((function(e){var{options:t,draggable:r,editable:o,visible:i,path:s,paths:a,onDblClick:l,onDragEnd:d,onDragStart:c,onMouseDown:u,onMouseMove:m,onMouseOut:p,onMouseOver:f,onMouseUp:g,onRightClick:h,onClick:v,onDrag:C,onLoad:b,onUnmount:y,onEdit:S}=e,P=(0,n.useContext)($r),[x,E]=(0,n.useState)(null),[A,O]=(0,n.useState)(null),[D,_]=(0,n.useState)(null),[w,L]=(0,n.useState)(null),[I,k]=(0,n.useState)(null),[U,M]=(0,n.useState)(null),[j,N]=(0,n.useState)(null),[R,F]=(0,n.useState)(null),[W,T]=(0,n.useState)(null),[B,z]=(0,n.useState)(null),[V,J]=(0,n.useState)(null),[H,G]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==x&&x.setMap(P)}),[P]),(0,n.useEffect)((()=>{void 0!==t&&null!==x&&x.setOptions(t)}),[x,t]),(0,n.useEffect)((()=>{void 0!==r&&null!==x&&x.setDraggable(r)}),[x,r]),(0,n.useEffect)((()=>{void 0!==o&&null!==x&&x.setEditable(o)}),[x,o]),(0,n.useEffect)((()=>{void 0!==i&&null!==x&&x.setVisible(i)}),[x,i]),(0,n.useEffect)((()=>{void 0!==s&&null!==x&&x.setPath(s)}),[x,s]),(0,n.useEffect)((()=>{void 0!==a&&null!==x&&x.setPaths(a)}),[x,a]),(0,n.useEffect)((()=>{x&&"function"==typeof l&&(null!==A&&google.maps.event.removeListener(A),O(google.maps.event.addListener(x,"dblclick",l)))}),[l]),(0,n.useEffect)((()=>{x&&(google.maps.event.addListener(x.getPath(),"insert_at",(()=>{null==S||S(x)})),google.maps.event.addListener(x.getPath(),"set_at",(()=>{null==S||S(x)})),google.maps.event.addListener(x.getPath(),"remove_at",(()=>{null==S||S(x)})))}),[x,S]),(0,n.useEffect)((()=>{x&&"function"==typeof d&&(null!==D&&google.maps.event.removeListener(D),_(google.maps.event.addListener(x,"dragend",d)))}),[d]),(0,n.useEffect)((()=>{x&&"function"==typeof c&&(null!==w&&google.maps.event.removeListener(w),L(google.maps.event.addListener(x,"dragstart",c)))}),[c]),(0,n.useEffect)((()=>{x&&"function"==typeof u&&(null!==I&&google.maps.event.removeListener(I),k(google.maps.event.addListener(x,"mousedown",u)))}),[u]),(0,n.useEffect)((()=>{x&&"function"==typeof m&&(null!==U&&google.maps.event.removeListener(U),M(google.maps.event.addListener(x,"mousemove",m)))}),[m]),(0,n.useEffect)((()=>{x&&"function"==typeof p&&(null!==j&&google.maps.event.removeListener(j),N(google.maps.event.addListener(x,"mouseout",p)))}),[p]),(0,n.useEffect)((()=>{x&&"function"==typeof f&&(null!==R&&google.maps.event.removeListener(R),F(google.maps.event.addListener(x,"mouseover",f)))}),[f]),(0,n.useEffect)((()=>{x&&"function"==typeof g&&(null!==W&&google.maps.event.removeListener(W),T(google.maps.event.addListener(x,"mouseup",g)))}),[g]),(0,n.useEffect)((()=>{x&&"function"==typeof h&&(null!==B&&google.maps.event.removeListener(B),z(google.maps.event.addListener(x,"rightclick",h)))}),[h]),(0,n.useEffect)((()=>{x&&"function"==typeof v&&(null!==V&&google.maps.event.removeListener(V),J(google.maps.event.addListener(x,"click",v)))}),[v]),(0,n.useEffect)((()=>{x&&"function"==typeof C&&(null!==H&&google.maps.event.removeListener(H),G(google.maps.event.addListener(x,"drag",C)))}),[C]),(0,n.useEffect)((()=>{var e=new google.maps.Polygon(Qi(Qi({},t),{},{map:P}));return s&&e.setPath(s),a&&e.setPaths(a),void 0!==i&&e.setVisible(i),void 0!==o&&e.setEditable(o),void 0!==r&&e.setDraggable(r),l&&O(google.maps.event.addListener(e,"dblclick",l)),d&&_(google.maps.event.addListener(e,"dragend",d)),c&&L(google.maps.event.addListener(e,"dragstart",c)),u&&k(google.maps.event.addListener(e,"mousedown",u)),m&&M(google.maps.event.addListener(e,"mousemove",m)),p&&N(google.maps.event.addListener(e,"mouseout",p)),f&&F(google.maps.event.addListener(e,"mouseover",f)),g&&T(google.maps.event.addListener(e,"mouseup",g)),h&&z(google.maps.event.addListener(e,"rightclick",h)),v&&J(google.maps.event.addListener(e,"click",v)),C&&G(google.maps.event.addListener(e,"drag",C)),E(e),b&&b(e),()=>{null!==A&&google.maps.event.removeListener(A),null!==D&&google.maps.event.removeListener(D),null!==w&&google.maps.event.removeListener(w),null!==I&&google.maps.event.removeListener(I),null!==U&&google.maps.event.removeListener(U),null!==j&&google.maps.event.removeListener(j),null!==R&&google.maps.event.removeListener(R),null!==W&&google.maps.event.removeListener(W),null!==B&&google.maps.event.removeListener(B),null!==V&&google.maps.event.removeListener(V),y&&y(e),e.setMap(null)}}),[]),null}));class Zi extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[])}componentDidMount(){var e=this.props.options||{};this.polygon=new google.maps.Polygon(e),this.polygon.setMap(this.context),this.registeredEvents=Xr({updaterMap:Xi,eventMap:qi,prevProps:{},nextProps:this.props,instance:this.polygon}),this.props.onLoad&&this.props.onLoad(this.polygon)}componentDidUpdate(e){this.polygon&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Xi,eventMap:qi,prevProps:e,nextProps:this.props,instance:this.polygon}))}componentWillUnmount(){this.polygon&&(this.props.onUnmount&&this.props.onUnmount(this.polygon),qr(this.registeredEvents),this.polygon&&this.polygon.setMap(null))}render(){return null}}function Yi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ki(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Yi(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Yi(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(Zi,"contextType",$r);var es={onBoundsChanged:"bounds_changed",onClick:"click",onDblClick:"dblclick",onDrag:"drag",onDragEnd:"dragend",onDragStart:"dragstart",onMouseDown:"mousedown",onMouseMove:"mousemove",onMouseOut:"mouseout",onMouseOver:"mouseover",onMouseUp:"mouseup",onRightClick:"rightclick"},ns={bounds(e,n){e.setBounds(n)},draggable(e,n){e.setDraggable(n)},editable(e,n){e.setEditable(n)},map(e,n){e.setMap(n)},options(e,n){e.setOptions(n)},visible(e,n){e.setVisible(n)}};(0,n.memo)((function(e){var{options:t,bounds:r,draggable:o,editable:i,visible:s,onDblClick:a,onDragEnd:l,onDragStart:d,onMouseDown:c,onMouseMove:u,onMouseOut:m,onMouseOver:p,onMouseUp:f,onRightClick:g,onClick:h,onDrag:v,onBoundsChanged:C,onLoad:b,onUnmount:y}=e,S=(0,n.useContext)($r),[P,x]=(0,n.useState)(null),[E,A]=(0,n.useState)(null),[O,D]=(0,n.useState)(null),[_,w]=(0,n.useState)(null),[L,I]=(0,n.useState)(null),[k,U]=(0,n.useState)(null),[M,j]=(0,n.useState)(null),[N,R]=(0,n.useState)(null),[F,W]=(0,n.useState)(null),[T,B]=(0,n.useState)(null),[z,V]=(0,n.useState)(null),[J,H]=(0,n.useState)(null),[G,$]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==P&&P.setMap(S)}),[S]),(0,n.useEffect)((()=>{void 0!==t&&null!==P&&P.setOptions(t)}),[P,t]),(0,n.useEffect)((()=>{void 0!==o&&null!==P&&P.setDraggable(o)}),[P,o]),(0,n.useEffect)((()=>{void 0!==i&&null!==P&&P.setEditable(i)}),[P,i]),(0,n.useEffect)((()=>{void 0!==s&&null!==P&&P.setVisible(s)}),[P,s]),(0,n.useEffect)((()=>{void 0!==r&&null!==P&&P.setBounds(r)}),[P,r]),(0,n.useEffect)((()=>{P&&a&&(null!==E&&google.maps.event.removeListener(E),A(google.maps.event.addListener(P,"dblclick",a)))}),[a]),(0,n.useEffect)((()=>{P&&l&&(null!==O&&google.maps.event.removeListener(O),D(google.maps.event.addListener(P,"dragend",l)))}),[l]),(0,n.useEffect)((()=>{P&&d&&(null!==_&&google.maps.event.removeListener(_),w(google.maps.event.addListener(P,"dragstart",d)))}),[d]),(0,n.useEffect)((()=>{P&&c&&(null!==L&&google.maps.event.removeListener(L),I(google.maps.event.addListener(P,"mousedown",c)))}),[c]),(0,n.useEffect)((()=>{P&&u&&(null!==k&&google.maps.event.removeListener(k),U(google.maps.event.addListener(P,"mousemove",u)))}),[u]),(0,n.useEffect)((()=>{P&&m&&(null!==M&&google.maps.event.removeListener(M),j(google.maps.event.addListener(P,"mouseout",m)))}),[m]),(0,n.useEffect)((()=>{P&&p&&(null!==N&&google.maps.event.removeListener(N),R(google.maps.event.addListener(P,"mouseover",p)))}),[p]),(0,n.useEffect)((()=>{P&&f&&(null!==F&&google.maps.event.removeListener(F),W(google.maps.event.addListener(P,"mouseup",f)))}),[f]),(0,n.useEffect)((()=>{P&&g&&(null!==T&&google.maps.event.removeListener(T),B(google.maps.event.addListener(P,"rightclick",g)))}),[g]),(0,n.useEffect)((()=>{P&&h&&(null!==z&&google.maps.event.removeListener(z),V(google.maps.event.addListener(P,"click",h)))}),[h]),(0,n.useEffect)((()=>{P&&v&&(null!==J&&google.maps.event.removeListener(J),H(google.maps.event.addListener(P,"drag",v)))}),[v]),(0,n.useEffect)((()=>{P&&C&&(null!==G&&google.maps.event.removeListener(G),$(google.maps.event.addListener(P,"bounds_changed",C)))}),[C]),(0,n.useEffect)((()=>{var e=new google.maps.Rectangle(Ki(Ki({},t),{},{map:S}));return void 0!==s&&e.setVisible(s),void 0!==i&&e.setEditable(i),void 0!==o&&e.setDraggable(o),void 0!==r&&e.setBounds(r),a&&A(google.maps.event.addListener(e,"dblclick",a)),l&&D(google.maps.event.addListener(e,"dragend",l)),d&&w(google.maps.event.addListener(e,"dragstart",d)),c&&I(google.maps.event.addListener(e,"mousedown",c)),u&&U(google.maps.event.addListener(e,"mousemove",u)),m&&j(google.maps.event.addListener(e,"mouseout",m)),p&&R(google.maps.event.addListener(e,"mouseover",p)),f&&W(google.maps.event.addListener(e,"mouseup",f)),g&&B(google.maps.event.addListener(e,"rightclick",g)),h&&V(google.maps.event.addListener(e,"click",h)),v&&H(google.maps.event.addListener(e,"drag",v)),C&&$(google.maps.event.addListener(e,"bounds_changed",C)),x(e),b&&b(e),()=>{null!==E&&google.maps.event.removeListener(E),null!==O&&google.maps.event.removeListener(O),null!==_&&google.maps.event.removeListener(_),null!==L&&google.maps.event.removeListener(L),null!==k&&google.maps.event.removeListener(k),null!==M&&google.maps.event.removeListener(M),null!==N&&google.maps.event.removeListener(N),null!==F&&google.maps.event.removeListener(F),null!==T&&google.maps.event.removeListener(T),null!==z&&google.maps.event.removeListener(z),null!==J&&google.maps.event.removeListener(J),null!==G&&google.maps.event.removeListener(G),y&&y(e),e.setMap(null)}}),[]),null}));class ts extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{rectangle:null}),Vr(this,"setRectangleCallback",(()=>{null!==this.state.rectangle&&this.props.onLoad&&this.props.onLoad(this.state.rectangle)}))}componentDidMount(){var e=new google.maps.Rectangle(Ki(Ki({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:ns,eventMap:es,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{rectangle:e}}),this.setRectangleCallback)}componentDidUpdate(e){null!==this.state.rectangle&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:ns,eventMap:es,prevProps:e,nextProps:this.props,instance:this.state.rectangle}))}componentWillUnmount(){null!==this.state.rectangle&&(this.props.onUnmount&&this.props.onUnmount(this.state.rectangle),qr(this.registeredEvents),this.state.rectangle.setMap(null))}render(){return null}}function rs(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function os(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?rs(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):rs(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(ts,"contextType",$r);var is={onCenterChanged:"center_changed",onRadiusChanged:"radius_changed",onClick:"click",onDblClick:"dblclick",onDrag:"drag",onDragEnd:"dragend",onDragStart:"dragstart",onMouseDown:"mousedown",onMouseMove:"mousemove",onMouseOut:"mouseout",onMouseOver:"mouseover",onMouseUp:"mouseup",onRightClick:"rightclick"},ss={center(e,n){e.setCenter(n)},draggable(e,n){e.setDraggable(n)},editable(e,n){e.setEditable(n)},map(e,n){e.setMap(n)},options(e,n){e.setOptions(n)},radius(e,n){e.setRadius(n)},visible(e,n){e.setVisible(n)}},as={};(0,n.memo)((function(e){var{options:t,center:r,radius:o,draggable:i,editable:s,visible:a,onDblClick:l,onDragEnd:d,onDragStart:c,onMouseDown:u,onMouseMove:m,onMouseOut:p,onMouseOver:f,onMouseUp:g,onRightClick:h,onClick:v,onDrag:C,onCenterChanged:b,onRadiusChanged:y,onLoad:S,onUnmount:P}=e,x=(0,n.useContext)($r),[E,A]=(0,n.useState)(null),[O,D]=(0,n.useState)(null),[_,w]=(0,n.useState)(null),[L,I]=(0,n.useState)(null),[k,U]=(0,n.useState)(null),[M,j]=(0,n.useState)(null),[N,R]=(0,n.useState)(null),[F,W]=(0,n.useState)(null),[T,B]=(0,n.useState)(null),[z,V]=(0,n.useState)(null),[J,H]=(0,n.useState)(null),[G,$]=(0,n.useState)(null),[Q,q]=(0,n.useState)(null),[X,Z]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==E&&E.setMap(x)}),[x]),(0,n.useEffect)((()=>{void 0!==t&&null!==E&&E.setOptions(t)}),[E,t]),(0,n.useEffect)((()=>{void 0!==i&&null!==E&&E.setDraggable(i)}),[E,i]),(0,n.useEffect)((()=>{void 0!==s&&null!==E&&E.setEditable(s)}),[E,s]),(0,n.useEffect)((()=>{void 0!==a&&null!==E&&E.setVisible(a)}),[E,a]),(0,n.useEffect)((()=>{"number"==typeof o&&null!==E&&E.setRadius(o)}),[E,o]),(0,n.useEffect)((()=>{void 0!==r&&null!==E&&E.setCenter(r)}),[E,r]),(0,n.useEffect)((()=>{E&&l&&(null!==O&&google.maps.event.removeListener(O),D(google.maps.event.addListener(E,"dblclick",l)))}),[l]),(0,n.useEffect)((()=>{E&&d&&(null!==_&&google.maps.event.removeListener(_),w(google.maps.event.addListener(E,"dragend",d)))}),[d]),(0,n.useEffect)((()=>{E&&c&&(null!==L&&google.maps.event.removeListener(L),I(google.maps.event.addListener(E,"dragstart",c)))}),[c]),(0,n.useEffect)((()=>{E&&u&&(null!==k&&google.maps.event.removeListener(k),U(google.maps.event.addListener(E,"mousedown",u)))}),[u]),(0,n.useEffect)((()=>{E&&m&&(null!==M&&google.maps.event.removeListener(M),j(google.maps.event.addListener(E,"mousemove",m)))}),[m]),(0,n.useEffect)((()=>{E&&p&&(null!==N&&google.maps.event.removeListener(N),R(google.maps.event.addListener(E,"mouseout",p)))}),[p]),(0,n.useEffect)((()=>{E&&f&&(null!==F&&google.maps.event.removeListener(F),W(google.maps.event.addListener(E,"mouseover",f)))}),[f]),(0,n.useEffect)((()=>{E&&g&&(null!==T&&google.maps.event.removeListener(T),B(google.maps.event.addListener(E,"mouseup",g)))}),[g]),(0,n.useEffect)((()=>{E&&h&&(null!==z&&google.maps.event.removeListener(z),V(google.maps.event.addListener(E,"rightclick",h)))}),[h]),(0,n.useEffect)((()=>{E&&v&&(null!==J&&google.maps.event.removeListener(J),H(google.maps.event.addListener(E,"click",v)))}),[v]),(0,n.useEffect)((()=>{E&&C&&(null!==G&&google.maps.event.removeListener(G),$(google.maps.event.addListener(E,"drag",C)))}),[C]),(0,n.useEffect)((()=>{E&&b&&(null!==Q&&google.maps.event.removeListener(Q),q(google.maps.event.addListener(E,"center_changed",b)))}),[v]),(0,n.useEffect)((()=>{E&&y&&(null!==X&&google.maps.event.removeListener(X),Z(google.maps.event.addListener(E,"radius_changed",y)))}),[y]),(0,n.useEffect)((()=>{var e=new google.maps.Circle(os(os({},t||as),{},{map:x}));return"number"==typeof o&&e.setRadius(o),void 0!==r&&e.setCenter(r),"number"==typeof o&&e.setRadius(o),void 0!==a&&e.setVisible(a),void 0!==s&&e.setEditable(s),void 0!==i&&e.setDraggable(i),l&&D(google.maps.event.addListener(e,"dblclick",l)),d&&w(google.maps.event.addListener(e,"dragend",d)),c&&I(google.maps.event.addListener(e,"dragstart",c)),u&&U(google.maps.event.addListener(e,"mousedown",u)),m&&j(google.maps.event.addListener(e,"mousemove",m)),p&&R(google.maps.event.addListener(e,"mouseout",p)),f&&W(google.maps.event.addListener(e,"mouseover",f)),g&&B(google.maps.event.addListener(e,"mouseup",g)),h&&V(google.maps.event.addListener(e,"rightclick",h)),v&&H(google.maps.event.addListener(e,"click",v)),C&&$(google.maps.event.addListener(e,"drag",C)),b&&q(google.maps.event.addListener(e,"center_changed",b)),y&&Z(google.maps.event.addListener(e,"radius_changed",y)),A(e),S&&S(e),()=>{null!==O&&google.maps.event.removeListener(O),null!==_&&google.maps.event.removeListener(_),null!==L&&google.maps.event.removeListener(L),null!==k&&google.maps.event.removeListener(k),null!==M&&google.maps.event.removeListener(M),null!==N&&google.maps.event.removeListener(N),null!==F&&google.maps.event.removeListener(F),null!==T&&google.maps.event.removeListener(T),null!==z&&google.maps.event.removeListener(z),null!==J&&google.maps.event.removeListener(J),null!==Q&&google.maps.event.removeListener(Q),null!==X&&google.maps.event.removeListener(X),P&&P(e),e.setMap(null)}}),[]),null}));class ls extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{circle:null}),Vr(this,"setCircleCallback",(()=>{null!==this.state.circle&&this.props.onLoad&&this.props.onLoad(this.state.circle)}))}componentDidMount(){var e=new google.maps.Circle(os(os({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:ss,eventMap:is,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{circle:e}}),this.setCircleCallback)}componentDidUpdate(e){null!==this.state.circle&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:ss,eventMap:is,prevProps:e,nextProps:this.props,instance:this.state.circle}))}componentWillUnmount(){var e;null!==this.state.circle&&(this.props.onUnmount&&this.props.onUnmount(this.state.circle),qr(this.registeredEvents),null===(e=this.state.circle)||void 0===e||e.setMap(null))}render(){return null}}function ds(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function cs(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ds(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ds(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(ls,"contextType",$r);var us={onClick:"click",onDblClick:"dblclick",onMouseDown:"mousedown",onMouseOut:"mouseout",onMouseOver:"mouseover",onMouseUp:"mouseup",onRightClick:"rightclick",onAddFeature:"addfeature",onRemoveFeature:"removefeature",onRemoveProperty:"removeproperty",onSetGeometry:"setgeometry",onSetProperty:"setproperty"},ms={add(e,n){e.add(n)},addgeojson(e,n,t){e.addGeoJson(n,t)},contains(e,n){e.contains(n)},foreach(e,n){e.forEach(n)},loadgeojson(e,n,t,r){e.loadGeoJson(n,t,r)},overridestyle(e,n,t){e.overrideStyle(n,t)},remove(e,n){e.remove(n)},revertstyle(e,n){e.revertStyle(n)},controlposition(e,n){e.setControlPosition(n)},controls(e,n){e.setControls(n)},drawingmode(e,n){e.setDrawingMode(n)},map(e,n){e.setMap(n)},style(e,n){e.setStyle(n)},togeojson(e,n){e.toGeoJson(n)}};(0,n.memo)((function(e){var{options:t,onClick:r,onDblClick:o,onMouseDown:i,onMouseMove:s,onMouseOut:a,onMouseOver:l,onMouseUp:d,onRightClick:c,onAddFeature:u,onRemoveFeature:m,onRemoveProperty:p,onSetGeometry:f,onSetProperty:g,onLoad:h,onUnmount:v}=e,C=(0,n.useContext)($r),[b,y]=(0,n.useState)(null),[S,P]=(0,n.useState)(null),[x,E]=(0,n.useState)(null),[A,O]=(0,n.useState)(null),[D,_]=(0,n.useState)(null),[w,L]=(0,n.useState)(null),[I,k]=(0,n.useState)(null),[U,M]=(0,n.useState)(null),[j,N]=(0,n.useState)(null),[R,F]=(0,n.useState)(null),[W,T]=(0,n.useState)(null),[B,z]=(0,n.useState)(null),[V,J]=(0,n.useState)(null),[H,G]=(0,n.useState)(null);return(0,n.useEffect)((()=>{null!==b&&b.setMap(C)}),[C]),(0,n.useEffect)((()=>{b&&o&&(null!==S&&google.maps.event.removeListener(S),P(google.maps.event.addListener(b,"dblclick",o)))}),[o]),(0,n.useEffect)((()=>{b&&i&&(null!==x&&google.maps.event.removeListener(x),E(google.maps.event.addListener(b,"mousedown",i)))}),[i]),(0,n.useEffect)((()=>{b&&s&&(null!==A&&google.maps.event.removeListener(A),O(google.maps.event.addListener(b,"mousemove",s)))}),[s]),(0,n.useEffect)((()=>{b&&a&&(null!==D&&google.maps.event.removeListener(D),_(google.maps.event.addListener(b,"mouseout",a)))}),[a]),(0,n.useEffect)((()=>{b&&l&&(null!==w&&google.maps.event.removeListener(w),L(google.maps.event.addListener(b,"mouseover",l)))}),[l]),(0,n.useEffect)((()=>{b&&d&&(null!==I&&google.maps.event.removeListener(I),k(google.maps.event.addListener(b,"mouseup",d)))}),[d]),(0,n.useEffect)((()=>{b&&c&&(null!==U&&google.maps.event.removeListener(U),M(google.maps.event.addListener(b,"rightclick",c)))}),[c]),(0,n.useEffect)((()=>{b&&r&&(null!==j&&google.maps.event.removeListener(j),N(google.maps.event.addListener(b,"click",r)))}),[r]),(0,n.useEffect)((()=>{b&&u&&(null!==R&&google.maps.event.removeListener(R),F(google.maps.event.addListener(b,"addfeature",u)))}),[u]),(0,n.useEffect)((()=>{b&&m&&(null!==W&&google.maps.event.removeListener(W),T(google.maps.event.addListener(b,"removefeature",m)))}),[m]),(0,n.useEffect)((()=>{b&&p&&(null!==B&&google.maps.event.removeListener(B),z(google.maps.event.addListener(b,"removeproperty",p)))}),[p]),(0,n.useEffect)((()=>{b&&f&&(null!==V&&google.maps.event.removeListener(V),J(google.maps.event.addListener(b,"setgeometry",f)))}),[f]),(0,n.useEffect)((()=>{b&&g&&(null!==H&&google.maps.event.removeListener(H),G(google.maps.event.addListener(b,"setproperty",g)))}),[g]),(0,n.useEffect)((()=>{if(null!==C){var e=new google.maps.Data(cs(cs({},t),{},{map:C}));o&&P(google.maps.event.addListener(e,"dblclick",o)),i&&E(google.maps.event.addListener(e,"mousedown",i)),s&&O(google.maps.event.addListener(e,"mousemove",s)),a&&_(google.maps.event.addListener(e,"mouseout",a)),l&&L(google.maps.event.addListener(e,"mouseover",l)),d&&k(google.maps.event.addListener(e,"mouseup",d)),c&&M(google.maps.event.addListener(e,"rightclick",c)),r&&N(google.maps.event.addListener(e,"click",r)),u&&F(google.maps.event.addListener(e,"addfeature",u)),m&&T(google.maps.event.addListener(e,"removefeature",m)),p&&z(google.maps.event.addListener(e,"removeproperty",p)),f&&J(google.maps.event.addListener(e,"setgeometry",f)),g&&G(google.maps.event.addListener(e,"setproperty",g)),y(e),h&&h(e)}return()=>{b&&(null!==S&&google.maps.event.removeListener(S),null!==x&&google.maps.event.removeListener(x),null!==A&&google.maps.event.removeListener(A),null!==D&&google.maps.event.removeListener(D),null!==w&&google.maps.event.removeListener(w),null!==I&&google.maps.event.removeListener(I),null!==U&&google.maps.event.removeListener(U),null!==j&&google.maps.event.removeListener(j),null!==R&&google.maps.event.removeListener(R),null!==W&&google.maps.event.removeListener(W),null!==B&&google.maps.event.removeListener(B),null!==V&&google.maps.event.removeListener(V),null!==H&&google.maps.event.removeListener(H),v&&v(b),b.setMap(null))}}),[]),null}));class ps extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{data:null}),Vr(this,"setDataCallback",(()=>{null!==this.state.data&&this.props.onLoad&&this.props.onLoad(this.state.data)}))}componentDidMount(){if(null!==this.context){var e=new google.maps.Data(cs(cs({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:ms,eventMap:us,prevProps:{},nextProps:this.props,instance:e}),this.setState((()=>({data:e})),this.setDataCallback)}}componentDidUpdate(e){null!==this.state.data&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:ms,eventMap:us,prevProps:e,nextProps:this.props,instance:this.state.data}))}componentWillUnmount(){null!==this.state.data&&(this.props.onUnmount&&this.props.onUnmount(this.state.data),qr(this.registeredEvents),this.state.data&&this.state.data.setMap(null))}render(){return null}}function fs(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function gs(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?fs(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):fs(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(ps,"contextType",$r);var hs={onClick:"click",onDefaultViewportChanged:"defaultviewport_changed",onStatusChanged:"status_changed"},vs={options(e,n){e.setOptions(n)},url(e,n){e.setUrl(n)},zIndex(e,n){e.setZIndex(n)}};class Cs extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{kmlLayer:null}),Vr(this,"setKmlLayerCallback",(()=>{null!==this.state.kmlLayer&&this.props.onLoad&&this.props.onLoad(this.state.kmlLayer)}))}componentDidMount(){var e=new google.maps.KmlLayer(gs(gs({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:vs,eventMap:hs,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{kmlLayer:e}}),this.setKmlLayerCallback)}componentDidUpdate(e){null!==this.state.kmlLayer&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:vs,eventMap:hs,prevProps:e,nextProps:this.props,instance:this.state.kmlLayer}))}componentWillUnmount(){null!==this.state.kmlLayer&&(this.props.onUnmount&&this.props.onUnmount(this.state.kmlLayer),qr(this.registeredEvents),this.state.kmlLayer.setMap(null))}render(){return null}}function bs(e,n){return"function"==typeof n?n(e.offsetWidth,e.offsetHeight):{x:0,y:0}}function ys(e,n){return new n(e.lat,e.lng)}function Ss(e,n){return new n(new google.maps.LatLng(e.ne.lat,e.ne.lng),new google.maps.LatLng(e.sw.lat,e.sw.lng))}function Ps(e,n,t,r){return void 0!==t?function(e,n,t){var r=e&&e.fromLatLngToDivPixel(t.getNorthEast()),o=e&&e.fromLatLngToDivPixel(t.getSouthWest());return r&&o?{left:"".concat(o.x+n.x,"px"),top:"".concat(r.y+n.y,"px"),width:"".concat(r.x-o.x-n.x,"px"),height:"".concat(o.y-r.y-n.y,"px")}:{left:"-9999px",top:"-9999px"}}(e,n,(o=t)instanceof(i=google.maps.LatLngBounds)?o:Ss(o,i)):function(e,n,t){var r=e&&e.fromLatLngToDivPixel(t);if(r){var{x:o,y:i}=r;return{left:"".concat(o+n.x,"px"),top:"".concat(i+n.y,"px")}}return{left:"-9999px",top:"-9999px"}}(e,n,function(e,n,t){return e instanceof n?e:t(e,n)}(r,google.maps.LatLng,ys));var o,i}function xs(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Es(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function As(e){return e?(e instanceof google.maps.LatLng?e:new google.maps.LatLng(e.lat,e.lng))+"":""}function Os(e){return e?(e instanceof google.maps.LatLngBounds?e:new google.maps.LatLngBounds(new google.maps.LatLng(e.south,e.east),new google.maps.LatLng(e.north,e.west)))+"":""}Vr(Cs,"contextType",$r),(0,n.memo)((function(e){var{position:t,bounds:r,mapPaneName:o,zIndex:s,onLoad:a,onUnmount:l,getPixelPositionOffset:d,children:c}=e,u=(0,n.useContext)($r),m=(0,n.useMemo)((()=>{var e=document.createElement("div");return e.style.position="absolute",e}),[]),p=(0,n.useMemo)((()=>function(e,n,t,r,o){class i extends google.maps.OverlayView{constructor(e,n,t,r){super(),this.container=e,this.pane=n,this.position=t,this.bounds=r}onAdd(){var e,n=null===(e=this.getPanes())||void 0===e?void 0:e[this.pane];null==n||n.appendChild(this.container)}draw(){var e=this.getProjection(),n=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?xs(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):xs(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},this.container?bs(this.container,o):{x:0,y:0}),t=Ps(e,n,this.bounds,this.position);for(var[r,i]of Object.entries(t))this.container.style[r]=i}onRemove(){null!==this.container.parentNode&&this.container.parentNode.removeChild(this.container)}}return new i(e,n,t,r)}(m,o,t,r,d)),[m,o,t,r]);return(0,n.useEffect)((()=>(null==a||a(p),null==p||p.setMap(u),()=>{null==l||l(p),null==p||p.setMap(null)})),[u,p]),(0,n.useEffect)((()=>{m.style.zIndex="".concat(s)}),[s,m]),i.createPortal(c,m)}));class Ds extends n.PureComponent{constructor(e){super(e),Vr(this,"state",{paneEl:null,containerStyle:{position:"absolute"}}),Vr(this,"updatePane",(()=>{var e=this.props.mapPaneName,n=this.overlayView.getPanes();Gr(!!e,"OverlayView requires props.mapPaneName but got %s",e),n?this.setState({paneEl:n[e]}):this.setState({paneEl:null})})),Vr(this,"onAdd",(()=>{var e,n;this.updatePane(),null===(e=(n=this.props).onLoad)||void 0===e||e.call(n,this.overlayView)})),Vr(this,"onPositionElement",(()=>{var e,n,t,r,o,i,s=this.overlayView.getProjection(),a=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Es(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Es(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({x:0,y:0},this.containerRef.current?bs(this.containerRef.current,this.props.getPixelPositionOffset):{}),l=Ps(s,a,this.props.bounds,this.props.position);o=l,i={left:this.state.containerStyle.left,top:this.state.containerStyle.top,width:this.state.containerStyle.width,height:this.state.containerStyle.height},(o.left!==i.left||o.top!==i.top||o.width!==i.height||o.height!==i.height)&&this.setState({containerStyle:{top:null!==(e=l.top)&&void 0!==e?e:0,left:null!==(n=l.left)&&void 0!==n?n:0,width:null!==(t=l.width)&&void 0!==t?t:0,height:null!==(r=l.height)&&void 0!==r?r:0,position:"absolute"}})})),Vr(this,"draw",(()=>{this.onPositionElement()})),Vr(this,"onRemove",(()=>{var e,n;this.setState((()=>({paneEl:null}))),null===(e=(n=this.props).onUnmount)||void 0===e||e.call(n,this.overlayView)})),this.containerRef=(0,n.createRef)();var t=new google.maps.OverlayView;t.onAdd=this.onAdd,t.draw=this.draw,t.onRemove=this.onRemove,this.overlayView=t}componentDidMount(){this.overlayView.setMap(this.context)}componentDidUpdate(e){var n=As(e.position),t=As(this.props.position),r=Os(e.bounds),o=Os(this.props.bounds);n===t&&r===o||this.overlayView.draw(),e.mapPaneName!==this.props.mapPaneName&&this.updatePane()}componentWillUnmount(){this.overlayView.setMap(null)}render(){var e=this.state.paneEl;return e?i.createPortal((0,or.jsx)("div",{ref:this.containerRef,style:this.state.containerStyle,children:n.Children.only(this.props.children)}),e):null}}function _s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function ws(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?_s(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):_s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(Ds,"FLOAT_PANE","floatPane"),Vr(Ds,"MAP_PANE","mapPane"),Vr(Ds,"MARKER_LAYER","markerLayer"),Vr(Ds,"OVERLAY_LAYER","overlayLayer"),Vr(Ds,"OVERLAY_MOUSE_TARGET","overlayMouseTarget"),Vr(Ds,"contextType",$r);var Ls={onDblClick:"dblclick",onClick:"click"},Is={opacity(e,n){e.setOpacity(n)}};(0,n.memo)((function(e){var{url:t,bounds:r,options:o,visible:i}=e,s=(0,n.useContext)($r),a=new google.maps.LatLngBounds(new google.maps.LatLng(r.south,r.west),new google.maps.LatLng(r.north,r.east)),l=(0,n.useMemo)((()=>new google.maps.GroundOverlay(t,a,o)),[]);return(0,n.useEffect)((()=>{null!==l&&l.setMap(s)}),[s]),(0,n.useEffect)((()=>{void 0!==t&&null!==l&&(l.set("url",t),l.setMap(s))}),[l,t]),(0,n.useEffect)((()=>{void 0!==i&&null!==l&&l.setOpacity(i?1:0)}),[l,i]),(0,n.useEffect)((()=>{var e=new google.maps.LatLngBounds(new google.maps.LatLng(r.south,r.west),new google.maps.LatLng(r.north,r.east));void 0!==r&&null!==l&&(l.set("bounds",e),l.setMap(s))}),[l,r]),null}));class ks extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{groundOverlay:null}),Vr(this,"setGroundOverlayCallback",(()=>{null!==this.state.groundOverlay&&this.props.onLoad&&this.props.onLoad(this.state.groundOverlay)}))}componentDidMount(){Gr(!!this.props.url||!!this.props.bounds,"For GroundOverlay, url and bounds are passed in to constructor and are immutable after instantiated. This is the behavior of Google Maps JavaScript API v3 ( See https://developers.google.com/maps/documentation/javascript/reference#GroundOverlay) Hence, use the corresponding two props provided by `react-google-maps-api`, url and bounds. In some cases, you'll need the GroundOverlay component to reflect the changes of url and bounds. You can leverage the React's key property to remount the component. Typically, just `key={url}` would serve your need. See https://github.com/tomchentw/react-google-maps/issues/655");var e=new google.maps.GroundOverlay(this.props.url,this.props.bounds,ws(ws({},this.props.options),{},{map:this.context}));this.registeredEvents=Xr({updaterMap:Is,eventMap:Ls,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{groundOverlay:e}}),this.setGroundOverlayCallback)}componentDidUpdate(e){null!==this.state.groundOverlay&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Is,eventMap:Ls,prevProps:e,nextProps:this.props,instance:this.state.groundOverlay}))}componentWillUnmount(){this.state.groundOverlay&&(this.props.onUnmount&&this.props.onUnmount(this.state.groundOverlay),this.state.groundOverlay.setMap(null))}render(){return null}}function Us(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ms(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Us(Object(t),!0).forEach((function(n){Vr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Us(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}Vr(ks,"defaultProps",{onLoad:function(){}}),Vr(ks,"contextType",$r);var js={},Ns={data(e,n){e.setData(n)},map(e,n){e.setMap(n)},options(e,n){e.setOptions(n)}};(0,n.memo)((function(e){var{data:t,onLoad:r,onUnmount:o,options:i}=e,s=(0,n.useContext)($r),[a,l]=(0,n.useState)(null);return(0,n.useEffect)((()=>{google.maps.visualization||Gr(!!google.maps.visualization,'Did you include prop libraries={["visualization"]} in useJsApiScript? %s',google.maps.visualization)}),[]),(0,n.useEffect)((()=>{Gr(!!t,"data property is required in HeatmapLayer %s",t)}),[t]),(0,n.useEffect)((()=>{null!==a&&a.setMap(s)}),[s]),(0,n.useEffect)((()=>{i&&null!==a&&a.setOptions(i)}),[a,i]),(0,n.useEffect)((()=>{var e=new google.maps.visualization.HeatmapLayer(Ms(Ms({},i),{},{data:t,map:s}));return l(e),r&&r(e),()=>{null!==a&&(o&&o(a),a.setMap(null))}}),[]),null}));class Rs extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{heatmapLayer:null}),Vr(this,"setHeatmapLayerCallback",(()=>{null!==this.state.heatmapLayer&&this.props.onLoad&&this.props.onLoad(this.state.heatmapLayer)}))}componentDidMount(){Gr(!!google.maps.visualization,'Did you include prop libraries={["visualization"]} to <LoadScript />? %s',google.maps.visualization),Gr(!!this.props.data,"data property is required in HeatmapLayer %s",this.props.data);var e=new google.maps.visualization.HeatmapLayer(Ms(Ms({},this.props.options),{},{data:this.props.data,map:this.context}));this.registeredEvents=Xr({updaterMap:Ns,eventMap:js,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{heatmapLayer:e}}),this.setHeatmapLayerCallback)}componentDidUpdate(e){qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Ns,eventMap:js,prevProps:e,nextProps:this.props,instance:this.state.heatmapLayer})}componentWillUnmount(){null!==this.state.heatmapLayer&&(this.props.onUnmount&&this.props.onUnmount(this.state.heatmapLayer),qr(this.registeredEvents),this.state.heatmapLayer.setMap(null))}render(){return null}}Vr(Rs,"contextType",$r);var Fs={onCloseClick:"closeclick",onPanoChanged:"pano_changed",onPositionChanged:"position_changed",onPovChanged:"pov_changed",onResize:"resize",onStatusChanged:"status_changed",onVisibleChanged:"visible_changed",onZoomChanged:"zoom_changed"},Ws={register(e,n,t){e.registerPanoProvider(n,t)},links(e,n){e.setLinks(n)},motionTracking(e,n){e.setMotionTracking(n)},options(e,n){e.setOptions(n)},pano(e,n){e.setPano(n)},position(e,n){e.setPosition(n)},pov(e,n){e.setPov(n)},visible(e,n){e.setVisible(n)},zoom(e,n){e.setZoom(n)}};class Ts extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{streetViewPanorama:null}),Vr(this,"setStreetViewPanoramaCallback",(()=>{null!==this.state.streetViewPanorama&&this.props.onLoad&&this.props.onLoad(this.state.streetViewPanorama)}))}componentDidMount(){var e,n,t=null!==(e=null===(n=this.context)||void 0===n?void 0:n.getStreetView())&&void 0!==e?e:null;this.registeredEvents=Xr({updaterMap:Ws,eventMap:Fs,prevProps:{},nextProps:this.props,instance:t}),this.setState((()=>({streetViewPanorama:t})),this.setStreetViewPanoramaCallback)}componentDidUpdate(e){null!==this.state.streetViewPanorama&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Ws,eventMap:Fs,prevProps:e,nextProps:this.props,instance:this.state.streetViewPanorama}))}componentWillUnmount(){null!==this.state.streetViewPanorama&&(this.props.onUnmount&&this.props.onUnmount(this.state.streetViewPanorama),qr(this.registeredEvents),this.state.streetViewPanorama.setVisible(!1))}render(){return null}}Vr(Ts,"contextType",$r);class Bs extends n.PureComponent{constructor(){super(...arguments),Vr(this,"state",{streetViewService:null}),Vr(this,"setStreetViewServiceCallback",(()=>{null!==this.state.streetViewService&&this.props.onLoad&&this.props.onLoad(this.state.streetViewService)}))}componentDidMount(){var e=new google.maps.StreetViewService;this.setState((function(){return{streetViewService:e}}),this.setStreetViewServiceCallback)}componentWillUnmount(){null!==this.state.streetViewService&&this.props.onUnmount&&this.props.onUnmount(this.state.streetViewService)}render(){return null}}Vr(Bs,"contextType",$r);var zs={onDirectionsChanged:"directions_changed"},Vs={directions(e,n){e.setDirections(n)},map(e,n){e.setMap(n)},options(e,n){e.setOptions(n)},panel(e,n){e.setPanel(n)},routeIndex(e,n){e.setRouteIndex(n)}};class Js extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"state",{directionsRenderer:null}),Vr(this,"setDirectionsRendererCallback",(()=>{null!==this.state.directionsRenderer&&(this.state.directionsRenderer.setMap(this.context),this.props.onLoad&&this.props.onLoad(this.state.directionsRenderer))}))}componentDidMount(){var e=new google.maps.DirectionsRenderer(this.props.options);this.registeredEvents=Xr({updaterMap:Vs,eventMap:zs,prevProps:{},nextProps:this.props,instance:e}),this.setState((function(){return{directionsRenderer:e}}),this.setDirectionsRendererCallback)}componentDidUpdate(e){null!==this.state.directionsRenderer&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Vs,eventMap:zs,prevProps:e,nextProps:this.props,instance:this.state.directionsRenderer}))}componentWillUnmount(){null!==this.state.directionsRenderer&&(this.props.onUnmount&&this.props.onUnmount(this.state.directionsRenderer),qr(this.registeredEvents),this.state.directionsRenderer&&this.state.directionsRenderer.setMap(null))}render(){return null}}Vr(Js,"contextType",$r);var Hs={onPlacesChanged:"places_changed"},Gs={bounds(e,n){e.setBounds(n)}};class $s extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"containerElement",(0,n.createRef)()),Vr(this,"state",{searchBox:null}),Vr(this,"setSearchBoxCallback",(()=>{null!==this.state.searchBox&&this.props.onLoad&&this.props.onLoad(this.state.searchBox)}))}componentDidMount(){if(Gr(!!google.maps.places,'You need to provide libraries={["places"]} prop to <LoadScript /> component %s',google.maps.places),null!==this.containerElement&&null!==this.containerElement.current){var e=this.containerElement.current.querySelector("input");if(null!==e){var n=new google.maps.places.SearchBox(e,this.props.options);this.registeredEvents=Xr({updaterMap:Gs,eventMap:Hs,prevProps:{},nextProps:this.props,instance:n}),this.setState((function(){return{searchBox:n}}),this.setSearchBoxCallback)}}}componentDidUpdate(e){null!==this.state.searchBox&&(qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:Gs,eventMap:Hs,prevProps:e,nextProps:this.props,instance:this.state.searchBox}))}componentWillUnmount(){null!==this.state.searchBox&&(this.props.onUnmount&&this.props.onUnmount(this.state.searchBox),qr(this.registeredEvents))}render(){return(0,or.jsx)("div",{ref:this.containerElement,children:n.Children.only(this.props.children)})}}Vr($s,"contextType",$r);var Qs={onPlaceChanged:"place_changed"},qs={bounds(e,n){e.setBounds(n)},restrictions(e,n){e.setComponentRestrictions(n)},fields(e,n){e.setFields(n)},options(e,n){e.setOptions(n)},types(e,n){e.setTypes(n)}};class Xs extends n.PureComponent{constructor(){super(...arguments),Vr(this,"registeredEvents",[]),Vr(this,"containerElement",(0,n.createRef)()),Vr(this,"state",{autocomplete:null}),Vr(this,"setAutocompleteCallback",(()=>{null!==this.state.autocomplete&&this.props.onLoad&&this.props.onLoad(this.state.autocomplete)}))}componentDidMount(){var e;Gr(!!google.maps.places,'You need to provide libraries={["places"]} prop to <LoadScript /> component %s',google.maps.places);var n=null===(e=this.containerElement.current)||void 0===e?void 0:e.querySelector("input");if(n){var t=new google.maps.places.Autocomplete(n,this.props.options);this.registeredEvents=Xr({updaterMap:qs,eventMap:Qs,prevProps:{},nextProps:this.props,instance:t}),this.setState((()=>({autocomplete:t})),this.setAutocompleteCallback)}}componentDidUpdate(e){qr(this.registeredEvents),this.registeredEvents=Xr({updaterMap:qs,eventMap:Qs,prevProps:e,nextProps:this.props,instance:this.state.autocomplete})}componentWillUnmount(){null!==this.state.autocomplete&&qr(this.registeredEvents)}render(){return(0,or.jsx)("div",{ref:this.containerElement,className:this.props.className,children:n.Children.only(this.props.children)})}}Vr(Xs,"defaultProps",{className:""}),Vr(Xs,"contextType",$r);const Zs=function(){var e={lat:-23.570187447313792,lng:-46.69049978234351};return(0,or.jsx)(mo,{googleMapsApiKey:"AIzaSyDnUSYSsrXn_0_TlTzGlU59cgQM6_NYNhQ",children:(0,or.jsx)(Kr,{mapContainerStyle:{width:"100%",height:"400px"},center:e,zoom:15,children:(0,or.jsx)(Mo,{position:e,title:"Av. Brig Faria Lima, 1461",onClick:function(){return alert("Você clicou no marcador!")}})})})},Ys=function(){return(0,or.jsx)(Br,{children:(0,or.jsxs)("div",{className:"dv-contato",children:[(0,or.jsx)("div",{className:"dv-co-titulo",children:"Contato"}),(0,or.jsxs)("div",{className:"dv-co-conteudo",children:[(0,or.jsx)("div",{className:"dv-co-co-mapa",children:(0,or.jsx)("div",{id:"map",className:"Mapa Mapa-contato",children:(0,or.jsx)(Zs,{})})}),(0,or.jsxs)("div",{className:"dv-co-co-info",children:[(0,or.jsxs)("div",{className:"dv-co-co-in-item",children:[(0,or.jsx)("div",{className:"dv-co-co-in-icone",children:(0,or.jsx)("img",{src:"imagens/contatoicone1.png"})}),(0,or.jsxs)("div",{className:"dv-co-co-in-texto",children:["Av. Brig Faria Lima 1461 4º Andar",(0,or.jsx)("br",{}),"Torre Sul, Jardim Paulistano",(0,or.jsx)("br",{}),"CEP: 01452-921",(0,or.jsx)("br",{}),"São Paulo - SP"]})]}),(0,or.jsxs)("div",{className:"dv-co-co-in-item",children:[(0,or.jsx)("div",{className:"dv-co-co-in-icone",children:(0,or.jsx)("img",{src:"imagens/contatoicone2.png"})}),(0,or.jsx)("div",{className:"dv-co-co-in-texto",children:"contato@pvrcapital.com"})]}),(0,or.jsxs)("div",{className:"dv-co-co-in-item",children:[(0,or.jsx)("div",{className:"dv-co-co-in-icone",children:(0,or.jsx)("img",{src:"imagens/contatoicone3.png"})}),(0,or.jsx)("div",{className:"dv-co-co-in-texto",children:"PVR Capital"})]})]})]})]})})},Ks={_origin:"https://api.emailjs.com"};class ea{constructor(e){this.status=e.status,this.text=e.responseText}}const na=(e,n,t,r)=>{const o=r||Ks._userID;((e,n,t)=>{if(!e)throw"The user ID is required. Visit https://dashboard.emailjs.com/admin/integration";if(!n)throw"The service ID is required. Visit https://dashboard.emailjs.com/admin";if(!t)throw"The template ID is required. Visit https://dashboard.emailjs.com/admin/templates"})(o,e,n);const i={lib_version:"3.2.0",user_id:o,service_id:e,template_id:n,template_params:t};return((e,n,t={})=>new Promise(((r,o)=>{const i=new XMLHttpRequest;i.addEventListener("load",(({target:e})=>{const n=new ea(e);200===n.status||"OK"===n.text?r(n):o(n)})),i.addEventListener("error",(({target:e})=>{o(new ea(e))})),i.open("POST",Ks._origin+e,!0),Object.keys(t).forEach((e=>{i.setRequestHeader(e,t[e])})),i.send(n)})))("/api/v1.0/email/send",JSON.stringify(i),{"Content-type":"application/json"})};var ta,ra=er.header(ta||(ta=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    .dv-formulario {\n        background: #44617c;\n        padding: 50px 150px;\n    }\n\n    .dv-fo-titulo {\n        color: white;\n        font-size: 40px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 700;\n        word-wrap: break-word;\n    }\n\n    .dv-fo-titulo-principal {\n        color: white;\n        font-size: 40px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 700;\n        word-wrap: break-word;\n    }\n\n    .dv-fo-titulo-subtitulo {\n        opacity: 0.6;\n        color: white;\n        font-size: 24px;\n        font-family: Montserrat, sans-serif;\n        font-weight: 400;\n        word-wrap: break-word;\n    }\n\n    .dv-fo-conteudo {\n        color: white;\n        padding-top: 20px;\n\n\n    }\n\n    .dv-fo-co-parte1 {\n        display: flex;\n        gap: 50px;\n    }\n\n    .dv-fo-co-parte2 {\n        padding-top: 20px;\n        display: flex;\n        gap: 50px;\n    }\n\n    .dv-fo-co-item-button {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        width: 100%;\n        align-items: flex-end;\n        justify-content: flex-end;\n\n        & button {\n            width: 200px;\n            border: none;\n            padding-top: 18px;\n            padding-bottom: 19px;\n            padding-left: 55px;\n            padding-right: 55px;\n            background: #577FA4;\n            border-radius: 15px;\n            overflow: hidden;\n            justify-content: center;\n            align-items: center;\n            display: inline-flex;\n\n            color: white;\n            font-size: 24px;\n            font-family: Montserrat, sans-serif;\n            font-weight: 400;\n            word-wrap: break-word;\n        }\n    }\n\n    .dv-fo-co-item {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        width: 100%;\n\n        color: #FFF;\n        font-family: Montserrat;\n        font-size: 15px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n\n        & input {\n            width: 100%;\n            height: 62px;\n        }\n\n        & textarea {\n            height: 133px;\n        }\n    }\n    \n    .mensagem {\n        width: 350%;\n    }\n"])));const oa=function(){return(0,or.jsx)(ra,{children:(0,or.jsxs)("div",{className:"dv-formulario",children:[(0,or.jsxs)("div",{className:"dv-fo-titulo",children:[(0,or.jsx)("div",{className:"dv-fo-titulo-principal",children:"Formulário"}),(0,or.jsx)("div",{className:"dv-fo-titulo-subtitulo",children:"Entre em contato com a PVR M&A"})]}),(0,or.jsx)("div",{className:"dv-fo-conteudo",children:(0,or.jsxs)("form",{onSubmit:function(e){e.preventDefault();var n=document.getElementById("nome").value,t=document.getElementById("email").value,r=document.getElementById("mensagem").value;na("service_jcfaj7a","template_4deq5k1",{to_name:"Equipe PVR",from_name:n,from_email:t,message:r},"fLcr3VAzG5leG_3In").then((function(e){alert("Mensagem enviada com sucesso para a equipe PVR!"),console.log("SUCCESS!",e.status,e.text)}),(function(e){alert("Ocorreu um erro ao enviar sua mensagem. Tente novamente."),console.error("FAILED...",e)}))},children:[(0,or.jsxs)("div",{className:"dv-fo-co-parte1",children:[(0,or.jsxs)("div",{className:"dv-fo-co-item",children:[(0,or.jsx)("label",{htmlFor:"nome",children:"Nome:"}),(0,or.jsx)("input",{type:"text",id:"nome",name:"nome",required:!0})]}),(0,or.jsxs)("div",{className:"dv-fo-co-item",children:[(0,or.jsx)("label",{htmlFor:"email",children:"Email:"}),(0,or.jsx)("input",{type:"email",id:"email",name:"email",required:!0})]})]}),(0,or.jsxs)("div",{className:"dv-fo-co-parte2",children:[(0,or.jsxs)("div",{className:"dv-fo-co-item mensagem",children:[(0,or.jsx)("label",{htmlFor:"mensagem",children:"Mensagem:"}),(0,or.jsx)("textarea",{id:"mensagem",name:"mensagem",required:!0})]}),(0,or.jsx)("div",{className:"dv-fo-co-item-button",children:(0,or.jsx)(yr,{texto:"Enviar",modo:2,tipo:"submit"})})]})]})})]})})},ia=function(){return(0,or.jsxs)(dr,{children:[(0,or.jsx)(mr,{}),(0,or.jsx)(gr,{}),(0,or.jsx)(Sr,{}),(0,or.jsx)(Er,{}),(0,or.jsx)(Ur,{}),(0,or.jsx)(Rr,{}),(0,or.jsx)(Ys,{}),(0,or.jsx)(oa,{})]})};var sa,aa=er.header(sa||(sa=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 100px 150px 0;\n    display: flex;\n\n    .imagem {\n        width: 794px;\n        height: 631px;\n        flex-shrink: 0;\n    }\n\n    .conteudo {\n        padding: 0 0 0 50px;\n        width: 50%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n    }\n\n    .titulo {\n        color: #44617C;\n        font-family: Montserrat;\n        font-size: 40px;\n        font-style: normal;\n        font-weight: 600;\n        line-height: normal;\n        margin-bottom: 60px;\n    }\n\n    .descricao {\n        color: #000;\n        font-family: Montserrat;\n        font-size: 20px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 35px; /* 175% */\n        margin-bottom: 20px;\n    }\n\n    .exemplo {\n        display: flex;\n        gap: 50px;\n        margin-top: 50px;\n    }\n\n    .imagem1 {\n        border-right: 1px solid #44617C;\n\n        & img {\n            width: 259px;\n            height: 127px;\n            flex-shrink: 0;\n        }\n    }\n\n    .imagem2 {\n        & img {\n            width: 221px;\n            height: 157px;\n            flex-shrink: 0;\n        }\n    }\n\n"])));const la=function(){return(0,or.jsxs)(aa,{children:[(0,or.jsx)("div",{className:"imagem",children:(0,or.jsx)("img",{src:"imagens/merges.png",alt:"Merges & Aquisitions"})}),(0,or.jsxs)("div",{className:"conteudo",children:[(0,or.jsx)("div",{className:"titulo",children:"Merges & Aquisitions"}),(0,or.jsx)("div",{className:"descricao",children:"Venda de 70% das Ações da TLSV, empresa líder na prestação de serviços para Telecom na região Sul do Brasil para o grupo GPS, empresa listada líder em outsourcing e terceirização"}),(0,or.jsxs)("div",{className:"exemplo",children:[(0,or.jsx)("div",{className:"imagem1",children:(0,or.jsx)("img",{src:"imagens/empre1.png"})}),(0,or.jsx)("div",{className:"imagem2",children:(0,or.jsx)("img",{src:"imagens/empre2.png"})})]})]})]})};var da,ca=er.header(da||(da=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 0 150px;\n    margin-top: 50px;\n    \n    .titulo {\n        color: #44617C;\n        font-family: Montserrat;\n        font-size: 40px;\n        font-style: normal;\n        font-weight: 600;\n        line-height: 35px; /* 87.5% */\n    }\n"])));const ua=function(){return(0,or.jsx)(ca,{children:(0,or.jsx)("div",{className:"titulo",children:"Serviços"})})};var ma,pa=er.header(ma||(ma=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(['\n    background: linear-gradient(rgba(6, 6, 6, 0.55), rgba(6, 6, 6, 0.55)), url("imagens/fundoservicos.png");\n    height: 857px;\n    flex-shrink: 0;\n    margin-top: 50px;\n    padding: 50px 150px;\n    \n    .titulo{\n        margin-top: 100px;\n        color: #FFF;\n        font-family: Montserrat;\n        font-size: 40px;\n        font-style: normal;\n        font-weight: 600;\n        line-height: normal;\n        height: 53px;\n        flex-shrink: 0;\n    }\n    \n    .descricao {\n        margin-top: 50px;\n        width: 70%;\n        \n        color: #FFF;\n        font-family: Montserrat;\n        font-size: 20px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 30px; /* 150% */\n\n        height: 496px;\n        flex-shrink: 0;\n    }\n    \n    .parte1 {\n        height: 70px;\n        flex-shrink: 0;\n    }\n    \n    .topicos {\n        margin-top: 20px;\n        height: 426px;\n        flex-shrink: 0;\n        \n        ul {\n            li{\n                margin-top: 30px;\n                color: #FFF;\n                font-family: Montserrat;\n                font-size: 20px;\n                font-style: normal;\n                font-weight: 400;\n                line-height: 30px; /* 150% */\n            }\n        }\n    }\n'])));const fa=function(){return(0,or.jsxs)(pa,{children:[(0,or.jsx)("div",{className:"titulo",children:"Consultorias Especializadas"}),(0,or.jsxs)("div",{className:"descricao",children:[(0,or.jsx)("div",{className:"parte1",children:"Com histórico de atuação em diferentes setores econômicos, a PVR Capital oferece o serviço de consultoria, integrando a expertise da PVR Capital com especialistas setoriais parceiros."}),(0,or.jsx)("div",{className:"topicos",children:(0,or.jsxs)("ul",{children:[(0,or.jsx)("li",{children:" Ao longo dos anos o time de executivos da PVR Capital realizou projetos em diferentes setores, acumulando vasta bagagem setorial"}),(0,or.jsx)("li",{children:" Observando o cenário nacional, foi identificado uma oportunidade de geração de valor em diversas empresas familiares que apresentaram forte crescimento, mas não foi feita a profissionalização da gestão, dificultando a expansão do negócio"}),(0,or.jsx)("li",{children:"Com isso, a PVR Capital passou a atuar como consultor estratégico, assessorando estas empresas na profissionalização da gestão além da estruturação de um plano de negócios, identificando as oportunidades e riscos ao negócio nos próximos anos"}),(0,or.jsx)("li",{children:"Grande diferencial é a capacidade de trazer especialistas setoriais parceiros ao projeto, contribuindo com uma visão de mercado para a Companhia"})]})})]})]})};var ga,ha=er.header(ga||(ga=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 50px 150px;\n    \n    .titulo {\n        margin-top: 50px;\n        \n        color: #44617C;\n        font-family: Montserrat;\n        font-size: 40px;\n        font-style: normal;\n        font-weight: 600;\n        line-height: normal;\n    }\n    \n    .conteudo {\n        display: flex;\n        gap: 50px;\n        margin-top: 50px;\n\n        color: #000;\n        font-family: Montserrat;\n        font-size: 20px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 35px; /* 175% */\n        \n        .parte1 {\n            border-right: 2px solid #44617C;  \n            width: 50%;\n            ul {\n                padding: 0;\n                \n                li {\n                    margin-top: 30px;\n                }\n            }\n        }\n        \n        .parte2 {\n            width: 50%;\n            \n            ul {\n                padding: 0;\n                \n                li {\n                    margin-top: 30px;\n                }\n                \n                .imagem {\n                    margin-top: 50px;\n                    display: flex;\n                    justify-content: center;\n                    \n                    img {\n                        width: 321px;\n                        height: 151px;\n                        flex-shrink: 0;\n                    }\n                }\n            }\n        }\n    }\n    \n"])));const va=function(){return(0,or.jsxs)(ha,{children:[(0,or.jsx)("div",{className:"titulo",children:"Principais trabalhos realizados:"}),(0,or.jsxs)("div",{className:"conteudo",children:[(0,or.jsx)("div",{className:"parte1",children:(0,or.jsxs)("ul",{children:[(0,or.jsx)("li",{children:"Análise do cenário econômico e setorial do cliente"}),(0,or.jsx)("li",{children:"Tendências de mercado e identificação de oportunidades"}),(0,or.jsx)("li",{children:"Entendimento da operação e análise financeira"}),(0,or.jsx)("li",{children:"Entendimento dos pontos críticos e estruturação de planos de contingenciamento"}),(0,or.jsx)("li",{children:"Elaboração de plano de negócios"}),(0,or.jsx)("li",{children:"Definição de um plano de ação"}),(0,or.jsx)("li",{children:"Coordenação da implementação do plano estabelecido, fazendo o acompanhamento do projeto"})]})}),(0,or.jsx)("div",{className:"parte2",children:(0,or.jsxs)("ul",{children:[(0,or.jsx)("li",{children:"Atuou como consultor exclusivo do Banco Interamericano de Desenvolvimento – BID, em projeto que constituía a realização de um Market Sounding junto aos principais bancos de atacado e varejo do Brasil para entendimento da receptividade de um fundo garantidor exclusivo para os ISPs"}),(0,or.jsx)("li",{children:"Projeto concluído no primeiro trimestre de 2023, dando o embasamento necessário para a progressão do projeto macro do BID junto ao Ministério das Comunicações e o BNDES."}),(0,or.jsx)("div",{className:"imagem",children:(0,or.jsx)("img",{src:"imagens/empre3.png"})})]})})]})]})},Ca=function(){return(0,or.jsxs)(dr,{children:[(0,or.jsx)(ua,{}),(0,or.jsx)(la,{}),(0,or.jsx)(fa,{}),(0,or.jsx)(va,{})]})};var ba,ya=er.header(ba||(ba=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    background-color: #44617c;\n    padding: 50px 150px;\n\n    .titulo-principal {\n        color: #FFF;\n        font-family: Montserrat,serif;\n        font-size: 48px;\n        font-style: normal;\n        font-weight: 700;\n        line-height: normal;\n    }\n    \n    .header {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 20px;\n        \n        .titulo-secundario {\n            color: #FFF;\n            font-family: Montserrat;\n            font-size: 32px;\n            font-style: normal;\n            font-weight: 400;\n            line-height: normal;\n\n            opacity: 0.6;\n        }\n        \n        .pesquisa{\n            .icone-pesquisa {\n                position: relative;\n                left: 40px;\n            }\n            \n            .input-pesquisa {\n                width: 423px;\n                height: 58px;\n                flex-shrink: 0;\n\n                border: 2px solid #577FA4;\n                background: #FFF;\n                padding-left: 50px;\n                \n                & :focus {\n                    border: 2px solid #577FA4;\n                }\n                \n                &::placeholder {\n \n                    color: #577FA4;\n                    font-family: Montserrat;\n                    font-size: 12px;\n                    font-style: normal;\n                    font-weight: 400;\n                    line-height: normal;\n                }\n            }\n        }\n    }\n    \n    .transacoes {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        gap: 100px;\n        margin-bottom: 50px;\n        margin-top: 100px;\n        \n        .linha1 {\n            display: flex;\n            justify-content: space-between;\n        }\n        \n        .linha2 {\n            display: flex;\n            justify-content: space-between;\n        }\n    }\n    \n    .paginacao {\n        display: flex;\n        justify-content: center;\n        gap: 20px;\n        margin-top: 50px;\n        \n        button {\n            border-radius: 5px;\n            font-family: Montserrat;\n            font-size: 16px;\n            font-style: normal;\n            font-weight: 700;\n            line-height: normal;\n            padding: 10px 20px;\n        }\n        \n        span {\n            color: #FFF;\n            font-family: Montserrat;\n            font-size: 16px;\n            font-style: normal;\n            font-weight: 400;\n            line-height: normal;\n            display: flex;\n            align-items: center;\n        }\n    }\n"])));function Sa(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}const Pa=function(){var e,t,r=(e=(0,n.useState)(1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,s,a=[],l=!0,d=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(a.push(r.value),a.length!==n);l=!0);}catch(e){d=!0,o=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(d)throw o}}return a}}(e,t)||function(e,n){if(e){if("string"==typeof e)return Sa(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Sa(e,n):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1],s=6*(o-1),a=s+6,l=(Dr.slice(s,a),Math.ceil(Dr.length/6));return(0,or.jsxs)(ya,{children:[(0,or.jsx)("div",{className:"titulo-principal",children:"Transações"}),(0,or.jsxs)("div",{className:"header",children:[(0,or.jsx)("div",{className:"titulo-secundario",children:"Transacões realizadas pelos sócios da PVR Capital."}),(0,or.jsxs)("div",{className:"pesquisa",children:[(0,or.jsx)("img",{className:"icone-pesquisa",src:"imagens/lupa1.png",alt:"Ícone de pesquisa"}),(0,or.jsx)("input",{className:"input-pesquisa",id:"input-pesquisa",type:"text",placeholder:"Buscar"})]})]}),(0,or.jsxs)("div",{className:"transacoes",children:[(0,or.jsx)("div",{className:"linha1",children:Dr.slice(s,a/2).map((function(e,n){return(0,or.jsx)(Lr,{transacao:e,isCardMenor:!1,numero:n},n)}))}),(0,or.jsx)("div",{className:"linha2",children:Dr.slice(a/2,a).map((function(e,n){return(0,or.jsx)(Lr,{transacao:e,isCardMenor:!1,numero:n+3},n+3)}))})]}),(0,or.jsxs)("div",{className:"paginacao",children:[(0,or.jsx)(yr,{texto:"Anterior",modo:2,href:"#",onClick:function(){o>1&&i((function(e){return e-1}))}}),(0,or.jsxs)("span",{children:["Página ",o," de ",l]}),(0,or.jsx)(yr,{texto:"Próxima",modo:2,href:"#",onClick:function(){o<l&&i((function(e){return e+1}))},disabled:o===l})]})]})},xa=function(){return(0,or.jsx)(dr,{children:(0,or.jsx)(Pa,{})})};var Ea,Aa=er.header(Ea||(Ea=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 0 150px;\n    \n    margin-top: 50px;\n    margin-bottom: 70px;\n    \n    color: #44617C;\n    font-family: Montserrat;\n    font-size: 40px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: normal;\n"])));const Oa=function(){return(0,or.jsx)(Aa,{children:"Principais vantagens de se contratar uma assessoria financeira"})};var Da,_a,wa=er.header(Da||(Da=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 0 150px;\n\n    .efeito{\n        display: flex;\n        justify-content: right;\n        \n        .Graficopequeno2 {\n            margin-top: 50px;\n            /* width: 298px; */\n            /* height: 184px; */\n            /* left: 1499px; */\n            /* position: relative; */\n            /* justify-content: center; */\n            align-items: flex-end;\n            gap: 29px;\n            display: inline-flex;\n        }\n    }\n\n"]))),La=er.header(_a||(_a=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    margin-top: 50px;\n    \n    .titulo {\n        color: #577FA4;\n        font-family: Montserrat;\n        font-size: 32px;\n        font-style: normal;\n        font-weight: 600;\n        line-height: normal;\n        \n        img{\n            width: 20px;\n            height: 20px;\n            flex-shrink: 0;\n            margin-right: 5px;\n        }\n    }\n    \n    .descricao {\n        color: #000;\n        \n        ul {\n            li {\n                font-family: Montserrat;\n                font-size: 20px;\n                font-style: normal;\n                font-weight: 400;\n                line-height: normal;\n                margin-top: 20px;\n            }\n        }\n    }\n    \n    \n"])));const Ia=function(e){var n=e.titulo,t=e.descricao;return(0,or.jsxs)(La,{children:[(0,or.jsxs)("div",{className:"titulo",children:[(0,or.jsx)("img",{src:"imagens/triangulo.png"})," ",n]}),(0,or.jsx)("div",{className:"descricao",children:(0,or.jsx)("ul",{children:null==t?void 0:t.map((function(e,n){return(0,or.jsx)("li",{children:e},n)}))})})]})},ka=function(){return(0,or.jsxs)(wa,{children:[(0,or.jsx)(Ia,{titulo:"Sell-side",descricao:["Blindagem dos sócios ao longo do processo de venda, garantindo que o mesmo continue focado nas operações da Companhia","Construção de apresentações e materiais traduzidos para a linguagem dos investidores, acelerando as análises e eventuais propostas","Maximização do valor pago pelo investidor, com um time dedicado especializado no processo de negociação"]}),(0,or.jsx)(Ia,{titulo:"Título Exemplo",descricao:["Equipe dedicada na busca e acesso aos targets que se adequem a estratégia do cliente, reduzindo o tempo de seleção","Maior compreensão da realidade do lado vendedor, uma vez que Middle Market é majoritariamente composto por empresas familiares","Elimina a necessidade do cliente alocar capital humano em um projeto fora do core business"]}),(0,or.jsx)(Ia,{titulo:"Título Exemplo",descricao:["Possibilidade de maior entendimento das necessidades do cliente, oferecendo um leque maior de soluções","Network com investidores de dívida elimina a frustração de iniciar um projeto com incertezas quanto a demanda por determinado papel","Equipe dedicada na construção de materiais e negociação com investidores"]}),(0,or.jsx)("div",{className:"efeito",children:(0,or.jsxs)("div",{className:"Graficopequeno2",children:[(0,or.jsx)("div",{className:"Coluna1",style:{width:"80px",height:"45px",opacity:.3,background:"#D9D9D9"}}),(0,or.jsx)("div",{className:"Coluna2",style:{width:"80px",height:"113px",opacity:.3,background:"#EFEFEF"}}),(0,or.jsx)("div",{className:"Coluna3",style:{width:"80px",height:"184px",opacity:.3,background:"#577FA4"}})]})})]})};var Ua,Ma=er.header(Ua||(Ua=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    padding: 88px 150px 0;\n    background: #44617C;\n\n    .titulo {\n        color: #FFF;\n        font-family: Montserrat;\n        font-size: 40px;\n        font-style: normal;\n        font-weight: 600;\n        line-height: normal;\n    }\n    \n    .conteudo {\n        display: flex;\n        justify-content: center;\n        margin-top: 130px;\n        margin-bottom: 50px;\n\n        color: #FFF;\n        font-family: Montserrat;\n        font-size: 20px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n        \n        .coluna1 {\n            width: 35%;\n            padding-right: 5%;\n            border-right: 2px solid #577FA4;\n        }\n        \n        .coluna2 {\n            width: 35%;\n            padding-left: 5%;\n        }\n    }\n\n    .Graficopequeno1 {\n        transform: scaleX(-1);\n        /* transform-origin: 0 0; */\n        justify-content: center;\n        align-items: flex-end;\n        gap: 29px;\n        display: inline-flex;\n    }\n"])));const ja=function(){return(0,or.jsxs)(Ma,{children:[(0,or.jsx)("div",{className:"titulo",children:"Destaques"}),(0,or.jsxs)("div",{className:"conteudo",children:[(0,or.jsx)("div",{className:"coluna1",children:"“Vender a empresa é um dos principais momentos da jornada de um empreendedor. É nesta hora que todo sacrifício feito ao longo de anos de trabalho será financeiramente recompensado. Por isso, não há margem para erros e trilhar esta etapa com quem sabe é uma forma de mitigar riscos e evitar arrependimentos após a realização do negócio.”"}),(0,or.jsx)("div",{className:"coluna2",children:"“Você está tomando a decisão que vai mudar a sua vida, muitas vezes com grande carga emocional envolvida, com muita complexidade de documentação, de regras. Portanto, é preciso trazer junto neste momento quem já vivenciou isso, quem compreende essas cláusulas, condições e a própria dinâmica envolvida.”"})]}),(0,or.jsx)("div",{className:"efeito",children:(0,or.jsxs)("div",{className:"Graficopequeno1",children:[(0,or.jsx)("div",{className:"Coluna1",style:{width:"80px",height:"45px",opacity:.3,background:"#D9D9D9"}}),(0,or.jsx)("div",{className:"Coluna2",style:{width:"80px",height:"113px",opacity:.3,background:"#EFEFEF"}}),(0,or.jsx)("div",{className:"Coluna3",style:{width:"80px",height:"184px",opacity:.3,background:"#577FA4"}})]})})]})},Na=function(){return(0,or.jsxs)(dr,{children:[(0,or.jsx)(Oa,{}),(0,or.jsx)(ka,{}),(0,or.jsx)(ja,{})]})};var Ra=document.getElementById("root");(0,r.s)(Ra).render((0,or.jsx)(n.StrictMode,{children:(0,or.jsx)(pe,{children:(0,or.jsxs)(le,{children:[(0,or.jsx)(se,{path:"/",element:(0,or.jsx)(ia,{})}),(0,or.jsx)(se,{path:"/servicos",element:(0,or.jsx)(Ca,{})}),(0,or.jsx)(se,{path:"/transacoes",element:(0,or.jsx)(xa,{})}),(0,or.jsx)(se,{path:"/assessor",element:(0,or.jsx)(Na,{})})]})})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,